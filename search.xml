<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[模版元编程应用]]></title>
    <url>%2Fposts%2F5f8019f8%2F</url>
    <content type="text"><![CDATA[1.概述 关于C++11模板元的基本用法和常用技巧，在常规编程中可能很少遇到，那么C++11模版元编程用来解决什么实际问题呢，在实际工程中又该如何应用呢？本文将侧重介绍C++11模板的一些具体应用，向读者展示模版元编程的具体应用。 我们将展示如何通过C++11模版元来实现function_traits、Vairant类型和泛型bind绑定器。function_traits侧重于如何萃取可调用对象的一些元信息，Variant则是一种能接受多种类型数据的“万能”类型，bind则是一个泛化的绑定器，下面来看看这些具体的例子。类型萃取 C++模板中的类型参数T是抽象的，我们并不能在模板内部直接获得它的具体特征。类型萃取（抽取）技术就是要抽取类型的一些具体特征(trait)，比如它是哪种具体类型，它是引用类型，内建类型，还是类类型等。可见，类型萃取技术其实就是trait模板技术的具体体现。获取类型的具体特征在Java、C#等语言中也称为反射(reflection)，C++中通过模板技术也可以实现一定的反射行为。 类型信息是编译期的实体，现在要针对类型来进行编程，这其实就是模板元编程的一个方面。我们平常使用的if/else，while，for等基本的逻辑结构都是运行期的行为，在面向类型的编程中并不能使用，这就需要用到一些特殊的模板技术。实现类型萃取要用到的基本思想一个是特化，一个就是用typedef来携带类型信息。实际上，我们在用模板做设计时，一般建议在模板定义内部，为模板的每个类型参数提供typedef定义，这样在泛型代码中可以很容易地访问或抽取这些类型。 在C和C++中，普通的函数可以称为值函数，它们接受的参数是某些值，返回的结果也是值。而所谓的类型函数接受的实参是类型，返回的是被抽取出来的类型或常量值等（即用typedef定义的类型别名，一般不同的具体类型都定义统一的别名）。如类模板就是类型函数，sizeof是内建的类型函数，返回给定类型实参的大小。在类型编程中，很多地方都要用到sizeof。//下面演示一些有用的类型萃取实现，这些都是类型函数。2.function_traits function_traits用来获取函数语义的可调用对象的一些属性，比如函数类型、返回类型、函数指针类型和参数类型等。下面来看看如何实现function_traits。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;functional&gt;template&lt;typename T&gt;struct function_traits;//普通函数萃取template&lt;typename Ret, typename... Args&gt;struct function_traits&lt;Ret(Args...)&gt;&#123;public: enum &#123; arity = sizeof...(Args) &#125;; typedef Ret function_type(Args...); typedef Ret return_type; using stl_function_type = std::function&lt;function_type&gt;; typedef Ret(*pointer)(Args...); template&lt;size_t I&gt; struct args &#123; static_assert(I &lt; arity, "index is out of range, index must less than sizeof Args"); using type = typename std::tuple_element&lt;I, std::tuple&lt;Args...&gt;&gt;::type; &#125;;&#125;;//类函数萃取template&lt;typename Ret, typename Class, typename... Args&gt;struct function_traits&lt;Ret(Class::*) (Args...)&gt;&#123;public: enum &#123; arity = sizeof...(Args) &#125;; typedef Ret function_type(Args...); typedef Ret return_type; using stl_function_type = std::function&lt;function_type&gt;; typedef Ret(Class::* pointer)(Args...); typedef Class class_type; template&lt;size_t I&gt; struct args &#123; static_assert(I &lt; arity, "index is out of range, index must less than sizeof Args"); using type = typename std::tuple_element&lt;I, std::tuple&lt;Args...&gt;&gt;::type; &#125;;&#125;;//函数指针template&lt;typename Ret, typename... Args&gt;struct function_traits&lt;Ret(*)(Args...)&gt; : function_traits&lt;Ret(Args...)&gt; &#123;&#125;;//std::functiontemplate &lt;typename Ret, typename... Args&gt;struct function_traits&lt;std::function&lt;Ret(Args...)&gt;&gt; : function_traits&lt;Ret(Args...)&gt; &#123;&#125;;//member functiontemplate &lt;typename ReturnType, typename ClassType, typename... Args&gt;struct function_traits&lt;ReturnType(ClassType::*)(Args...) const&gt; : function_traits&lt;ReturnType(ClassType::*)(Args...)&gt; &#123;&#125;;//函数对象template&lt;typename Callable&gt;struct function_traits : function_traits&lt;decltype(&amp;Callable::operator())&gt; &#123;&#125;;由于可调用对象可能是普通的函数、函数指针、lambda、std::function和成员函数，所以我们需要针对这些类型分别做偏特化，然后萃取出可调用对象的元信息。其中，成员函数的偏特化稍微复杂一点，因为涉及到cv符的处理，这里通过定义一个宏来消除重复的模板类定义。参数类型的获取我们是借助于tuple，将参数转换为tuple类型，然后根据索引来获取对应类型。它的用法比较简单：1234567891011121314151617181920212223242526272829303132333435363738394041424344//类函数struct S&#123; inline void fun(const char*) &#123;&#125;;&#125;;//普通函数double fun() &#123; return 0.1; &#125;;template&lt;typename T&gt;void PrintType()&#123; std::cout &lt;&lt; typeid(T).name() &lt;&lt; std::endl;&#125;int main()&#123; void (S::* cfptr)(const char*) = &amp;S::fun; // class fnptr double (*fptr)() = fun; //fnptr std::function&lt;int(int)&gt; f = [](int a) &#123;return a; &#125;; //function auto lambda = [](int a) &#123;return a; &#125;; // lambda //打印函数类型 PrintType&lt;function_traits&lt;decltype(fptr)&gt;::function_type&gt;(); //将输出double __cdecl&lt;void&gt; //打印类函数指针类型 PrintType&lt;function_traits&lt;decltype(&amp;cfptr)&gt;::pointer&gt;(); //将输出void &lt;__thiscall S::*&gt;&lt;char const *&gt; //打印函数的第一个参数类型 PrintType&lt;function_traits&lt;std::function&lt;int(bool)&gt;&gt;::args&lt;0&gt;::type&gt;();//将输出bool //打印函数的返回类型 PrintType&lt;function_traits&lt;decltype(f)&gt;::return_type&gt;(); //将输出int //打印函数指针类型 PrintType&lt;function_traits&lt;decltype(f)&gt;::pointer&gt;(); //将输出int &lt;__cdecl*&gt;&lt;int&gt; //打印function函数类型 PrintType&lt;function_traits&lt;decltype(f)&gt;::stl_function_type&gt;(); //将输出class std::function&lt;int __cdecl&lt;int&gt;&gt; //lambda =&gt; 隐式转化为了匿名类对象 PrintType&lt;function_traits&lt;decltype(lambda)&gt;::class_type&gt;(); //将输出class &lt;lambda_13vr3tgewf32rt23rfgt435g41239da&gt;&#125;gun gcc下：1234567FdvEbiPFiiESt8functionIFiiEEZ4mainEUliE0_M1SFvPKcEVisual studio下：1234567double __cdecl(void)void (__thiscall S::*)(char const *)boolintint (__cdecl*)(int)class std::function&lt;int __cdecl(int)&gt;class &lt;lambda_173ed6f42b6e4df55bf9ec2e4778d93a&gt;其实结果是一样的，至于为什么可以参考这里可以看到这个function_traits通过类型萃取，可以很方便地获取可调用对象（函数、函数指针、函数对象、std::function和lambda表达式）的一些元信息，功能非常强大，这个function_traits经常会用到是更高层模版元程序的基础。比如Variant类型的实现就要用到这个function_traits，下面来看看Variant的实现。3.Variant 借助上面的function_traits和前文实现的一些元函数，我们就能方便的实现一个“万能类型”—Variant，Variant实际上一个泛化的类型，这个Variant和boost.variant的用法类似，需要预定义一些类型作为可接受的类型。boost.variant的基本用法如下：1234typedef variant&lt;int,char, double&gt; vt;vt v = 1;v = 'a';v = 12.32; 这个variant可以接受已经定义的那些类型，看起来有点类似于c#和java中的object类型，实际上variant是擦除了类型，要获取它的实际类型的时候就稍显麻烦，需要通过boost.visitor来访问：12345678910111213141516171819202122232425struct VariantVisitor : public boost::static_visitor&lt;void&gt;&#123; void operator() (int a) &#123; cout &lt;&lt; "int" &lt;&lt; endl; &#125; void operator() (short val) &#123; cout &lt;&lt; "short" &lt;&lt; endl; &#125; void operator() (double val) &#123; cout &lt;&lt; "double" &lt;&lt; endl; &#125; void operator() (std::string val) &#123; cout &lt;&lt; "string" &lt;&lt; endl; &#125;&#125;;boost::variant&lt;int,short,double,std::string&gt; v = 1;boost::apply_visitor(visitor, v); //将输出int​ 通过C++11模版元实现的Variant将改进值的获取，将获取实际值的方式改为内置的，即通过下面的方式来访问：123typedef Variant&lt;int, double, string, int&gt; cv;cv v = 10;v.Visit([&amp;](double i)&#123;cout &lt;&lt; i &lt;&lt; endl; &#125;, [](short i)&#123;cout &lt;&lt; i &lt;&lt; endl; &#125;, [=](int i)&#123;cout &lt;&lt; i &lt;&lt; endl; &#125;,[](const string&amp; i)&#123;cout &lt;&lt; i &lt;&lt; endl; &#125;);//结果将输出10 这种方式更方便直观。Variant的实现需要借助前文中实现的一些元函数MaxInteger、MaxAlign、Contains和At等等。可以在下面的tab中展开观看，下面来看看Variant实现的关键代码。IntegerMax代码：1234567891011121314/** 获取整数列表中最大的整数 */template &lt;std::size_t arg, std::size_t... rest&gt;struct IntegerMax;template &lt;std::size_t arg&gt;struct IntegerMax&lt;arg&gt; : std::integral_constant&lt;std::size_t, arg&gt;&#123;&#125;;template &lt;std::size_t arg1, std::size_t arg2, std::size_t... rest&gt;struct IntegerMax&lt;arg1, arg2, rest...&gt; : std::integral_constant&lt;std::size_t, arg1 &gt;= arg2 ? IntegerMax&lt;arg1, rest...&gt;::value : IntegerMax&lt;arg2, rest...&gt;::value&gt;&#123;&#125;;MaxAlign代码：12345/** 获取最大的align */template&lt;typename... Args&gt;struct MaxAlign : std::integral_constant&lt;int, IntegerMax&lt;std::alignment_of&lt;Args&gt;::value...&gt;::value&gt;&#123;&#125;;Contains代码：1234567891011121314/** 是否包含某个类型 */template &lt;typename T, typename... List&gt;struct Contains;template &lt;typename T, typename Head, typename... Rest&gt;struct Contains&lt;T, Head, Rest...&gt; : std::conditional&lt;std::is_same&lt;T, Head&gt;::value, std::true_type, Contains&lt;T, Rest... &gt;&gt; ::type&#123;&#125;;template &lt;typename T&gt;struct Contains&lt;T&gt; : std::false_type&#123;&#125;;IndexOf代码：1234567891011121314151617181920template &lt;typename T, typename... List&gt;struct IndexOf;template &lt;typename T, typename Head, typename... Rest&gt;struct IndexOf&lt;T, Head, Rest...&gt;&#123; enum &#123; value = IndexOf&lt;T, Rest...&gt;::value + 1 &#125;;&#125;;template &lt;typename T, typename... Rest&gt;struct IndexOf&lt;T, T, Rest...&gt;&#123; enum &#123; value = 0 &#125;;&#125;;template &lt;typename T&gt;struct IndexOf&lt;T&gt;&#123; enum&#123;value = -1&#125;;&#125;;At代码：1234567891011121314template&lt;int index, typename... Types&gt;struct At;template&lt;int index, typename First, typename... Types&gt;struct At&lt;index, First, Types...&gt;&#123; using type = typename At&lt;index - 1, Types...&gt;::type;&#125;;template&lt;typename T, typename... Types&gt;struct At&lt;0, T, Types...&gt;&#123; using type = T;&#125;;Variant关键代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697template&lt;typename... Types&gt;class Variant&#123; enum&#123; data_size = IntegerMax&lt;sizeof(Types)...&gt;::value, //参数个数 align_size = MaxAlign&lt;Types...&gt;::value //参数最大字节数 &#125;; using data_t = typename std::aligned_storage&lt;data_size, align_size&gt;::type;public: template&lt;int index&gt; using IndexType = typename At&lt;index, Types...&gt;::type; Variant(void) :m_typeIndex(typeid(void))&#123;&#125; ~Variant()&#123; Destroy(m_typeIndex, &amp;m_data); &#125; Variant(Variant&lt;Types...&gt;&amp;&amp; old) : m_typeIndex(old.m_typeIndex)&#123; Move(old.m_typeIndex, &amp;old.m_data, &amp;m_data); &#125; Variant(const Variant&lt;Types...&gt;&amp; old) : m_typeIndex(old.m_typeIndex)&#123; Copy(old.m_typeIndex, &amp;old.m_data, &amp;m_data); &#125; template &lt;class T, class = typename std::enable_if&lt;Contains&lt;typename std::remove_reference&lt;T&gt;::type, Types...&gt;::value&gt;::type&gt; Variant(T&amp;&amp; value) : m_typeIndex(typeid(void))&#123; Destroy(m_typeIndex, &amp;m_data); typedef typename std::remove_reference&lt;T&gt;::type U; new(&amp;m_data) U(std::forward&lt;T&gt;(value)); m_typeIndex = type_index(typeid(U)); &#125; template&lt;typename T&gt; bool Is() const&#123; return (m_typeIndex == type_index(typeid(T))); &#125; template&lt;typename T&gt; typename std::decay&lt;T&gt;::type&amp; Get()&#123; using U = typename std::decay&lt;T&gt;::type; if (!Is&lt;U&gt;()) &#123; cout &lt;&lt; typeid(U).name() &lt;&lt; " is not defined. " &lt;&lt; "current type is " &lt;&lt; m_typeIndex.name() &lt;&lt; endl; throw std::bad_cast(); &#125; return *(U*)(&amp;m_data); &#125; template&lt;typename F&gt; void Visit(F&amp;&amp; f)&#123; using T = typename Function_Traits&lt;F&gt;::template arg&lt;0&gt;::type; if (Is&lt;T&gt;()) f(Get&lt;T&gt;()); &#125; template&lt;typename F, typename... Rest&gt; void Visit(F&amp;&amp; f, Rest&amp;&amp;... rest)&#123; using T = typename Function_Traits&lt;F&gt;::template arg&lt;0&gt;::type; if (Is&lt;T&gt;()) Visit(std::forward&lt;F&gt;(f)); else Visit(std::forward&lt;Rest&gt;(rest)...); &#125;private: void Destroy(const type_index&amp; index, void * buf)&#123; std::initializer_list&lt;int&gt;&#123;(Destroy0&lt;Types&gt;(index, buf), 0)...&#125;; &#125; template&lt;typename T&gt; void Destroy0(const type_index&amp; id, void* data)&#123; if (id == type_index(typeid(T))) reinterpret_cast&lt;T*&gt;(data)-&gt;~T(); &#125; void Move(const type_index&amp; old_t, void* old_v, void* new_v) &#123; std::initializer_list&lt;int&gt;&#123;(Move0&lt;Types&gt;(old_t, old_v, new_v), 0)...&#125;; &#125; template&lt;typename T&gt; void Move0(const type_index&amp; old_t, void* old_v, void* new_v)&#123; if (old_t == type_index(typeid(T))) new (new_v)T(std::move(*reinterpret_cast&lt;T*&gt;(old_v))); &#125; void Copy(const type_index&amp; old_t, void* old_v, void* new_v)&#123; std::initializer_list&lt;int&gt;&#123;(Copy0&lt;Types&gt;(old_t, old_v, new_v), 0)...&#125;; &#125; template&lt;typename T&gt; void Copy0(const type_index&amp; old_t, void* old_v, void* new_v)&#123; if (old_t == type_index(typeid(T))) new (new_v)T(*reinterpret_cast&lt;const T*&gt;(old_v)); &#125;private: data_t m_data; std::type_index m_typeIndex;//类型ID&#125;; 实现Variant首先需要定义一个足够大的缓冲区用来存放不同的类型的值，这个缓类型冲区实际上就是用来擦除类型，不同的类型都通过placement new在这个缓冲区上创建对象，因为类型长度不同，所以需要考虑内存对齐，C++11刚好提供了内存对齐的缓冲区aligned_storage：12template&lt; std::size_t Len, std::size_t Align = /*default-alignment*/ &gt;struct aligned_storage;它的第一个参数是缓冲区的长度，第二个参数是缓冲区内存对齐的大小，由于Varaint可以接受多种类型，所以我们需要获取最大的类型长度，保证缓冲区足够大，然后还要获取最大的内存对齐大小，这里我们通过前面实现的MaxInteger和MaxAlign就可以了，Varaint中内存对齐的缓冲区定义如下：1234567enum&#123; data_size = IntegerMax&lt;sizeof(Types)...&gt;::value, align_size = MaxAlign&lt;Types...&gt;::value&#125;;using data_t = typename std::aligned_storage&lt;data_size, align_size&gt;::type; //内存对齐的缓冲区类型其次，我们还要实现对缓冲区的构造、拷贝、析构和移动，因为Variant重新赋值的时候需要将缓冲区中原来的类型析构掉，拷贝构造和移动构造时则需要拷贝和移动。这里以析构为例，我们需要根据当前的type_index来遍历Variant的所有类型，找到对应的类型然后调用该类型的析构函数。123456789101112 void Destroy(const type_index&amp; index, void * buf)&#123; std::initializer_list&lt;int&gt;&#123;(Destroy0&lt;Types&gt;(index, buf), 0)...&#125;; //这里通过一个初始化列表来初始化一个变长数组，int数组的目的就是为了在数组构造的过程展开参数包&#125;template&lt;typename T&gt;void Destroy0(const type_index&amp; id, void* data)&#123; if (id == type_index(typeid(T))) reinterpret_cast&lt;T*&gt;(data)-&gt;~T();&#125;这里，我们通过初始化列表和逗号表达式来展开可变模板参数，在展开的过程中查找对应的类型，如果找到了则析构。在Variant构造时还需要注意一个细节是，Variant不能接受没有预先定义的类型，所以在构造Variant时，需要限定类型必须在预定义的类型范围当中，这里通过type_traits的enable_if来限定模板参数的类型。1234567template &lt;class T, class = typename std::enable_if&lt;Contains&lt;typename std::remove_reference&lt;T&gt;::type, Types...&gt;::value&gt;::type&gt; Variant(T&amp;&amp; value) : m_typeIndex(typeid(void))&#123; Destroy(m_typeIndex, &amp;m_data); typedef typename std::remove_reference&lt;T&gt;::type U; new(&amp;m_data) U(std::forward&lt;T&gt;(value)); m_typeIndex = type_index(typeid(U)); &#125;这里enbale_if的条件就是前面实现的元函数Contains的值，当没有在预定义的类型中找到对应的类型时，即Contains返回false时，编译期会报一个编译错误。最后还需要实现内置的Vistit功能，Visit的实现需要先通过定义一系列的访问函数，然后再遍历这些函数，遍历过程中，判断函数的第一个参数类型的type_index是否与当前的type_index相同，如果相同则获取当前类型的值。123456789101112131415template&lt;typename F&gt; void Visit(F&amp;&amp; f)&#123; using T = typename Function_Traits&lt;F&gt;::template arg&lt;0&gt;::type; if (Is&lt;T&gt;()) f(Get&lt;T&gt;()); &#125; template&lt;typename F, typename... Rest&gt; void Visit(F&amp;&amp; f, Rest&amp;&amp;... rest)&#123; using T = typename Function_Traits&lt;F&gt;::template arg&lt;0&gt;::type; if (Is&lt;T&gt;()) Visit(std::forward&lt;F&gt;(f)); else Visit(std::forward&lt;Rest&gt;(rest)...); &#125; Visit功能的实现利用了可变模板参数和function_traits，通过可变模板参数来遍历一系列的访问函数，遍历过程中，通过function_traits来获取第一个参数的类型，和Variant当前的type_index相同时则取值。为什么要获取访问函数第一个参数的类型呢？因为Variant的值是唯一的，只有一个值，所以获取的访问函数的第一个参数的类型就是Variant中存储的对象的实际类型。未完待续。。。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++中优雅的异步操作]]></title>
    <url>%2Fposts%2Fc02967a6%2F</url>
    <content type="text"><![CDATA[c++11中增加了线程，使得我们可以非常方便的创建线程，它的基本用法是这样的：123void f(int n);std::thread t(f, n + 1);t.join(); 但是线程毕竟是属于比较低层次的东西，有时候使用有些不便，比如我希望获取线程函数的返回结果的时候，我就不能直接通过thread.join()得到结果，这时就必须定义一个变量，在线程函数中去给这个变量赋值，然后join,最后得到结果，这个过程是比较繁琐的。c++11还提供了异步接口std::async，通过这个异步接口可以很方便的获取线程函数的执行结果。std::async会自动创建一个线程去调用线程函数，它返回一个std::future，这个future中存储了线程函数返回的结果，当我们需要线程函数的结果时，直接从future中获取，非常方便。但是我想说的是，其实std::async给我们提供的便利可不仅仅是这一点，它首先解耦了线程的创建和执行，使得我们可以在需要的时候获取异步操作的结果；其次它还提供了线程的创建策略（比如可以通过延迟加载的方式去创建线程），使得我们可以以多种方式去创建线程。在介绍async具体用法以及为什么要用std::async代替线程的创建之前，我想先说一说std::future、std::promise和std::packaged_task。std::futur std::future是一个非常有用也很有意思的东西，简单说std::future提供了一种访问异步操作结果的机制。从字面意思来理解，它表示未来，我觉得这个名字非常贴切，因为一个异步操作我们是不可能马上就获取操作结果的，只能在未来某个时候获取，但是我们可以以同步等待的方式来获取结果，可以通过查询future的状态（future_status）来获取异步操作的结果。future_status有三种状态：deferred：异步操作还没开始ready：异步操作已经完成timeout：异步操作超时123456789101112//查询future的状态std::future_status status; do &#123; status = future.wait_for(std::chrono::seconds(1)); if (status == std::future_status::deferred) &#123; std::cout &lt;&lt; "deferred\n"; //代表延迟执行 &#125; else if (status == std::future_status::timeout) &#123; std::cout &lt;&lt; "timeout\n"; //代表执行中 &#125; else if (status == std::future_status::ready) &#123; std::cout &lt;&lt; "ready!\n"; //代表已经执行完成 &#125; &#125; while (status != std::future_status::ready); 获取future结果有三种方式：get、wait、wait_for，其中get等待异步操作结束并返回结果，wait只是等待异步操作完成，没有返回值，wait_for是超时等待返回结果。std::promise std::promise为获取线程函数中的某个值提供便利，在线程函数中给外面传进来的promise赋值，当线程函数执行完成之后就可以通过promis获取该值了，值得注意的是取值是间接的通过promise内部提供的future来获取的。它的基本用法：1234std::promise&lt;int&gt; pr;std::thread t([](std::promise&lt;int&gt;&amp; p)&#123; p.set_value_at_thread_exit(9); &#125;,std::ref(pr));std::future&lt;int&gt; f = pr.get_future();auto r = f.get();std::packaged_task std::packaged_task它包装了一个可调用的目标（如function, lambda expression, bind expression, or another function object）,以便异步调用，它和promise在某种程度上有点像，promise保存了一个共享状态的值，而packaged_task保存的是一个函数。它的基本用法：1234std::packaged_task&lt;int()&gt; task([]()&#123; return 7; &#125;);std::thread t1(std::ref(task)); std::future&lt;int&gt; f1 = task.get_future(); auto r1 = f1.get();std::promise、std::packaged_task和std::future的关系 至此, 我们介绍了std::async相关的几个对象std::future、std::promise和std::packaged_task，其中std::promise和std::packaged_task的结果最终都是通过其内部的future返回出来的，不知道读者有没有搞糊涂，为什么有这么多东西出来，他们之间的关系到底是怎样的？且听我慢慢道来，std::future提供了一个访问异步操作结果的机制，它和线程是一个级别的属于低层次的对象，在它之上高一层的是std::packaged_task和std::promise，他们内部都有future以便访问异步操作结果，std::packaged_task包装的是一个异步操作，而std::promise包装的是一个值，都是为了方便异步操作的，因为有时我需要获取线程中的某个值，这时就用std::promise，而有时我需要获一个异步操作的返回值，这时就用std::packaged_task。那std::promise和std::packaged_task之间又是什么关系呢？说他们没关系也关系，说他们有关系也有关系，都取决于你了，因为我可以将一个异步操作的结果保存到std::promise中。如果读者还没搞清楚他们的关系的话，我就用更通俗的话来解释一下。比如，一个小伙子给一个姑娘表白真心的时候也许会说：”我许诺会给你一个美好的未来“或者”我会努力奋斗为你创造一个美好的未来“。姑娘往往会说：”我等着“。现在我来将这三句话用c++11来翻译一下：小伙子说：我许诺会给你一个美好的未来等于c++11中”std::promise a std::future”;小伙子说：我会努力奋斗为你创造一个美好的未来等于c++11中”std::packaged_task a future”;姑娘说：我等着等于c++11中”future.get()/wait()”; 小伙子两句话的个中差异，自己琢磨一下，这点差异也是std::promise和std::packaged_task的差异。现实中的山盟海誓靠不靠得住我不知道，但是c++11中的许诺和未来是一定可靠的，发起来了许诺就一定有未来。细想起来c++11标准的制定者选定的关键字真是贴切而有意思！好了，插科打诨到此了，现在言归正传，回过头来说说std::async。为什么要用std::async代替线程的创建 std::async又是干啥的，已经有了td::future、std::promise和std::packaged_task，够多的了，真的还要一个std::async来凑热闹吗，std::async表示很委屈：我不是来凑热闹的，我是来帮忙的。是的，std::async是为了让用户的少费点脑子的，它让这三个对象默契的工作。大概的工作过程是这样的：std::async先将异步操作用std::packaged_task包装起来，然后将异步操作的结果放到std::promise中，这个过程就是创造未来的过程。外面再通过future.get/wait来获取这个未来的结果，怎么样，std::async真的是来帮忙的吧，你不用再想到底该怎么用std::future、std::promise和std::packaged_task了，std::async已经帮你搞定一切了！ 现在来看看std::async的原型async(std::launch::async | std::launch::deferred, f, args…)，第一个参数是线程的创建策略，有两种策略，默认的策略是立即创建线程：std::launch::async：在调用async就开始创建线程。std::launch::deferred：延迟加载方式创建线程。调用async时不创建线程，直到调用了future的get或者wait时才创建线程。可能在这里会阻塞住主线程。第二个参数是线程函数，第三个参数是线程函数的参数。std::async基本用法：12345678910111213141516171819202122232425262728293031323334353637std::future&lt;int&gt; f1 = std::async(std::launch::async, []()&#123; return 8; &#125;); cout&lt;&lt;f1.get()&lt;&lt;endl; //output: 8std::future&lt;int&gt; f2 = std::async(std::launch::async, []()&#123; cout&lt;&lt;8&lt;&lt;endl; &#125;); f2.wait(); //output: 8std::future&lt;int&gt; future = std::async(std::launch::async, []()&#123; std::this_thread::sleep_for(std::chrono::seconds(3)); return 8; &#125;); std::cout &lt;&lt; "waiting...\n"; std::future_status status; do &#123; status = future.wait_for(std::chrono::seconds(1)); if (status == std::future_status::deferred) &#123; std::cout &lt;&lt; "deferred\n"; &#125; else if (status == std::future_status::timeout) &#123; std::cout &lt;&lt; "timeout\n"; &#125; else if (status == std::future_status::ready) &#123; std::cout &lt;&lt; "ready!\n"; &#125; &#125; while (status != std::future_status::ready); std::cout &lt;&lt; "result is " &lt;&lt; future.get() &lt;&lt; '\n';可能的结果：waiting...timeouttimeoutready!result is 8总结： std::async是更高层次上的异步操作，使我们不用关注线程创建内部细节，就能方便的获取异步执行状态和结果，还可以指定线程创建策略，应该用std::async替代线程的创建，让它成为我们做异步操作的首选。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mutex头文件介绍]]></title>
    <url>%2Fposts%2F58aac72e%2F</url>
    <content type="text"><![CDATA[Mutex 又称互斥量，C++ 11中与 Mutex 相关的类（包括锁类型）和函数都声明在头文件中，所以如果你需要使用 std::mutex，就必须包含头文件。头文件介绍Mutex 系列类(四种)std::mutex，最基本的 Mutex 类。std::recursive_mutex，递归 Mutex 类。std::time_mutex，定时 Mutex 类。std::recursive_timed_mutex，定时递归 Mutex 类。Lock 类（两种）std::lock_guard，与 Mutex RAII 相关，方便线程对互斥量上锁。std::unique_lock，与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。其他类型std::once_flagstd::adopt_lock_tstd::defer_lock_tstd::try_to_lock_t函数std::try_lock，尝试同时对多个互斥量上锁。std::lock，可以同时对多个互斥量上锁。std::call_once，如果多个线程需要同时调用某个函数，call_once 可以保证多个线程对该函数只调用一次。std::mutex 介绍下面以 std::mutex 为例介绍 C++11 中的互斥量用法。std::mutex 是C++11 中最基本的互斥量，std::mutex 对象提供了独占所有权的特性——即不支持递归地对 std::mutex 对象上锁，而 std::recursive_lock 则可以递归地对互斥量对象上锁。std::mutex 的成员函数构造函数，std::mutex不允许拷贝构造，也不允许 move 拷贝，最初产生的 mutex 对象是处于 unlocked 状态的。lock()，调用线程将锁住该互斥量。线程调用该函数会发生下面 3 种情况：(1). 如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁。(2). 如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。unlock()， 解锁，释放对互斥量的所有权。try_lock()，尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞。线程调用该函数也会出现下面 3 种情况，(1). 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量。(2). 如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。下面给出一个与 std::mutex 的小例子（参考）1234567891011121314151617181920212223242526#include &lt;iostream&gt; // std::cout#include &lt;thread&gt; // std::thread#include &lt;mutex&gt; // std::mutexvolatile int counter(0); // non-atomic counterstd::mutex mtx; // locks access to countervoid attempt_10k_increases() &#123; for (int i=0; i&lt;10000; ++i) &#123; if (mtx.try_lock()) &#123; // only increase if currently not locked: ++counter; mtx.unlock(); &#125; &#125;&#125;int main (int argc, const char* argv[]) &#123; std::thread threads[10]; for (int i=0; i&lt;10; ++i) threads[i] = std::thread(attempt_10k_increases); for (auto&amp; th : threads) th.join(); std::cout &lt;&lt; counter &lt;&lt; " successful increases of the counter.\n"; return 0;&#125;输出结果：123$g++ -lpthread -std=c++11 -o main *.cpp$main9012 successful increases of the counter.可以看出有很多次mtx.try_lock()返回了false，并没有执行++counter操作。如果把mtx.try_lock()改成mtx.lock()，则必定会阻塞其他线程。输出结果2:123$g++ -lpthread -std=c++11 -o main *.cpp$main100000 successful increases of the counter.std::recursive_mutex 介绍std::recursive_mutex 与 std::mutex 一样，也是一种可以被上锁的对象，但是和 std::mutex 不同的是，std::recursive_mutex 允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，std::recursive_mutex 释放互斥量时需要调用与该锁层次深度相同次数的 unlock()，可理解为 lock() 次数和 unlock() 次数相同，除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同。12345678910111213141516171819202122232425#include &lt;iostream&gt; // std::cout#include &lt;thread&gt; // std::thread#include &lt;mutex&gt; // std::mutexvolatile int counter(0); // non-atomic counterstd::recursive_mutex rmtx; // locks access to countervoid attempt_1k_increases() &#123; for (int i=0; i&lt;10000; ++i) &#123; rmtx.lock(); ++counter; &#125; for (int i=0; i&lt;10000; ++i) &#123; counter-=2; rmtx.unlock(); &#125;&#125;int main (int argc, const char* argv[]) &#123; auto th = std::thread(attempt_1k_increases); th.join(); std::cout &lt;&lt; counter &lt;&lt; " successful increases of the counter.\n"; return 0;&#125;输出结果：123$g++ -lpthread -o main *.cpp$main-10000 successful increases of the counter.std::time_mutex 介绍std::time_mutex 比 std::mutex 多了两个成员函数，try_lock_for()，try_lock_until()。try_lock_for 函数接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与 std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回 false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。try_lock_until 函数则接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。下面的小例子说明了 std::time_mutex 的用法（参考）。1234567891011121314151617181920212223242526272829#include &lt;iostream&gt; // std::cout#include &lt;chrono&gt; // std::chrono::milliseconds#include &lt;thread&gt; // std::thread#include &lt;mutex&gt; // std::timed_mutexstd::timed_mutex mtx;void fireworks() &#123; // waiting to get a lock: each thread prints "-" every 200ms: while (!mtx.try_lock_for(std::chrono::milliseconds(200))) &#123; std::cout &lt;&lt; "-"; &#125; // got a lock! - wait for 1s, then this thread prints "*" std::this_thread::sleep_for(std::chrono::milliseconds(1000)); std::cout &lt;&lt; "*\n"; mtx.unlock();&#125;int main ()&#123; std::thread threads[10]; // spawn 10 threads: for (int i=0; i&lt;10; ++i) threads[i] = std::thread(fireworks); for (auto&amp; th : threads) th.join(); return 0;&#125;输出结果：线程输出*表示该线程已经正常退出，并且释放该锁。否则将每200ms尝试获取mutex🔒，直到成功为止。std::recursive_timed_mutex 介绍和 std:recursive_mutex 与 std::mutex 的关系一样，std::recursive_timed_mutex 的特性也可以从 std::timed_mutex 推导出来，感兴趣的同鞋可以自行查阅。 ;-)std::lock_guard 介绍与 Mutex RAII 相关，方便线程对互斥量上锁。例子（参考）:1.std::lock_guard 在构造函数中进行加锁，析构函数中进行解锁。2.锁在多线程编程中，使用较多，因此c++11提供了lock_guard模板类；在实际编程中，我们也可以根据自己的场景编写resource_guard RAII类，避免忘掉释放资源。12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt; // std::cout#include &lt;thread&gt; // std::thread#include &lt;mutex&gt; // std::mutex, std::lock_guard#include &lt;stdexcept&gt; // std::logic_errorstd::mutex mtx;void print_even (int x) &#123; if (x%2==0) std::cout &lt;&lt; x &lt;&lt; " is even\n"; else throw (std::logic_error("not even"));&#125;void print_thread_id (int id) &#123; try &#123; // using a local lock_guard to lock mtx guarantees unlocking on destruction / exception: std::lock_guard&lt;std::mutex&gt; lck (mtx); print_even(id); &#125; catch (std::logic_error&amp;) &#123; std::cout &lt;&lt; "[exception caught]\n"; &#125;&#125;int main ()&#123; std::thread threads[10]; // spawn 10 threads: for (int i=0; i&lt;10; ++i) threads[i] = std::thread(print_thread_id,i+1); for (auto&amp; th : threads) th.join(); return 0;&#125;输出结果：123456789101112$g++ -lpthread -o main *.cpp$main[exception caught]4 is even[exception caught]2 is even[exception caught]6 is even8 is even[exception caught][exception caught]10 is evenstd::unique_lock 介绍与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。例子（参考）：1.类 unique_lock 是通用互斥包装器，允许延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用。2.unique_lock比lock_guard使用更加灵活，功能更加强大。使用unique_lock需要付出更多的时间、性能成本。12345678910111213141516171819202122232425#include &lt;iostream&gt; // std::cout#include &lt;thread&gt; // std::thread#include &lt;mutex&gt; // std::mutex, std::unique_lockstd::mutex mtx; // mutex for critical sectionvoid print_block (int n, char c) &#123; // critical section (exclusive access to std::cout signaled by lifetime of lck): std::unique_lock&lt;std::mutex&gt; lck (mtx); for (int i=0; i&lt;n; ++i) &#123; std::cout &lt;&lt; c; &#125; std::cout &lt;&lt; '\n';&#125;int main ()&#123; std::thread th1 (print_block,50,'*'); std::thread th2 (print_block,50,'$'); th1.join(); th2.join(); return 0;&#125;输出结果：1234$g++ -lpthread -o main *.cpp$main**************************************************$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$好了，本文暂时讲到这里，还剩下 std::try_lock，std::lock，std::call_once 三个函数没有讲到，留在下一篇博客中讲吧 ;-)]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++之Lambda研究]]></title>
    <url>%2Fposts%2F95b963ee%2F</url>
    <content type="text"><![CDATA[1. 前言本文代码测试环境为“GCC-9.1.0”，有关编译器的安装请参考《安装GCC-8.3.0及其依赖》，适用于“GCC-9.1.0”。本文试图揭露Lambda背后一面，以方便更好的理解和掌握Lambda。Lambda代码段实际为一个编译器生成的类的“operator ()”函数，编译器会为每一个Lambda函数生成一个匿名的类（在C++中，类和结构体实际一样，无本质区别，除了默认的访问控制）。对Lambda的最简单理解，是将它看作一个匿名类（或结构体），实际上也确实如此，编译器把Lambda编译成了匿名类。2. 示例1先看一段几乎最简单的Lambda代码：123456// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;int main() &#123; auto f = [] &#123; printf("f\n"); &#125;; // 注意“&#125;”后的“;”必不可少，否则编译报错 return 0;&#125;如果Lambda表达式（或函数）没有以“;”结尾，则编译时将报如下错误：1234a3.cpp: In function 'int main()':a3.cpp:4:3: error: expected ',' or ';' before 'return' 4 | return 0; | ^~~~~~Lambda之所以神奇，这得益于C++编译器的工作，上述“f”实际长这样：12type = struct &lt;lambda()&gt; &#123;&#125;一个匿名的类（或结构体），实际上还有一个成员函数“operator () const”。注意这里成员函数是”const”类型，这是默认的。如果需非”const”成员函数，需要加”mutable”修饰，如下所示：1auto f = [n]() mutable &#123; printf("%d\n", n); &#125;;上面例子对应的匿名类没有任何类数据成员，现在来个有类数据成员的代码：12345678// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;int main() &#123; int n = 3; auto f = [n] &#123; printf("%d\n", n); &#125;; f(); // 这里实际调用的是匿名类的成员函数“operator ()” return 0;&#125;这时，“f”实际长这样，它是一个含有类数据成员的匿名类，而不再是空无一特的类：123type = struct &lt;lambda()&gt; &#123; int __n;&#125;3. 示例2继续来个变种：12345678910// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;int main() &#123; int n = 3; auto f = [&amp;n]() mutable &#123; printf("%d\n", n); &#125;; f(); return 0;&#125;这时，“f”实际长这样，一个包含了引用类型的匿名类：123type = struct &lt;lambda()&gt; &#123; int &amp;__n;&#125;4. 示例3继续变种，“&amp;”的作用让Lambda函数可使用Lambda所在作用域内所有可见的局部变量（包括Lambda所在类的this），并且是以引用传递方式：123456789// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;int main() &#123; int n = 3; auto f = [&amp;]() mutable &#123; printf("%d\n", n); &#125;; f(); return 0;&#125;“f”实际长这样：123type = struct &lt;lambda()&gt; &#123; int &amp;__n;&#125;变稍复杂一点：123456789// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;int main() &#123; int n = 3; int m = 5; auto f = [&amp;]() mutable &#123; printf("%d\n", n); &#125;; f(); return 0;&#125;可以看到，“f”并没有发生变化：123type = struct &lt;lambda()&gt; &#123; int &amp;__n;&#125;5. 示例4继续增加复杂度：123456789// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;int main() &#123; int n = 3; int m = 5; auto f = [&amp;]() mutable &#123; printf("%d,%d\n", n, m); &#125;; f(); return 0;&#125;可以看到“f”变了：1234type = struct &lt;lambda()&gt; &#123; int &amp;__n; int &amp;__m;&#125;从上面不难看出，编译器只会把Lambda函数用到的变量打包进对应的匿名类。继续一个稍复杂点的：1234567891011121314// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;struct X &#123; void foo() &#123; printf("foo\n"); &#125; void xoo() &#123; auto f = [&amp;] &#123; foo(); &#125;; f(); &#125;&#125;;int main() &#123; X().xoo(); return 0;&#125;这时，“f”实际长这样：123type = struct X::&lt;lambda()&gt; &#123; X * const __this; // X类型的指针（非对象）&#125;如果将“auto f = [&amp;] { foo(); };”中的“&amp;”去掉，则会遇到编译错误，提示“this”没有被Lambda函数捕获：12345a2.cpp: In lambda function:a2.cpp:5:23: error: 'this' was not captured for this lambda function 5 | auto f = [] &#123; foo(); &#125;; | ^a2.cpp:5:23: error: cannot call member function 'void X::foo()' without object改成下列方式捕获也是可以的：1234567891011121314// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;struct X &#123; void foo() &#123; printf("foo\n"); &#125; void xoo() &#123; auto f = [this] &#123; foo(); &#125;; f(); &#125;&#125;;int main() &#123; X().xoo(); return 0;&#125;如果是C++17，还可以这样：1234567891011121314// g++ -g -o a1 a1.cpp -std=c++17#include &lt;stdio.h&gt;struct X &#123; void foo() &#123; printf("foo\n"); &#125; void xoo() &#123; auto f = [*this]() mutable &#123; foo(); &#125;; f(); &#125;&#125;;int main() &#123; X().xoo(); return 0;&#125;注意得有“mutable”修饰，不然报如下编译错误：1234567a2.cpp: In lambda function:a2.cpp:5:30: error: passing 'const X' as 'this' argument discards qualifiers [-fpermissive] 5 | auto f = [*this]() &#123; foo(); &#125;; | ^a2.cpp:3:8: note: in call to 'void X::foo()' 3 | void foo() &#123; printf("foo\n"); &#125; | ^~~也可以这样：123456789101112131415// g++ -g -o a1 a1.cpp -std=c++17#include &lt;stdio.h&gt;struct X &#123; void foo() &#123; printf("foo\n"); &#125; void xoo() &#123; auto f = [&amp;,*this]() mutable &#123; foo(); &#125;; f(); &#125;&#125;;int main() &#123; X().xoo(); return 0;&#125;使用“*this”时的“f”样子如下：123type = struct X::&lt;lambda()&gt; &#123; X __this; // X类型的对象（非指针）&#125;6. 示例5继续研究，使用C++ RTTI（Run-Time Type Identification，运行时类型识别）设施“typeid”查看Lambda函数：123456789101112131415// g++ -g -o a1 a1.cpp -std=c++11#include &lt;stdio.h&gt;#include &lt;typeinfo&gt;struct X &#123; void xoo() &#123; auto f = [] &#123; printf("f\n"); &#125;; printf("%s\n", typeid(f).name()); // 注：typeid返回值类型为“std::type_info” &#125;&#125;;int main() &#123; X().xoo(); return 0;&#125;运行输出：ZN1X3xooEvEUlvE_7. 匿名类规则编译器为Lambda生成的匿名类规则（不同标准有区别）：构造函数拷贝构造函数ClosureType()&nbsp;=&nbsp;delete;C++14前ClosureType()&nbsp;=&nbsp;default;C++20起，仅当未指定任何俘获时ClosureType(const&nbsp;ClosureType&amp;&nbsp;)&nbsp;=&nbsp;default;C++14起ClosureType(ClosureType&amp;&amp;&nbsp;)&nbsp;=&nbsp;default;C++14起拷贝复制函数ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;delete;C++20前ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;default;ClosureType&amp;&nbsp;operator=(ClosureType&amp;&amp;)&nbsp;=&nbsp;default;C++20起，仅当未指定任何俘获时ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;delete;C++20起，其他情况析构函数~ClosureType()&nbsp;=&nbsp;default;析构函数是隐式声明的对于标记为“delete”的函数是不能调用的，如下列代码中的“f2 = f1;”将触发编译错误：1234567891011int main() &#123; auto f1 = []&#123;&#125;; auto f2 = f1; f2 = f1; return 0;&#125;上列代码在C++11、C++14和C++17均会报错。不过如规则所示，C++20（含C++2a）上则可以正常编译：1234567a3.cpp: In function 'int main()':a3.cpp:4:8: error: use of deleted function 'main()::&lt;lambda()&gt;&amp; main()::&lt;lambda()&gt;::operator=(const main()::&lt;lambda()&gt;&amp;)' 4 | f2 = f1; | ^~a3.cpp:2:14: note: a lambda closure type has a deleted copy assignment operator 2 | auto f1 = []&#123;&#125;; | ^希望通过本文，对理解Lambda有所帮助。8. 参考资料1) https://zh.cppreference.com/w/cpp/language/lambda2) https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-20193) https://en.cpprefeence.com/w/cpp/language/lambda4) https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c115) https://www.cprogramming.com/c++11/c++11-lambda-closures.html作者：一见来源：CSDN原文：https://blog.csdn.net/Aquester/article/details/90691479]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ 模板偏特化－来自STL的思考]]></title>
    <url>%2Fposts%2F2a215b70%2F</url>
    <content type="text"><![CDATA[之前学习STL时接触过一段时间的模板，模板是C++泛型编程编程的基础STL从头到尾都是模板泛型编程，我觉得用的最巧妙的就是在traits萃取技巧时用到的模板偏特化先简要回顾一下模板吧，模板主要分为函数模板与类模板函数模板12345678910template&lt;class T&gt;T add(T a, T b) &#123; return a + b;&#125;int main()&#123; int a = 1, b = 2; std::cout &lt;&lt; add(a + b) &lt;&lt; std::endl; return 0;&#125;如上就是最简单的函数模板，当实例化函数模板时，编译器会自动进行实参类型推导上面类型T就被自动推导为int类型类模板12345678910111213141516templete&lt;class T&gt;class A&#123;public: explicit A(T val) : t(val) &#123; &#125; T add(T x) &#123; return t + y; &#125; privete: T t;&#125;;int main()&#123; A&lt;int&gt; a(10); std::cout &lt;&lt; a.add(5) &lt;&lt; std::endl; return 0;&#125;如上就是最简单的类模板，实例化类模板必须要指定类型，编译器无法为类模板自动推导类型几个需要注意的点１．类模板的和函数模板都必须定义在.h头文件中２．模板的实例化类型确定是在编译期间３．只是模板写好了，编译一般不会很多出错，出错一般会在实例化编译之后４．模板实例化只会实例化用到的部分，没有用到的部分将不会被实例化我觉得模板的特例化是模板中比较精髓的东西有函数模板特例化，类模板特例化，其中又分为全特化与偏特化主要的用途都是对于特定的类型，指定特定的处理方式就相当于普通编程中if-else if - else这样的方式编译阶段确定如果是某个特化类型，就用特化的模板如果都不是，就用最一般的模板函数模板特例化函数模板只能全特化，不能偏特化，如果要偏特化的话只能重载函数模板全特化1234567891011template&lt; &gt; // 全特化 注意语法double add(double a, double b) &#123; return a + b; &#125;int main()&#123; int x = 10, y = 20; double z = 1.1, w = 2.2; std::cout &lt;&lt; add(x, y) &lt;&lt; std::endl; // 调用普通版本 std::cout &lt;&lt; add(z, w) &lt;&lt; std::endl; // 调用全特化版本 return 0;&#125;如果有与实参更加匹配的特例化版本，编译器将会选择特例化版本函数模板重载（不存在偏特化）因为偏特化版本本质上仍然是模板，所以如果需要的话，可以重载一个函数模板12345678910template&lt;class T1&gt; // 重载版本，接收参数为指针T1 add(T1* a, T1* b) &#123; return *a + *b; &#125; int main()&#123; int a = 10, b = 20; int *x = &amp;a, *y = &amp;b; add(a, b); // 调用普通模板 add(x, y); // 调用重载的模板 return 0;&#125;如上，如果需要一个接收指针的偏特化版本，那么可以用重载模板实现函数模板不存在偏特化类模板特例化类模板既有全特化，又有偏特化这里重新写一个更一般的模板类来说明类模板的特例化类模板全特化比较好理解，跟函数模板一样，全特化是一个实例，当编译器匹配时会优先匹配参数一致的实例123456789template&lt; &gt; // 注意语法class A&lt;char*&gt; // 一个全特化的模板类A&#123; // 当用char*类型来实例化类模板A时，将会优先调用这个全特化实例public: explicit A(char* val) : t(val) &#123; &#125; char* add(char* a, char* b) &#123; return strcat(a, b); &#125;private: char* t;&#125;;类模板的偏特化类模板的偏特化会稍微复杂一点点，它有多种形式类模板偏特化本质上都是指定部分类型，让偏特化版本称为普通版本的子集，若实例化时参数类型为指定的类型，则优先调用特例化版本第一种形式12345template&lt;class T1, class T2&gt; // 普通版本，有两个模板参数class B &#123; ..... &#125;;template&lt;class T2&gt; // 偏特化版本，指定其中一个参数，即指定了部分类型class B&lt;int , T2&gt; &#123; ..... &#125;; // 当实例化时的第一个参数为int 则会优先调用这个版本第二种形式，也是最重要的版本12345678template&lt;class T&gt; // 普通版本class B &#123; ..... &#125;;template&lt;class T&gt; //这个偏特化版本只接收指针类型的模板实参 class B&lt;T*&gt; &#123; ..... &#125;; template&lt;class T&gt;class B&lt;T&amp;&gt; &#123; ..... &#125;; // 这个偏特化版本只接受引用类型的模板实参第三种形式12345template&lt;class T&gt; //普通版本class B &#123; ..... &#125;;template&lt;class T&gt; // 这种只接受用T实例化的vector的模板实参．也是一种偏特化class B&lt;vector&lt;T&gt;&gt; &#123; ...... &#125;;几个值得注意的地方１．特例化本质上是我们顶替了编译器的工作，我们帮编译器做了类型推导２．全特化本质上是一个实例，而偏特化本质上还是一个模板，只是原来模板的一个子集３．所以全特化的函数模板，本质上是实例，从而不会与函数模板产生二义性４．若想让用户能使用特例化版本，特例化版本必须与模板定义在同一个.h头文件中STL中的迭代器实现与高效实现与模板偏特化息息相关．类模板偏特化与STL偏特化在STL中最重要的两个应用１．应用在迭代器设计中，为了使迭代器既可以萃取出值类型，又可以包容原生指针如果要通过一个迭代器就能知道它的值类型，那么一般会使用iterator_traits迭代器萃取技术的两个核心是：１）在每个迭代器类中定义value_type值类型的类型成员，这样直接通过迭代器的value_type类型成员就可以知道值类型２）问题就在于，迭代器必须兼容原生指针，而原生指针很难被重新定义，即要在原生指针的类中添加value_type的值类型的类型成员．这时候，靠的就是类模板的偏特化了．新添加一层iterator_traits类，专门萃取迭代器的属性，然后再对iterator_traits类设计原生指针与原生引用的偏特化版本，就解决了这个棘手的问题２． type_traits类型萃取，对待特殊类型，特殊处理，提高效率对于没有构造函数，析构函数等的内置类型，如果与复杂类型一样，执行同样的操作，显然是效率不高的先实现一个对所有类型都设置一个最保守值的type_traits模板类，然后再对每个内置类型设置偏特化版本，内置类型设置一个更为激进的值，表明可以采取更为高效的操作来提高效率比如copy函数，如果传递的对象是一个复杂类型，那么可能只能采取最保守的处理方式，一个一个的构造；如果是内置类型，这样显然太低效，使用memcpy()可能会好一些其实iterator_traits也不止是处理兼容原生指针的问题，它也可以提高效率．迭代器分为很多种，有可以随机访问的（vector），有只能前后一个一个移动的（list）,也有只能单向移动的（slist），所以一般把迭代器分为五种：InputIterator 输入迭代器OutputIterator 输出迭代器ForwardIterator 单向迭代器BidirectionIterator 双向迭代器RandomAccessIterator 随机访问迭代器比如一个advance(n)函数，对于单向迭代器只能一个一个移动过去，但是这种实现对于随机访问迭代器显然不是理想的处理方式处理的方式就是先实现这五个类，用作标记用，在每个迭代器里面都定义迭代器类型的类型成员iterator_catagory，再对不同版本的迭代器实现不同的advance(n)处理方式比如stl中添加右值引用元模板的实现：1234567891011121314template&lt;typename _Tp, bool = __and_&lt;__not_&lt;is_reference&lt;_Tp&gt;&gt;, __not_&lt;is_void&lt;_Tp&gt;&gt;&gt;::value&gt; struct __add_rvalue_reference_helper &#123;typedef __Tp type; &#125;;template&lt;typename _Tp&gt; struct __add_rvalue_reference_helper&lt;__Tp, true&gt; &#123;typedef __Tp&amp;&amp; type; &#125;; template&lt;typename _Tp&gt;struct add_rvalue_reference: public __add_rvalue_reference_helper&lt;_Tp&gt;&#123; &#125;;可以发现调用时一般为static_cast&lt;typenameadd_rvalue_reference&lt;T&gt;::type&gt;(__t),首先会匹配泛化版本的元模板类，第二个模版参数bool会匹配_Tp的类型，如果原来不是引用类型的话就直接匹配true的偏特化版本（优先级高），否则false为原泛化版本。短短几行代码已经展示出了模板偏/全特化的强大匹配功能！]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++中的万能引用和完美转发]]></title>
    <url>%2Fposts%2Fdc484a2e%2F</url>
    <content type="text"><![CDATA[C++中的万能引用和完美转发阅读这篇博文需要了解C++中的左值（lvalue）和右值（rvalue）的概念，详情参见我的另外一篇博文：C++移动语义及拷贝优化万能引用和完美转发多涉及到模板的使用，如若不是自己写模板，则可不用关心万能引用（Universal Reference）首先，我们来看一个例子：1234567891011121314151617#include &lt;iostream&gt;using std::cout;using std::endl;template&lt;typename T&gt;void func(T&amp; param) &#123; cout &lt;&lt; param &lt;&lt; endl;&#125;int main() &#123; int num = 2019; func(num); return 0;&#125;这样例子的编译输出都没有什么问题，但是如果我们修改成下面的调用方式呢？1234int main() &#123; func(2019); return 0;&#125;则会得到一个大大的编译错误。因为上面的模板函数只能接受左值或者左值引用（左值一般是有名字的变量，可以取到地址的），我们当然可以重载一个接受右值的模板函数，如下也可以达到效果。1234567891011121314151617template&lt;typename T&gt;void func(T&amp; param) &#123; cout &lt;&lt; "传入的是左值" &lt;&lt; endl;&#125;template&lt;typename T&gt;void func(T&amp;&amp; param) &#123; cout &lt;&lt; "传入的是右值" &lt;&lt; endl;&#125;int main() &#123; int num = 2019; func(num); func(2019); return 0;&#125;输出结果：12传入的是左值传入的是右值第一次函数调用的是左值得版本，第二次函数调用的是右值版本。但是，有没有办法只写一个模板函数即可以接收左值又可以接收右值呢？C++ 11中有万能引用（Universal Reference）的概念：使用T&amp;&amp;类型的形参既能绑定右值，又能绑定左值。但是注意了：只有发生类型推导的时候，T&amp;&amp;才表示万能引用； 否则，表示右值引用。所以，上面的案例我们可以修改为：123456789101112template&lt;typename T&gt;void func(T&amp;&amp; param) &#123; cout &lt;&lt; param &lt;&lt; endl;&#125;int main() &#123; int num = 2019; func(num); func(2019); return 0;&#125;引用折叠（Universal Collapse）万能引用说完了，接着来聊引用折叠（Univers Collapse），因为完美转发（Perfect Forwarding）的概念涉及引用折叠。一个模板函数，根据定义的形参和传入的实参的类型，我们可以有下面四中组合：左值-左值 T&amp; &amp; # 函数定义的形参类型是左值引用，传入的实参是左值引用左值-右值 T&amp; &amp;&amp; # 函数定义的形参类型是左值引用，传入的实参是右值引用右值-左值 T&amp;&amp; &amp; # 函数定义的形参类型是右值引用，传入的实参是左值引用右值-右值 T&amp;&amp; &amp;&amp; # 函数定义的形参类型是右值引用，传入的实参是右值引用但是C++中不允许对引用再进行引用，对于上述情况的处理有如下的规则：所有的折叠引用最终都代表一个引用，要么是左值引用，要么是右值引用。规则是：如果任一引用为左值引用，则结果为左值引用。否则（即两个都是右值引用），结果为右值引用。即就是前面三种情况代表的都是左值引用，而第四种代表的右值引用。完美转发（Perfect Forwarding）下面接着说完美转发（Perfect Forwarding），首先，看2个例子：🌰栗子[1]要了解完美转发，先得清楚模板T的推导过程，在没有偏特化的模版前提下，模板总是根据最匹配的规则来推导参数，可以根据下面的例子来看出推导过程。12345678910111213141516171819202122232425262728template &lt;typename T&gt;void func(T&amp;&amp; arg) &#123; auto is_lval = std::is_lvalue_reference&lt;T&gt;::value; auto is_rval = std::is_rvalue_reference&lt;T&gt;::value; if(std::is_same&lt;T, int&gt;::value) &#123; std::cout &lt;&lt; "'T' is type[int]" &lt;&lt; " ?is lvalue reference:" &lt;&lt; is_lval &lt;&lt; " ?is rvalue reference:" &lt;&lt; is_rval &lt;&lt; " arg:" &lt;&lt; arg &lt;&lt; std::endl; &#125; else if(std::is_same&lt;T, int&amp;&gt;::value) &#123; std::cout &lt;&lt; "'T' is type[int&amp;]" &lt;&lt; " ?is lvalue reference:" &lt;&lt; is_lval &lt;&lt; " ?is rvalue reference:" &lt;&lt; is_rval &lt;&lt; " arg:" &lt;&lt; arg &lt;&lt; std::endl; &#125; else if(std::is_same&lt;T, int&amp;&amp;&gt;::value) &#123; std::cout &lt;&lt; "'T' is type[int&amp;&amp;]" &lt;&lt; " ?is lvalue reference:" &lt;&lt; is_lval &lt;&lt; " ?is rvalue reference:" &lt;&lt; is_rval &lt;&lt; " arg:" &lt;&lt; arg &lt;&lt; std::endl; &#125; std::cout &lt;&lt; "-----------------" &lt;&lt; std::endl;&#125;int main() &#123; int a = 1; func(a); func(2); func(static_cast&lt;int&amp;&gt;(a)); func(static_cast&lt;int&amp;&amp;&gt;(a));&#125;输出结果为：12345678'T' is type[int&amp;] ?is lvalue reference:1 ?is rvalue reference:0 arg:1-----------------'T' is type[int] ?is lvalue reference:0 ?is rvalue reference:0 arg:2-----------------'T' is type[int&amp;] ?is lvalue reference:1 ?is rvalue reference:0 arg:1-----------------'T' is type[int] ?is lvalue reference:0 ?is rvalue reference:0 arg:1-----------------可以发现，当实参数是以值传递的方式推导时，左值传递T为int&amp;，右值传递T为int。为什么会这样呢？如果将模版参数显示绑定：1234567int main() &#123; int a = 1; func&lt;int&gt;(a); //错误❌ func&lt;int&gt;(2); func&lt;int&amp;&gt;(static_cast&lt;int&amp;&gt;(a)); func&lt;int&amp;&amp;&gt;(static_cast&lt;int&amp;&amp;&gt;(a));&#125;会发现无法编译通过：1234In function 'int main()'error: no matching for call to 'func(int&amp;)' func&lt;int&gt;(a); ...根据C++ Primer中文版(第五版) 18章第2节模板实参推断Note:如果一个函数参数是指向模版板参数类型的右值引用(如，T&amp;&amp;)，则可以传递给它任意类型的实参。如果将一个左值传递给这样的参数，则函数参数被实例化为一个普通的左值引用(T&amp;)。，估计是编译器做了特殊的处理。由于int无法匹配T&amp;&amp;，所以只能根据引用折叠（Universal Collapse）规则，int&amp; &amp;&amp;=int&amp;，int &amp;&amp;= int&amp;&amp;。保留了参数的左值右值特性。这也符合引用折叠规则。当实参数以左值引用和右值引用的方式推导时，int&amp;还是无法匹配T&amp;&amp;，所以T=int&amp;，而int&amp;&amp;刚好匹配T&amp;&amp;，所以T就是int。🌰栗子[2]为了方便观察调用过程，我们在std::forward函数copy出来，增加输出一条内容，改为test::forward，其他保持不变。123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;bits/move.h&gt;// add print contentnamespace test&#123;template&lt;typename _Tp&gt; constexpr _Tp&amp;&amp; forward(typename std::remove_reference&lt;_Tp&gt;::type&amp; __t) noexcept &#123; std::cout &lt;&lt; "Forward an l-value." &lt;&lt; std::endl; return static_cast&lt;_Tp&amp;&amp;&gt;(__t); &#125;template&lt;typename _Tp&gt; constexpr _Tp&amp;&amp; forward(typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp; __t) noexcept &#123; std::cout &lt;&lt; "Forward an r-value." &lt;&lt; std::endl; static_assert(!std::is_lvalue_reference&lt;_Tp&gt;::value, "template argument" " substituting _Tp is an lvalue reference type"); return static_cast&lt;_Tp&amp;&amp;&gt;(__t); &#125;&#125;// my template functionstemplate&lt;typename T&gt;void func(T&amp; param) &#123; std::cout &lt;&lt; "传入的是左值" &lt;&lt; std::endl;&#125;template&lt;typename T&gt;void func(T&amp;&amp; param) &#123; std::cout &lt;&lt; "传入的是右值" &lt;&lt; std::endl;&#125;template&lt;typename T&gt;void warp(T&amp;&amp; param) &#123; func(param);&#125;extern "C" &#123;int main(int argc, char* argv[]) &#123; int num = 2019; warp(num); warp(2019); return 0;&#125;&#125;输出结果为：12传入的是左值传入的是左值是不是和我们预期的不一样，下面我们来分析一下原因：warp()函数本身的形参是一个万能引用，即可以接受左值又可以接受右值；第一个warp()函数调用实参是左值，所以，warp()函数中调用func()中传入的参数也应该是左值；第二个warp()函数调用实参是右值，根据上面所说的引用折叠规则，warp()函数接收的参数类型是右值引用，那么为什么却调用了调用func()的左值版本了呢？这是因为在warp()函数内部，右值引用类型变为了左值，因为参数有了名称，我们也通过变量名取得变量地址。结论：无论传入wrap()的参数是左值还是右值，到了函数内部都变成了左值。那么问题来了，怎么保持函数调用过程中，变量类型的不变呢？这就是我们所谓的“完美转发”技术，在C++11中通过std::forward()函数来实现。我们修改我们的warp()函数如下：1234template&lt;typename T&gt;void warp(T&amp;&amp; param) &#123; func(test::forward&lt;T&gt;(param));&#125;输出结果为：1234Forward an l-value.传入的是左值Forward an l-value.传入的是右值现在跟我们的预期一致了，但是原理是什么呢？观察forward()函数内部不难发现，传入的参数做了移除引用的操作，使其都为&amp;&amp; 或 &amp;，所以有2个函数版本，重点在于模版返回的时候return static_cast&lt;_Tp&amp;&amp;&gt;(__t);强制将实参转换成T原有的引用类型，根据引用折叠原则，T&amp;&amp; &amp;还是&amp;，T&amp;&amp; &amp;&amp;还是&amp;&amp;。所以实现了“完美转发”。如果将wrap()函数改为这样呢？1234template&lt;typename T&gt;void warp(T&amp;&amp; param) &#123; func(test::forward&lt;T&gt;(std::move(param)));&#125;编译结果：12Error：static_assert(template argument substituting _Tp is an lvalue reference type");可以发现成功走到了第二个forward()函数版本。将static_assert&lt;&gt;注释掉，编译通过。输出结果为：1234Forward an r-value.传入的是左值Forward an r-value.传入的是右值对比std::move()的返回值就可以发现，它的返回值是return static_cast&lt;typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t);不难看出，必是右值引用。而std::forward()函数则将其按T的引用类型保持不变原样返回。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从4行代码看右值引用]]></title>
    <url>%2Fposts%2F9d2f4ec8%2F</url>
    <content type="text"><![CDATA[概述 右值引用的概念有些读者可能会感到陌生，其实他和C++98/03中的左值引用有些类似，例如，c++98/03中的左值引用是这样的：12int i = 0;int&amp; j = i; 这里的int&amp;是对左值进行绑定（但是int&amp;却不能绑定右值），相应的，对右值进行绑定的引用就是右值引用，他的语法是这样的A&amp;&amp;，通过双引号来表示绑定类型为A的右值。通过&amp;&amp;我们就可以很方便的绑定右值了，比如我们可以这样绑定一个右值： 1int&amp;&amp; i = 0; 这里我们绑定了一个右值0，关于右值的概念会在后面介绍。右值引用是C++11中新增加的一个很重要的特性，他主是要用来解决C++98/03中遇到的两个问题，第一个问题就是临时对象非必要的昂贵的拷贝操作，第二个问题是在模板函数中如何按照参数的实际类型进行转发。通过引入右值引用，很好的解决了这两个问题，改进了程序性能，后面将会详细介绍右值引用是如何解决这两个问题的。 和右值引用相关的概念比较多，比如：右值、纯右值、将亡值、universal references、引用折叠、移动语义、move语义和完美转发等等。很多都是新概念，对于刚学习C++11右值引用的初学者来说，可能会觉得右值引用过于复杂，概念之间的关系难以理清。右值引用实际上并没有那么复杂，其实是关于4行代码的故事，通过简单的4行代码我们就能清晰的理解右值引用相关的概念了。本文希望带领读者通过4行代码来理解右值引用相关的概念，理清他们之间的关系，并最终能透彻地掌握C++11的新特性–右值引用。四行代码的故事第1行代码的故事1int i = getVar(); 上面的这行代码很简单，从getVar()函数获取一个整形值，然而，这行代码会产生几种类型的值呢？答案是会产生两种类型的值，一种是左值i，一种是函数getVar()返回的临时值，这个临时值在表达式结束后就销毁了，而左值i在表达式结束后仍然存在，这个临时值就是右值，具体来说是一个纯右值，右值是不具名的。区分左值和右值的一个简单办法是：看能不能对表达式取地址，如果能，则为左值，否则为右值。 所有的具名变量或对象都是左值，而匿名变量则是右值，比如，简单的赋值语句：1int i = 0; 在这条语句中，i 是左值，0 是字面量，就是右值。在上面的代码中，i 可以被引用，0 就不可以了。具体来说上面的表达式中等号右边的0是纯右值（prvalue），在C++11中所有的值必属于左值、将亡值、纯右值三者之一。比如，非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和lambda表达式等都是纯右值。而将亡值是C++11新增的、与右值引用相关的表达式，比如，将要被移动的对象、T&amp;&amp;函数返回值、std::move返回值和转换为T&amp;&amp;的类型的转换函数的返回值等。关于将亡值我们会在后面介绍，先看下面的代码：123int j = 5;auto f = []&#123;return 5;&#125;; 上面的代码中5是一个原始字面量， []{return 5;}是一个lambda表达式，都是属于纯右值，他们的特点是在表达式结束之后就销毁了。 通过地行代码我们对右值有了一个初步的认识，知道了什么是右值，接下来再来看看第二行代码。第2行代码的故事1T&amp;&amp; k = getVar(); 第二行代码和第一行代码很像，只是相比第一行代码多了“&amp;&amp;”，他就是右值引用，我们知道左值引用是对左值的引用，那么，对应的，对右值的引用就是右值引用，而且右值是匿名变量，我们也只能通过引用的方式来获取右值。虽然第二行代码和第一行代码看起来差别不大，但是实际上语义的差别很大，这里，getVar()产生的临时值不会像第一行代码那样，在表达式结束之后就销毁了，而是会被“续命”，他的生命周期将会通过右值引用得以延续，和变量k的声明周期一样长。右值引用的第一个特点 通过右值引用的声明，右值又“重获新生”，其生命周期与右值引用类型变量的生命周期一样长，只要该变量还活着，该右值临时量将会一直存活下去。让我们通过一个简单的例子来看看右值的生命周期。如代码清单1-1所示。代码清单1-112345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std;int g_constructCount=0;int g_copyConstructCount=0;int g_destructCount=0;struct A&#123; A()&#123; cout&lt;&lt;"construct: "&lt;&lt;++g_constructCount&lt;&lt;endl; &#125; A(const A&amp; a) &#123; cout&lt;&lt;"copy construct: "&lt;&lt;++g_copyConstructCount &lt;&lt;endl; &#125; ~A() &#123; cout&lt;&lt;"destruct: "&lt;&lt;++g_destructCount&lt;&lt;endl; &#125;&#125;;A GetA()&#123; return A();&#125;int main() &#123; A a = GetA(); return 0;&#125; 为了清楚的观察临时值，在编译时设置编译选项-fno-elide-constructors用来关闭返回值优化效果。 输出结果：123456construct: 1copy construct: 1destruct: 1copy construct: 2destruct: 2destruct: 3 从上面的例子中可以看到，在没有返回值优化的情况下，拷贝构造函数调用了两次，一次是GetA()函数内部创建的对象返回出来构造一个临时对象产生的，另一次是在main函数中构造a对象产生的。第二次的destruct是因为临时对象在构造a对象之后就销毁了。如果开启返回值优化的话，输出结果将是：construct: 1destruct: 1 可以看到返回值优化将会把临时对象优化掉，但这不是c++标准，是各编译器的优化规则。我们在回到之前提到的可以通过右值引用来延长临时右值的生命周期，如果上面的代码中我们通过右值引用来绑定函数返回值的话，结果又会是什么样的呢？在编译时设置编译选项-fno-elide-constructors。123456789int main() &#123; A&amp;&amp; a = GetA(); return 0;&#125;输出结果：construct: 1copy construct: 1destruct: 1destruct: 2 通过右值引用，比之前少了一次拷贝构造和一次析构，原因在于右值引用绑定了右值，让临时右值的生命周期延长了。我们可以利用这个特点做一些性能优化，即避免临时对象的拷贝构造和析构，事实上，在c++98/03中，通过常量左值引用也经常用来做性能优化。上面的代码改成： const A&amp; a = GetA(); 输出的结果和右值引用一样，因为常量左值引用是一个“万能”的引用类型，可以接受左值、右值、常量左值和常量右值。需要注意的是普通的左值引用不能接受右值，比如这样的写法是不对的： A&amp; a = GetA(); 上面的代码会报一个编译错误，因为非常量左值引用只能接受左值。右值引用的第二个特点 右值引用独立于左值和右值。意思是右值引用类型的变量可能是左值也可能是右值。比如下面的例子：1int&amp;&amp; var1 = 1; var1类型为右值引用，但var1本身是左值，因为具名变量都是左值。 关于右值引用一个有意思的问题是：T&amp;&amp;是什么，一定是右值吗？让我们来看看下面的例子：12345template&lt;typename T&gt;void f(T&amp;&amp; t)&#123;&#125;f(10); //t是右值int x = 10;f(x); //t是左值 从上面的代码中可以看到，T&amp;&amp;表示的值类型不确定，可能是左值又可能是右值，这一点看起来有点奇怪，这就是右值引用的一个特点。右值引用的第三个特点 T&amp;&amp; t在发生自动类型推断的时候，它是未定的引用类型（universal references），如果被一个左值初始化，它就是一个左值；如果它被一个右值初始化，它就是一个右值，它是左值还是右值取决于它的初始化。我们再回过头看上面的代码，对于函数templatevoid f(T&amp;&amp; t)，当参数为右值10的时候，根据universal references的特点，t被一个右值初始化，那么t就是右值；当参数为左值x时，t被一个左值引用初始化，那么t就是一个左值。需要注意的是，仅仅是当发生自动类型推导（如函数模板的类型自动推导，或auto关键字）的时候，T&amp;&amp;才是universal references。再看看下面的例子：1234567template&lt;typename T&gt;void f(T&amp;&amp; param); template&lt;typename T&gt;class Test &#123; Test(Test&amp;&amp; rhs); &#125;; 上面的例子中，param是universal reference，rhs是Test&amp;&amp;右值引用，因为模版函数f发生了类型推断，而Test&amp;&amp;并没有发生类型推导，因为Test&amp;&amp;是确定的类型了。 正是因为右值引用可能是左值也可能是右值，依赖于初始化，并不是一下子就确定的特点，我们可以利用这一点做很多文章，比如后面要介绍的移动语义和完美转发。 这里再提一下引用折叠，正是因为引入了右值引用，所以可能存在左值引用与右值引用和右值引用与右值引用的折叠，C++11确定了引用折叠的规则，规则是这样的：所有的右值引用叠加到右值引用上仍然还是一个右值引用；所有的其他引用类型之间的叠加都将变成左值引用。第3行代码的故事1T(T&amp;&amp; a) : m_val(val)&#123; a.m_val=nullptr; &#125; 这行代码实际上来自于一个类的构造函数，构造函数的一个参数是一个右值引用，为什么将右值引用作为构造函数的参数呢？在解答这个问题之前我们先看一个例子。如代码清单1-2所示。代码清单1-21234567891011121314151617181920class A&#123;public: A():m_ptr(new int(0))&#123;cout &lt;&lt; "construct" &lt;&lt; endl;&#125; A(const A&amp; a):m_ptr(new int(*a.m_ptr)) //深拷贝的拷贝构造函数 &#123; cout &lt;&lt; "copy construct" &lt;&lt; endl; &#125; ~A()&#123; delete m_ptr;&#125;private: int* m_ptr;&#125;;int main() &#123; A a = GetA(); return 0;&#125; 输出：constructcopy constructcopy construct 这个例子很简单，一个带有堆内存的类，必须提供一个深拷贝拷贝构造函数，因为默认的拷贝构造函数是浅拷贝，会发生“指针悬挂”的问题。如果不提供深拷贝的拷贝构造函数，上面的测试代码将会发生错误（编译选项-fno-elide-constructors），内部的m_ptr将会被删除两次，一次是临时右值析构的时候删除一次，第二次外面构造的a对象释放时删除一次，而这两个对象的m_ptr是同一个指针，这就是所谓的指针悬挂问题。提供深拷贝的拷贝构造函数虽然可以保证正确，但是在有些时候会造成额外的性能损耗，因为有时候这种深拷贝是不必要的。比如下面的代码： 上面代码中的GetA函数会返回临时变量，然后通过这个临时变量拷贝构造了一个新的对象a，临时变量在拷贝构造完成之后就销毁了，如果堆内存很大的话，那么，这个拷贝构造的代价会很大，带来了额外的性能损失。每次都会产生临时变量并造成额外的性能损失，有没有办法避免临时变量造成的性能损失呢？答案是肯定的，C++11已经有了解决方法，看看下面的代码。如代码清单1-3所示。代码清单1-3123456789101112131415161718192021222324class A&#123;public: A() :m_ptr(new int(0))&#123;&#125; A(const A&amp; a):m_ptr(new int(*a.m_ptr)) //深拷贝的拷贝构造函数 &#123; cout &lt;&lt; "copy construct" &lt;&lt; endl; &#125; A(A&amp;&amp; a) :m_ptr(a.m_ptr) &#123; a.m_ptr = nullptr; cout &lt;&lt; "move construct" &lt;&lt; endl; &#125; ~A()&#123; delete m_ptr;&#125;private: int* m_ptr;&#125;;int main()&#123; A a = Get(false); &#125; 输出：constructmove constructmove construct 代码清单1-3和1-2相比只多了一个构造函数，输出结果表明，并没有调用拷贝构造函数，只调用了move construct函数，让我们来看看这个move construct函数：12345A(A&amp;&amp; a) :m_ptr(a.m_ptr)&#123; a.m_ptr = nullptr; cout &lt;&lt; "move construct" &lt;&lt; endl;&#125; 这个构造函数并没有做深拷贝，仅仅是将指针的所有者转移到了另外一个对象，同时，将参数对象a的指针置为空，这里仅仅是做了浅拷贝，因此，这个构造函数避免了临时变量的深拷贝问题。 上面这个函数其实就是移动构造函数，他的参数是一个右值引用类型，这里的A&amp;&amp;表示右值，为什么？前面已经提到，这里没有发生类型推断，是确定的右值引用类型。为什么会匹配到这个构造函数？因为这个构造函数只能接受右值参数，而函数返回值是右值，所以就会匹配到这个构造函数。这里的A&amp;&amp;可以看作是临时值的标识，对于临时值我们仅仅需要做浅拷贝即可，无需再做深拷贝，从而解决了前面提到的临时变量拷贝构造产生的性能损失的问题。这就是所谓的移动语义，右值引用的一个重要作用是用来支持移动语义的。 需要注意的一个细节是，我们提供移动构造函数的同时也会提供一个拷贝构造函数，以防止移动不成功的时候还能拷贝构造，使我们的代码更安全。 我们知道移动语义是通过右值引用来匹配临时值的，那么，普通的左值是否也能借助移动语义来优化性能呢，那该怎么做呢？事实上C++11为了解决这个问题，提供了std::move方法来将左值转换为右值，从而方便应用移动语义。move是将对象资源的所有权从一个对象转移到另一个对象，只是转移，没有内存的拷贝，这就是所谓的move语义。如图1-1所示是深拷贝和move的区别。图1-1 深拷贝和move的区别 再看看下面的例子：1234567&#123; std::list&lt; std::string&gt; tokens; //省略初始化... std::list&lt; std::string&gt; t = tokens; //这里存在拷贝 &#125;std::list&lt; std::string&gt; tokens;std::list&lt; std::string&gt; t = std::move(tokens); //这里没有拷贝 如果不用std::move，拷贝的代价很大，性能较低。使用move几乎没有任何代价，只是转换了资源的所有权。他实际上将左值变成右值引用，然后应用移动语义，调用移动构造函数，就避免了拷贝，提高了程序性能。如果一个对象内部有较大的对内存或者动态数组时，很有必要写move语义的拷贝构造函数和赋值函数，避免无谓的深拷贝，以提高性能。事实上，C++11中所有的容器都实现了移动语义，方便我们做性能优化。 这里也要注意对move语义的误解，move实际上它并不能移动任何东西，它唯一的功能是将一个左值强制转换为一个右值引用。如果是一些基本类型比如int和char[10]定长数组等类型，使用move的话仍然会发生拷贝（因为没有对应的移动构造函数）。所以，move对于含资源（堆内存或句柄）的对象来说更有意义。第4行代码故事1template &lt;typename T&gt;void f(T&amp;&amp; val)&#123; foo(std::forward&lt;T&gt;(val)); &#125; C++11之前调用模板函数时，存在一个比较头疼的问题，如何正确的传递参数。比如：12345678910template &lt;typename T&gt;void forwardValue(T&amp; val)&#123; processValue(val); //右值参数会变成左值 &#125;template &lt;typename T&gt;void forwardValue(const T&amp; val)&#123; processValue(val); //参数都变成常量左值引用了 &#125;都不能按照参数的本来的类型进行转发。 C++11引入了完美转发：在函数模板中，完全依照模板的参数的类型（即保持参数的左值、右值特征），将参数传递给函数模板中调用的另外一个函数。C++11中的std::forward正是做这个事情的，他会按照参数的实际类型进行转发。看下面的例子：12345678910111213141516void processValue(int&amp; a)&#123; cout &lt;&lt; "lvalue" &lt;&lt; endl; &#125;void processValue(int&amp;&amp; a)&#123; cout &lt;&lt; "rvalue" &lt;&lt; endl; &#125;template &lt;typename T&gt;void forwardValue(T&amp;&amp; val)&#123; processValue(std::forward&lt;T&gt;(val)); //照参数本来的类型进行转发。&#125;void Testdelcl()&#123; int i = 0; forwardValue(i); //传入左值 forwardValue(0);//传入右值 &#125;输出：lvaue rvalue 右值引用T&amp;&amp;是一个universal references，可以接受左值或者右值，正是这个特性让他适合作为一个参数的路由，然后再通过std::forward按照参数的实际类型去匹配对应的重载函数，最终实现完美转发。 我们可以结合完美转发和移动语义来实现一个泛型的工厂函数，这个工厂函数可以创建所有类型的对象。具体实现如下：12345template&lt;typename… Args&gt;T* Instance(Args&amp;&amp;… args)&#123; return new T(std::forward&lt;Args &gt;(args)…);&#125; 这个工厂函数的参数是右值引用类型，内部使用std::forward按照参数的实际类型进行转发，如果参数的实际类型是右值，那么创建的时候会自动匹配移动构造，如果是左值则会匹配拷贝构造。总结 通过4行代码我们知道了什么是右值和右值引用，以及右值引用的一些特点，利用这些特点我们才方便实现移动语义和完美转发。C++11正是通过引入右值引用来优化性能，具体来说是通过移动语义来避免无谓拷贝的问题，通过move语义来将临时生成的左值中的资源无代价的转移到另外一个对象中去，通过完美转发来解决不能按照参数实际类型来转发的问题（同时，完美转发获得的一个好处是可以实现移动语义）。本文曾发表于《程序员》2015年1月刊。转载请注明出处。后记：本文的内容主要来自于我在公司内部培训的一次课程，因为很多人对C++11右值引用搞不清或者理解得不深入，所以我觉得有必要拿出来分享一下，让更多的人看到，就整理了一下发到程序员杂志了，我相信读者看完之后对右值引用会有全面深入的了解。一点梦想：尽自己一份力，让c++的世界变得更美好！]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[squid介绍及其简单配置]]></title>
    <url>%2Fposts%2F55e3d16d%2F</url>
    <content type="text"><![CDATA[squid的概念squid是一种用来缓存Internet数据的软件。接受来自人们需要下载的目标（object）的请求并适当的处理这些请求。也就是说，如果一个人想下载一web界面，他请求squid为他取得这个页面。squid随之连接到远程服务器并向这个页面发出请求。然后，squid显式地聚集数据到客户端机器，而且同时复制一份。当下一次有人需要同一页面时， squid可以简单的从磁盘中读到它，那样数据会立即传输到客户机上。下载地址squid-cache 官网 http://www.squid-cache.orgsquid介绍及其简单配置 https://www.cnblogs.com/cherishry/p/5706736.htmlCentOS 7安装squid代理服务器 https://blog.csdn.net/ithomer/article/details/78136993squid代理的作用通过缓存的方式为用户提供Web访问加速对用户的Web访问进行过滤控制工作流程当代理服务器中有客户端需要的数据时：a.客户端向代理服务器发送数据请求；b.代理服务器检查自己的数据缓存；c.代理服务器在缓存中找到了用户想要的数据，取出数据；d.代理服务器将从缓存中取得的数据返回给客户端。当代理服务器中没有客户端需要的数据时了：1.客户端向代理服务器发送数据请求；2.代理服务器检查自己的数据缓存；3.代理服务器在缓存中没有找到用户想要的数据；4.代理服务器向Internet 上的远端服务器发送数据请求；5.远端服务器响应，返回相应的数据；6.代理服务器取得远端服务器的数据，返回给客户端，并保留一份到自己的数据缓存中。Squid代理服务器工作在TCP/IP应用层Squid各种代理的定义正向代理标准的代理缓冲服务器一个标准的代理缓冲服务被用于缓存静态的网页到本地网络上的一台主机上（即代理服务器）。当被缓存的页面被第二次访问的时候，浏览器将直接从本地代理服务器那里获取请求数据而不再向原web站点请求数据。这样就节省了宝贵的网络带宽，而且提高了访问速度。但是，要想实现这种方式，必须在每一个内部主机的浏览器上明确指名代理服务器的IP地址和端口号。客户端上网时，每次都把请求发送给代理服务器处理,代理服务器根据请求确定是否连接到远程web服务器获取数据。如果在本地缓冲区有目标文件，则直接将文件传给用户即可。如果没有的话则先取回文件，先在本地保存一份缓冲，然后将文件发送给客户端浏览器。透明代理缓冲服务器透明代理缓冲服务器和标准代理服务器的功能完全相同。但是，代理操作对客户端的浏览器是透明的（即不需指明代理服务器的IP和端口）。透明代理服务器阻断网络通信，并且过滤出访问外部的HTTP（80端口）流量。如果客户端的请求在本地有缓冲则将缓冲的数据直接发给用户，如果在本地没有缓冲则向远程web服务器发出请求，其余操作和标准的代理服务器完全相同。对于linux操作系统来说，透明代理使用Iptables或者Ipchains实现。因此不需要对浏览器作任何设置，所以，透明代理对于ISP（Internet服务器提供商）特别有用。反向代理反向代理缓冲器反向代理是和前两种代理完全不同的一种代理服务。使用它可以降低原始WEB服务器的负载。反向代理服务器承担了对原始WEB服务器的静态页面的请求，防止原始服务器过载。它位于WEB服务器和Internet之间，处理所有对WEB服务器的请求，组织了WEB服务器和Internet的直接通信。如果互联网用户请求的页面在代理服务器上有缓冲的话，代理服务器直接将缓冲内容发送给用户。如果没有缓冲则先向WEB服务器发出请求，取回数据，本地缓存后再发给用户。这种方式通过降低了WEB服务器的请求数从而降低了WEB服务器的负载。正向代理与反向代理的区别概念正向代理：对于原始服务器而言，就是客户端的代言人反向代理：对于客户端而言，就像是原始服务器用途正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。安全性正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。Squid主要组成部分服务名：squid主程序：/usr/sbin/squid配置目录：/etc/squid主配置文件：/etc/squid/squid.conf监听tcp端口号：3128默认访问日志文件：/var/log/squid/access.logsquid常用配置选项/etc/squid/squid.conf123456789101112131415http_port 3128 (还可以只监听一个IP http_port 192.168.0.1:3128)cache_mem 64MB #缓存占内存大小maximum_object_size 4096KB #最大缓存块reply_body_max_size 1024000 allow all #限定下载文件大小access_log /var/log/squid/access.log #访问日志存放的地方visible_hostname proxy.test.xom #可见的主机名cache_dir ufs /var/spool/squid 100 16 256 #ufs:缓存数据的存储格式#/var/spool/squid 缓存目录#100：缓存目录占磁盘空间大小（M）#16：缓存空间一级子目录个数#256：缓存空间二级子目录个数cache_mgr webmaster@test.com #定义管理员邮箱http_access deny all #访问控制squid中的访问控制使用访问控制特性，可以控制在访问时根据特定的时间间隔进行缓存、访问特定站点或一组站点等等。squid访问控制有两个要素：ACL元素和访问列表。访问列表可以允许或拒绝某些用户对此服务的访问。ACL元素类型src：源地址（即客户机IP地址）dst：目标地址（即服务器IP地址）srcdomain：源名称（即客户机名称）dstdomain：目标名称（即服务器名称）time：一天中的时刻和一周内的一天url_regex：URL规则表达式匹配urlpath_regex：URL-path规则表达式匹配，略去协议和主机名proxy_auth：通过外部程序进行用户验证maxconn：单一IP的最大连接数ACL格式为了使用控制功能，必须先设置ACL规则并应用。ACL声明的格式如下： 注：acl_element_name 可以是任一个在ACL中定义的名称任何两个ACL元素不能用相同的名字每个ACL由列表值组成。当进行匹配检测的时候，多个值由逻辑或运算连接；换言之，即任一ACL元素的值被匹配，则这个ACL元素即被匹配。并不是所有ACL元素都能使用访问列表中的全部类型不同的ACL元素写在不同行中，squid将把他们组合在一个列表中访问条目我们可以使用许多不同的访问条目。下面是我们常用的几个：http_access:允许HTTP访问no_cache:定义对缓存请求的响应。访问列表的规则由一些类似’allow’或‘deny’的关键字构成，用以允许或拒绝向特定或一组ACL元素提供服务。一个访问列表可以由多条规则组成如果没有任何规则与访问请求匹配，默认动作将与列表中最后一条规则对应。一个访问条目中所有元素将用逻辑与运算连接http_access Action 声明1 AND 声明2 AND 声明 OR.http_access Action 声明3多个http_accesss声明间用或运算连接，但每个访问条目的元素间用与运算连接。列表中的规则总是遵循由上而下的顺序这些规则按照他们的排列顺序进行匹配检测，一旦检测到匹配的规则，匹配就立即结束。Squid.conf配置文件详解123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156#acl all src 0.0.0.0/0.0.0.0 and http_access allow all选项定义了一个访问控制列表。详细情况参见和Squid软件#携带的文档。这里的访问控制列表允许所有对代理服务的访问，因为这里该代理是加速web服务器。acl all src 0.0.0.0/0.0.0.0 #允许所有IP访问acl manager proto http #manager url协议为httpacl localhost src 127.0.0.1/255.255.255.255 #允午本机IPacl to_localhost dst 127.0.0.1 #允午目的地址为本机IPacl Safe_ports port 80 # 允许安全更新的端口为80acl CONNECT method CONNECT #请求方法以CONNECThttp_access allow all #允许所有人使用该代理.因为这里是代理加速web服务器http_reply_access allow all #允许所有客户端使用该代理acl OverConnLimit maxconn 16 #限制每个IP最大允许16个连接，防止攻击http_access deny OverConnLimiticp_access deny all #禁止从邻居服务器缓冲内发送和接收ICP请求.miss_access allow all #允许直接更新请求ident_lookup_access deny all #禁止lookup检查DNShttp_port 8080 transparent #指定Squid监听浏览器客户请求的端口号。hierarchy_stoplist cgi-bin ? #用来强制某些特定的对象不被缓存，主要是处于安全的目的。acl QUERY urlpath_regex cgi-bin \?cache deny QUERYcache_mem 1 GB #这是一个优化选项，增加该内存值有利于缓存。应该注意的是： #一般来说如果系统有内存，设置该值为(n/)3M。现在是3G 所以这里1Gfqdncache_size 1024 #FQDN 高速缓存大小maximum_object_size_in_memory 2 MB #允许最大的文件载入内存memory_replacement_policy heap LFUDA #动态使用最小的，移出内存cachecache_replacement_policy heap LFUDA #动态使用最小的，移出硬盘cachecache_dir ufs /home/cache 5000 32 512 #高速缓存目录 ufs 类型 使用的缓冲值最大允午1000MB空间，#32个一级目录，512个二级目录max_open_disk_fds 0 #允许最大打开文件数量,0 无限制minimum_object_size 1 KB #允午最小文件请求体大小maximum_object_size 20 MB #允午最大文件请求体大小cache_swap_low 90 #最小允许使用swap 90%cache_swap_high 95 #最多允许使用swap 95%ipcache_size 2048 # IP 地址高速缓存大小 2Mipcache_low 90 #最小允许ipcache使用swap 90%ipcache_high 95 #最大允许ipcache使用swap 90%access_log /var/log/squid/access.log squid #定义日志存放记录cache_log /var/log/squid/cache.log squidcache_store_log none #禁止store日志emulate_httpd_log on #将使Squid仿照Web服务器的格式创建访问记录。如果希望使用 #Web访问记录分析程序，就需要设置这个参数。refresh_pattern . 0 20% 4320 override-expire override-lastmod reload-into-ims ignore-reload #更新cache规则acl buggy_server url_regex ^http://.... http:// #只允许http的请求broken_posts allow buggy_serveracl apache rep_header Server ^Apache #允许apache的编码broken_vary_encoding allow apacherequest_entities off #禁止非http的标分准请求，防止攻击header_access header allow all #允许所有的http报头relaxed_header_parser on #不严格分析http报头.client_lifetime 120 minute #最大客户连接时间 120分钟cache_mgr sky@test.com #指定当缓冲出现问题时向缓冲管理者发送告警信息的地址信息。cache_effective_user squid #这里以用户squid的身份Squid服务器cache_effective_group squidicp_port 0 #指定Squid从邻居服务器缓冲内发送和接收ICP请求的端口号。 #这里设置为0是因为这里配置Squid为内部Web服务器的加速器， #所以不需要使用邻居服务器的缓冲。0是禁用# cache_peer 设置允许更新缓存的主机，因是本机所以127.0.0.1cache_peer 127.0.0.1 parent 80 0 no-query default multicast-responder no-netdb-exchangecache_peer_domain 127.0.0.1 hostname_aliases 127.0.0.1error_directory /usr/share/squid/errors/Simplify_Chinese #定义错误路径always_direct allow all # cache丢失或不存在是允许所有请求直接转发到原始服务器ignore_unknown_nameservers on #开反DNS查询，当域名地址不相同时候，禁止访问coredump_dir /var/log/squid #定义dump的目录max_filedesc 2048 #最大打开的文件描述half_closed_clients off #使Squid在当read不再返回数据时立即关闭客户端的连接。 #有时read不再返回数据是由于某些客户关闭TCP的发送数据 #而仍然保持接收数据。而Squid分辨不出TCP半关闭和完全关闭。buffered_logs on #若打开选项“buffered_logs”可以稍稍提高加速某些对日志文件的写入，该选项主要是实现优化特性。#防止天涯盗链，转嫁给百度acl tianya referer_regex -i tianyahttp_access deny tianyadeny_info tianya#阻止baidu蜘蛛acl baidu req_header User-Agent Baiduspiderhttp_access deny baidu#限制同一IP客户端的最大连接数acl OverConnLimit maxconn 128http_access deny OverConnLimit#防止被人利用为HTTP代理，设置允许访问的IP地址acl myip dst 222.18.63.37http_access deny !myip#允许本地管理acl Manager proto cache_objectacl Localhost src 127.0.0.1 222.18.63.37http_access allow Manager Localhostcachemgr_passwd 53034338 allhttp_access deny Manager#仅仅允许80端口的代理acl all src 0.0.0.0/0.0.0.0acl Safe_ports port 80 # httphttp_access deny !Safe_portshttp_access allow all#Squid信息设置visible_hostname happy.swjtu.edu.cncache_mgr ooopic2008@qq.com#基本设置cache_effective_user squidcache_effective_group squidtcp_recv_bufsize 65535 bytes#2.6的反向代理加速配置cache_peer 127.0.0.1 parent 80 0 no-query originserver#错误文档error_directory /usr/local/squid/share/errors/Simplify_Chinese#单台使用，不使用该功能icp_port 0hierarchy_stoplist cgi-bin ?acl QUERY urlpath_regex cgi-bin \? .php .cgi .avi .wmv .rm .ram .mpg .mpeg .zip .execache deny QUERYacl apache rep_header Server ^Apachebroken_vary_encoding allow apacherefresh_pattern ^ftp: 1440 20% 10080refresh_pattern ^gopher: 1440 0% 1440refresh_pattern . 0 20% 4320cache_store_log nonepid_filename /usr/local/squid/var/logs/squid.pidemulate_httpd_log onSquid常用命令初始化在squid.conf里配置的cache目录squid -z如果有错误提示，请检查cache目录的权限，可以更改目录权限chown -R squid:squid /cache目录对squid.conf排错，即验证squid.conf的语法和配置squid -k parse如果在squid.conf中有语法或配置错误，这里会返回提示，若无返回，尝试启动squid前台启动squid，并输出启动过程/usr/local/squid/sbin/squid -N -d1如果有ready to server reques相关信息，说明squid启动成功然后ctrl+c ,停止squid,并以后台运行的方式启动它启动squid在后台运行squid -s可以使用ps -ax | grep squid 来查看squid进程是否存在停止squidsquid -k shutdown重新引导修改过的squid.confsquid -k reconfigure -f /XXX/squid.conf当squid进行配置更改后，可以使用该命令进行squid配置重载把squid添加到系统启动项vim /etc/rc.local/usr/local/squid/sbin/squid -s修改cache缓存目录的权限chown -R squid.squid /cache目录cache缓存目录根据自己的配置更改，squid用户和组是squid，squid修改squid日志目录的权限chown -R squid.squid 定义的日志文件所在目录这一步并不是适合每一个使用squid的用户，意为让squid有权限在该目录里进行写操作查看你的日志文档more /usr/local/squid/var/logs/access.log | grep TCP_MEM_HIT该指令可以看到在squid运行过程中，有那些文件被squid缓存到内存中，并返回给访问用户。more /usr/local/squid/var/logs/access.log | grep TCP_HIT该指令可以看到在squid运行过程中，有那些文件被squid缓存到cache目录中，并返回给访问用户。more /usr/local/squid/var/logs/access.log | grep TCP_MISS该指令可以看到在squid运行过程中，有那些文件没有被squid缓存，而是从原始服务器获取并返回给访问用户。Squid命中率分析12/usr/local/squid/bin/squidclient -p 80 mgr:info/usr/local/squid/bin/squidclient -p 80 mgr:5min可以看到详细的性能情况,其中PORT是你的proxy的端口，5min可以是60min取得squid运行状态信息：1squidclient -p 80 mgr:info取得squid内存使用情况：1squidclient -p 80 mgr:mem取得squid已经缓存的列表：1squidclient -p 80 mgr:bjects. use it carefully,it may crash取得squid的磁盘使用情况：1squidclient -p 80 mgr:diskd强制更新某个url：1squidclient -p 80 -m PURGE http://www.xxx.com/xxx.php更多的请查看：squidclient-h 或者 squidclient -p 80 mgr:查命中率：1squidclient -h IP(具体侦听IP) -p 80(具体侦听端口) mgr:info定期清理swap.state内无效数据123/path/to/squid/sbin/squid -k rotate -f /path/to/squid/conf_filevi /etc/crontab0 0 * * * root /usr/local/sbin/squid -k rotate -f /usr/local/etc/squid/squid1.conf当squid应用运行了一段时间之后，cache_dir对应的swap.state文件就会变得越来越大，里面的无效接口数据越来越多，这可能影响squid的响应时间，因此需要使用squid清理swap.state里面的无效数据，减少swap.state的大小。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>squid</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网：用 VPS 搭建 shadowsocks 服务器]]></title>
    <url>%2Fposts%2Fa067636e%2F</url>
    <content type="text"><![CDATA[shadowsocks 简介shadowsocks 是一款自定义协议的代理软件，由于其流量特征不明显，（直到不久前）一直可以稳定提供上网代理。shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。购买 VPS 服务器主流的 VPS（虚拟主机）服务器提供商有三家：linodedigital oceanbandwagon下面的比上面的便宜。如果只是自用，bandwagon 足够。一般使用 paypal 绑定一个 visa 或 mastercard 信用卡来付款。注意要用国际 paypal 帐号，国内的是不能用外币付款的。在 bandwagon 购买 VPS 以后会获得一个主机地址和用于 ssh 登录的 root 密码。远程登陆 VPSMac或 Linux 下直接在终端中ssh root@your_vps_ip your_ssh_port即可。在 windows 系统下需要专门的客户端来 SSH 登录 VPS。在&nbsp;xShell 官网&nbsp;&nbsp;下载 xShell。家庭和学校用户可以免费试用，下载时选择 home&nbsp;and&nbsp;school&nbsp;use 即可。需要用邮箱注册一下，下载链接会发送到邮箱中。xShell 中新建一个连接，会要求输入目标 IP 地址和端口，以及 root 密码，按提示操作即可。安装 shadowsocks最好是centos71.安装pip由于安装的是python 版本的 shadowsocks，所以首先安装pip$ curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot; $ python get-pip.py 2.安装shadowsocks$ pip install --upgrade pip $ pip install shadowsocks 3.创建配置文件创建文件所在目录:/etc 创建文件命令$ vi /etc/shadowsocks.json 若进入了etc目录$ vi shadowsocks.json 配置文件内容：单端口：1234567891011121314151617&#123; "server":"0.0.0.0", --服务器IP，直接用0.0.0.0也可 "server_port":8888, --端口端口 "local_address": "127.0.0.1", --本地地址，可省略 "local_port":1080,--本地端口，可省略 "password":"password",--密码 "timeout":300, --超时时间，可省略 "method":"aes-256-cfb", --加密策略，有多重策略，具体自查&#125;多端口：12345678910111213141516171819202122232425&#123; "server":"0.0.0.0", "local_address":"127.0.0.1", "local_port":1080, "port_password":&#123;--每个端口对应一个密码 "1111":"password1", "1112":"password2", "1113":"password3" &#125;, "timeout":300, "method":"aes-256-cfb", "fast_open":false&#125;4.启动shadowsocks启动ssserver -c /etc/shadowsocks.json -d start 停止ssserver -c /etc/shadowsocks.json -d stop 重启ssserver -c /etc/shadowsocks.json -d restart 启动成功即可通过ss客户端使用。在window端可以在控制台通过以下命令查看端口是否打开telnet {ip} {port} 5.配置自启动新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下： [Unit]Description=Shadowsocks [Service]TimeoutStartSec=0 ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json [Install]WantedBy=multi-user.target 通过以下命令注册，启动服务$ systemctl enable shadowsocks $ systemctl start shadowsocks 启动后可以查看服务状态$ systemctl status shadowsocks -l 若启动成功：● shadowsocks.service - ShadowsocksLoaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)Active: active (running) since Sun 2017-08-13 18:03:41 CST; 1h 29min agoMain PID: 9567 (ssserver)CGroup: /system.slice/shadowsocks.service└─9567 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json如果，服务失败，重启服务器试一下安装并启动 shadowsocks 客户端shadowsocks 支持 windows、Mac&nbsp;OS&nbsp;X、Linux、Android、iOS 等多个平台。不过 iOS 由于系统对应用后台运行的限制，推荐使用客户端内嵌的浏览器科学上网，给其他应用代理时需要每过几分钟重新启动一下 app。shadowsocks 项目 Github 主页在这里。里面可以找到客户端下载地址。下载安装客户端以后，只需按服务器的配置填写 IP 地址、服务器端口、本地端口（如果没有本地端口选项，就是默认的 1080）、密码、加密方式等参数，启动就可以了。客户端支持全局代理和 PAC 代理两种方式，后者会使用一个脚本来自动检查一个网站是否在需要代理的网站列表中，自动选择直接连接或代理连接。PAC 列表可以在线更新，但是难免有收录不全的情况。这时可以选择关闭 shadowsocks 代理（实际上是取消对系统代理的配置，shadowsocks 客户端仍然保持工作），然后使用支持自定义规则的代理管理插件来实现自动切换代理，比如 switchyOmega。使用 switchyOmega 实现自动切换代理switchyOmega 是 chrome 浏览器上一个很好用的代理管理插件。它的前身 switchySharp 更有名。 chrome 应用商店本身需要翻墙才能访问，因此需要先在 shadowsocks 启动代理模式下下载安装，再关闭 shadowsocks 代理。 安装完毕后，右击 switchyOmega 图标，选择选项，进入 switchOmega 配置界面。 创建 shadowsocks 情景模式新建一个情景模式，比如叫 SS，代理协议选择 socks5，代理地址为 127.0.0.1，端口 1080。 现在切换到 SS 情景模式就可以通过 shadowsocks 科学上网了。后面获取自动切换规则列表 设置自动切换模式在设置界面选择自动切换模式，在 “切换规则” 中勾选“规则列表规则”，对应的情景模式选择刚刚新建的 SS。然后在下面的规则列表地址中填写https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt规则列表格式选择 AutoProxy。然后点击立即更新情景模式， 更新完成后会有提示。点击左侧的 “应用选项”。然后单击 switchyOmega 图标，选择自动切换，就可以在访问“不存在的网站” 时自动切换到 shadowsocks 代理了。添加自定义规则如果遇到某个国外网站无法直接连接或速度太慢时，可以单击 switchyOmega 图标，选择 “添加条件”，情景模式选择 SS，就可以了。这时打开 switchyOmega 选项，在自动切换模式的切换规则中就可以看到刚刚添加的规则。可以在这里管理自定义的规则。导入和导出 switchyOmega 设置如果换了一台电脑，重新设置一遍 switchyOmega 就太麻烦了。可以在设置好的 switchyOmega 中导出设置文件，在另一个 chrome 浏览器中导入，就可以直接复制原来的设置了。在 switchyOmega 选项的左侧点击 “导入 / 导出”，点击“生成备份文件” 即可生成 switchyOmega 设置备份。点击 “从备份文件恢复” 可以导入备份文件。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VPS</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tag Plugins]]></title>
    <url>%2Fposts%2Fe2e5eeac%2F</url>
    <content type="text"><![CDATA[FAQWelcome to tag-pluginsTag Plugin is a way to make special style contents supported by Hexo. For example, we cannot show a image with custom size in standard Markdown. And then we can use tag plugins to solve it. Hexo has a lot of tags which can help user. And Hexo also have interfaces to themes which make themes able to create their own tags. Following tags is provided by NexT:Centered QuoteInclude RawButtonFull ImageGroup PicturesLabelMermaidNotePDFTabsVideoCentered QuoteThis tag will make a quote with two lines before and after it, and text quoted will be centered. When using centered quote, if we have multi-line text, and each line has a different length, the quote won’t be symmetrical, so it’s recommended to use when only have single line text. For example before article all after article to make a summary.Usagecenter-quote.js123&#123;% centerquote %&#125;Something&#123;% endcenterquote %&#125;&lt;!-- Tag Alias --&gt;&#123;% cq %&#125;Something&#123;% endcq %&#125;Example1&#123;% cq %&#125;Elegant in code, simple in core&#123;% endcq %&#125;Elegant in code, simple in coreInclude RawThis tag include any raw content into your posts. Path is relative to your site source directory.Usageinclude-raw.js1&#123;% include_raw '_data/path/to/file.html' %&#125;ExampleLet’s create include-raw.html file in _data directory under site root directory with following content:1Any &lt;strong&gt;raw content&lt;/strong&gt; may be included with this tag.Then in any post we can use this content with include_raw tag:1&#123;% include_raw '_data/path/to/include-raw.html' %&#125;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《辐射4》二次元萌妹MOD]]></title>
    <url>%2Fposts%2F8c023e79%2F</url>
    <content type="text"><![CDATA[《辐射4》二次元萌妹MOD补丁类型：游戏MOD整理时间：2019-05-05大小：18.73MB补丁制作：hiyokomod补丁语言：多国版本：v1.0download由N网作者“hiyokomod”制作的一款人物外观替换美化mod“二次元萌妹MOD”，将游戏中将游戏中多位女性NPC外观修改为二次元美少女，非常精致的面部建模和可修改项，带给每一个老冰棍！喜欢这些萌妹子就来3DM下载体验吧！截图注意事项需要下载“LooksMenu捏脸菜单==&gt;点我下载”。使用说明NMM自动安装方法：点我下载NMM1、添加压缩包到NMM(列表中出现)； 2、双击列表安装； 3、进入游戏即可。 **手动安装方法(不推荐)：** 1、解压缩； 2、将data文件夹复制到游戏根目录； 3、用MOD管理器加载ESP； 4、进入游戏中即可。 演示视频分流百度网盘(提取码：br93)本地电信网通高速下载电信下载联通下载]]></content>
      <categories>
        <category>Mod</category>
      </categories>
      <tags>
        <tag>Games</tag>
        <tag>Pc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给hexo博客next主题添加背景音乐]]></title>
    <url>%2Fposts%2F96f89d1%2F</url>
    <content type="text"><![CDATA[请访问我的个人博客 sourcod我的hexo博客使用的是next主题所有次教程在next主题上修改。修改 themes/next/layout/_macro/sidebar.swig 文件添加音乐播放器内容在 themes/next/_config.yml 配置文件中添加歌单地址配置background_music: //music.163.com/outchain/player?type=0&amp;amp;id=2120628564&amp;amp;auto=1&amp;amp;height=66注册网易云音乐自己研究创建歌单自己研究给歌单添加自己喜欢的音乐看你自己了分享歌单不会获取外链的请上度娘: 怎么把自己的歌单做成外链获取外链播放器把地址copy出来height=90改成 66这样以后只需要修改网易云音乐的歌单，博客的背景音乐就会自动修改了。如果出现音乐不自动播放，那是资源的问题，自己上网易云音乐生成外链的页面看看会不会自动播放。把坏资源删除就OK了。修改完我的博客的效果]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[问道]]></title>
    <url>%2Fposts%2Fa3b6fe04%2F</url>
    <content type="text"><![CDATA[游戏背景介绍鸿蒙开化之初，中州大陆昆仑之颠的鸿钧上人创立道教，并收徒三人，各授以道门绝技，三徒皆修成混元大罗金仙万劫不坏之体，分别发展出道教的人道、阐教和截教三个分支。此三徒正是人道教主太上老君、阐教教主元始天尊和截教的通天教主。三教主秉承师父鸿钧上人教诲，广收门徒将道教流传于世。只因入道门中即可修仙，使人跳出三界之外，不在五行之中，免除生死轮回之苦，使得入道修行之人多不胜数。但修仙之道并非苦心修炼便可达成，修行路上，均要经历三百年一小劫，一千五百年一大劫的劫数。修行之人均无法避开劫数，只能根据自身道行的深浅去经历劫数。值商周两朝交替之时，恰逢修仙一千五百年仙劫，于是三教主共议封神榜，以观众仙根行浅深。然劫数难逃，封神一役，致使道门内部阐教和截教不和，修仙众人俱遭屠戮，更引来西方教派参与纷争，后因鸿钧上人亲自出面调停，终得以平息。通天教主被鸿钧上人禁制在紫霄宫昆仑之颠修行思过。时光如梭，转眼已过千年，师尊鸿钧上人外出云游，不知所踪。而通天仿佛已经习惯了这种被禁固的生活，除了每日的必做的修真炼气和静诵《黄庭》，他更多的时间总是在断崖边静静坐着。也许只有这个时刻，他才能真真实实地感觉到自己的存在，千年的苦行使他的修为倍增，同时也让他饱受了孤单和寂寞，他已经很久没有说过一句话了，很久是多久，他自己也不知道，他只知道他在等，他们都在等。.空旷的断崖边，一个人影伫立，良久，一动不动。山风劲袭，人犹如与山浑然一体，仍是一动不动，坚毅的面容毫无表情，只有明亮的双眸在黑夜印衬下寒光闪现，眺望着远方。远处，骷髅山顶，一块顽石好象动了一动，又动了一动，仿佛有了呼吸。慢慢地，顽石周围竟然忽隐忽现出着玄黄色的光芒，最终幻化为一个人形的光团，缓缓飘向山后的幽冥涧。此时，人影的苍白面容上浮现出奇怪的笑意，令人不寒而栗，他是通天。五百年后的中洲大陆。在东海渔村，世世代代以捕鱼为生的渔民有一天突然发现离他们村子不远的海面上，竟然出现一个异常美丽的仙岛。在天墉城，熙熙攘攘地街道上突然多了一些身着奇装奇服，行为举止十分可疑之人。在揽仙镇，一个平凡冷清的小镇上突然间热闹了起来，从四面八方赶来的俊男美女络绎不绝。本来平静的《问道》世界中出现各种异象和征兆，而此时，准备一探究竟的玩家，正赶往揽仙镇的途中。 [1]截图下载客户端下载登录器下载目前只提供1.60.0905版本客户端百度云下载链接🔗百度云密码(kq7m)与版本对应的登录器，服务器为公益服，不做任何盈利和不具备商业性质！链接：https://pan.baidu.com/s/1RN4VX3bOwH61xC70t82dMw提取码：**复制这段内容后打开百度网盘手机App，操作更方便哦更多资讯: Deployment]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>online</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F4a17b156%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deploy更多资讯: Deployment]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
</search>
