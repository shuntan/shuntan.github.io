<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从4行代码看右值引用]]></title>
    <url>%2Fposts%2F9d2f4ec8%2F</url>
    <content type="text"><![CDATA[概述 右值引用的概念有些读者可能会感到陌生，其实他和C++98/03中的左值引用有些类似，例如，c++98/03中的左值引用是这样的：12int i = 0;int&amp; j = i; 这里的int&amp;是对左值进行绑定（但是int&amp;却不能绑定右值），相应的，对右值进行绑定的引用就是右值引用，他的语法是这样的A&amp;&amp;，通过双引号来表示绑定类型为A的右值。通过&amp;&amp;我们就可以很方便的绑定右值了，比如我们可以这样绑定一个右值： 1int&amp;&amp; i = 0; 这里我们绑定了一个右值0，关于右值的概念会在后面介绍。右值引用是C++11中新增加的一个很重要的特性，他主是要用来解决C++98/03中遇到的两个问题，第一个问题就是临时对象非必要的昂贵的拷贝操作，第二个问题是在模板函数中如何按照参数的实际类型进行转发。通过引入右值引用，很好的解决了这两个问题，改进了程序性能，后面将会详细介绍右值引用是如何解决这两个问题的。 和右值引用相关的概念比较多，比如：右值、纯右值、将亡值、universal references、引用折叠、移动语义、move语义和完美转发等等。很多都是新概念，对于刚学习C++11右值引用的初学者来说，可能会觉得右值引用过于复杂，概念之间的关系难以理清。右值引用实际上并没有那么复杂，其实是关于4行代码的故事，通过简单的4行代码我们就能清晰的理解右值引用相关的概念了。本文希望带领读者通过4行代码来理解右值引用相关的概念，理清他们之间的关系，并最终能透彻地掌握C++11的新特性–右值引用。四行代码的故事第1行代码的故事1int i = getVar(); 上面的这行代码很简单，从getVar()函数获取一个整形值，然而，这行代码会产生几种类型的值呢？答案是会产生两种类型的值，一种是左值i，一种是函数getVar()返回的临时值，这个临时值在表达式结束后就销毁了，而左值i在表达式结束后仍然存在，这个临时值就是右值，具体来说是一个纯右值，右值是不具名的。区分左值和右值的一个简单办法是：看能不能对表达式取地址，如果能，则为左值，否则为右值。 所有的具名变量或对象都是左值，而匿名变量则是右值，比如，简单的赋值语句：1int i = 0; 在这条语句中，i 是左值，0 是字面量，就是右值。在上面的代码中，i 可以被引用，0 就不可以了。具体来说上面的表达式中等号右边的0是纯右值（prvalue），在C++11中所有的值必属于左值、将亡值、纯右值三者之一。比如，非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和lambda表达式等都是纯右值。而将亡值是C++11新增的、与右值引用相关的表达式，比如，将要被移动的对象、T&amp;&amp;函数返回值、std::move返回值和转换为T&amp;&amp;的类型的转换函数的返回值等。关于将亡值我们会在后面介绍，先看下面的代码：123int j = 5;auto f = []&#123;return 5;&#125;; 上面的代码中5是一个原始字面量， []{return 5;}是一个lambda表达式，都是属于纯右值，他们的特点是在表达式结束之后就销毁了。 通过地行代码我们对右值有了一个初步的认识，知道了什么是右值，接下来再来看看第二行代码。第2行代码的故事1T&amp;&amp; k = getVar(); 第二行代码和第一行代码很像，只是相比第一行代码多了“&amp;&amp;”，他就是右值引用，我们知道左值引用是对左值的引用，那么，对应的，对右值的引用就是右值引用，而且右值是匿名变量，我们也只能通过引用的方式来获取右值。虽然第二行代码和第一行代码看起来差别不大，但是实际上语义的差别很大，这里，getVar()产生的临时值不会像第一行代码那样，在表达式结束之后就销毁了，而是会被“续命”，他的生命周期将会通过右值引用得以延续，和变量k的声明周期一样长。右值引用的第一个特点 通过右值引用的声明，右值又“重获新生”，其生命周期与右值引用类型变量的生命周期一样长，只要该变量还活着，该右值临时量将会一直存活下去。让我们通过一个简单的例子来看看右值的生命周期。如代码清单1-1所示。代码清单1-112345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std;int g_constructCount=0;int g_copyConstructCount=0;int g_destructCount=0;struct A&#123; A()&#123; cout&lt;&lt;&quot;construct: &quot;&lt;&lt;++g_constructCount&lt;&lt;endl; &#125; A(const A&amp; a) &#123; cout&lt;&lt;&quot;copy construct: &quot;&lt;&lt;++g_copyConstructCount &lt;&lt;endl; &#125; ~A() &#123; cout&lt;&lt;&quot;destruct: &quot;&lt;&lt;++g_destructCount&lt;&lt;endl; &#125;&#125;;A GetA()&#123; return A();&#125;int main() &#123; A a = GetA(); return 0;&#125; 为了清楚的观察临时值，在编译时设置编译选项-fno-elide-constructors用来关闭返回值优化效果。 输出结果：123456construct: 1copy construct: 1destruct: 1copy construct: 2destruct: 2destruct: 3 从上面的例子中可以看到，在没有返回值优化的情况下，拷贝构造函数调用了两次，一次是GetA()函数内部创建的对象返回出来构造一个临时对象产生的，另一次是在main函数中构造a对象产生的。第二次的destruct是因为临时对象在构造a对象之后就销毁了。如果开启返回值优化的话，输出结果将是：construct: 1destruct: 1 可以看到返回值优化将会把临时对象优化掉，但这不是c++标准，是各编译器的优化规则。我们在回到之前提到的可以通过右值引用来延长临时右值的生命周期，如果上面的代码中我们通过右值引用来绑定函数返回值的话，结果又会是什么样的呢？在编译时设置编译选项-fno-elide-constructors。123456789int main() &#123; A&amp;&amp; a = GetA(); return 0;&#125;输出结果：construct: 1copy construct: 1destruct: 1destruct: 2 通过右值引用，比之前少了一次拷贝构造和一次析构，原因在于右值引用绑定了右值，让临时右值的生命周期延长了。我们可以利用这个特点做一些性能优化，即避免临时对象的拷贝构造和析构，事实上，在c++98/03中，通过常量左值引用也经常用来做性能优化。上面的代码改成： const A&amp; a = GetA(); 输出的结果和右值引用一样，因为常量左值引用是一个“万能”的引用类型，可以接受左值、右值、常量左值和常量右值。需要注意的是普通的左值引用不能接受右值，比如这样的写法是不对的： A&amp; a = GetA(); 上面的代码会报一个编译错误，因为非常量左值引用只能接受左值。右值引用的第二个特点 右值引用独立于左值和右值。意思是右值引用类型的变量可能是左值也可能是右值。比如下面的例子：1int&amp;&amp; var1 = 1; var1类型为右值引用，但var1本身是左值，因为具名变量都是左值。 关于右值引用一个有意思的问题是：T&amp;&amp;是什么，一定是右值吗？让我们来看看下面的例子：12345template&lt;typename T&gt;void f(T&amp;&amp; t)&#123;&#125;f(10); //t是右值int x = 10;f(x); //t是左值 从上面的代码中可以看到，T&amp;&amp;表示的值类型不确定，可能是左值又可能是右值，这一点看起来有点奇怪，这就是右值引用的一个特点。右值引用的第三个特点 T&amp;&amp; t在发生自动类型推断的时候，它是未定的引用类型（universal references），如果被一个左值初始化，它就是一个左值；如果它被一个右值初始化，它就是一个右值，它是左值还是右值取决于它的初始化。我们再回过头看上面的代码，对于函数templatevoid f(T&amp;&amp; t)，当参数为右值10的时候，根据universal references的特点，t被一个右值初始化，那么t就是右值；当参数为左值x时，t被一个左值引用初始化，那么t就是一个左值。需要注意的是，仅仅是当发生自动类型推导（如函数模板的类型自动推导，或auto关键字）的时候，T&amp;&amp;才是universal references。再看看下面的例子：1234567template&lt;typename T&gt;void f(T&amp;&amp; param); template&lt;typename T&gt;class Test &#123; Test(Test&amp;&amp; rhs); &#125;; 上面的例子中，param是universal reference，rhs是Test&amp;&amp;右值引用，因为模版函数f发生了类型推断，而Test&amp;&amp;并没有发生类型推导，因为Test&amp;&amp;是确定的类型了。 正是因为右值引用可能是左值也可能是右值，依赖于初始化，并不是一下子就确定的特点，我们可以利用这一点做很多文章，比如后面要介绍的移动语义和完美转发。 这里再提一下引用折叠，正是因为引入了右值引用，所以可能存在左值引用与右值引用和右值引用与右值引用的折叠，C++11确定了引用折叠的规则，规则是这样的：所有的右值引用叠加到右值引用上仍然还是一个右值引用；所有的其他引用类型之间的叠加都将变成左值引用。第3行代码的故事1T(T&amp;&amp; a) : m_val(val)&#123; a.m_val=nullptr; &#125; 这行代码实际上来自于一个类的构造函数，构造函数的一个参数是一个右值引用，为什么将右值引用作为构造函数的参数呢？在解答这个问题之前我们先看一个例子。如代码清单1-2所示。代码清单1-21234567891011121314151617181920class A&#123;public: A():m_ptr(new int(0))&#123;cout &lt;&lt; &quot;construct&quot; &lt;&lt; endl;&#125; A(const A&amp; a):m_ptr(new int(*a.m_ptr)) //深拷贝的拷贝构造函数 &#123; cout &lt;&lt; &quot;copy construct&quot; &lt;&lt; endl; &#125; ~A()&#123; delete m_ptr;&#125;private: int* m_ptr;&#125;;int main() &#123; A a = GetA(); return 0;&#125; 输出：constructcopy constructcopy construct 这个例子很简单，一个带有堆内存的类，必须提供一个深拷贝拷贝构造函数，因为默认的拷贝构造函数是浅拷贝，会发生“指针悬挂”的问题。如果不提供深拷贝的拷贝构造函数，上面的测试代码将会发生错误（编译选项-fno-elide-constructors），内部的m_ptr将会被删除两次，一次是临时右值析构的时候删除一次，第二次外面构造的a对象释放时删除一次，而这两个对象的m_ptr是同一个指针，这就是所谓的指针悬挂问题。提供深拷贝的拷贝构造函数虽然可以保证正确，但是在有些时候会造成额外的性能损耗，因为有时候这种深拷贝是不必要的。比如下面的代码： 上面代码中的GetA函数会返回临时变量，然后通过这个临时变量拷贝构造了一个新的对象a，临时变量在拷贝构造完成之后就销毁了，如果堆内存很大的话，那么，这个拷贝构造的代价会很大，带来了额外的性能损失。每次都会产生临时变量并造成额外的性能损失，有没有办法避免临时变量造成的性能损失呢？答案是肯定的，C++11已经有了解决方法，看看下面的代码。如代码清单1-3所示。代码清单1-3123456789101112131415161718192021222324class A&#123;public: A() :m_ptr(new int(0))&#123;&#125; A(const A&amp; a):m_ptr(new int(*a.m_ptr)) //深拷贝的拷贝构造函数 &#123; cout &lt;&lt; &quot;copy construct&quot; &lt;&lt; endl; &#125; A(A&amp;&amp; a) :m_ptr(a.m_ptr) &#123; a.m_ptr = nullptr; cout &lt;&lt; &quot;move construct&quot; &lt;&lt; endl; &#125; ~A()&#123; delete m_ptr;&#125;private: int* m_ptr;&#125;;int main()&#123; A a = Get(false); &#125; 输出：constructmove constructmove construct 代码清单1-3和1-2相比只多了一个构造函数，输出结果表明，并没有调用拷贝构造函数，只调用了move construct函数，让我们来看看这个move construct函数：12345A(A&amp;&amp; a) :m_ptr(a.m_ptr)&#123; a.m_ptr = nullptr; cout &lt;&lt; &quot;move construct&quot; &lt;&lt; endl;&#125; 这个构造函数并没有做深拷贝，仅仅是将指针的所有者转移到了另外一个对象，同时，将参数对象a的指针置为空，这里仅仅是做了浅拷贝，因此，这个构造函数避免了临时变量的深拷贝问题。 上面这个函数其实就是移动构造函数，他的参数是一个右值引用类型，这里的A&amp;&amp;表示右值，为什么？前面已经提到，这里没有发生类型推断，是确定的右值引用类型。为什么会匹配到这个构造函数？因为这个构造函数只能接受右值参数，而函数返回值是右值，所以就会匹配到这个构造函数。这里的A&amp;&amp;可以看作是临时值的标识，对于临时值我们仅仅需要做浅拷贝即可，无需再做深拷贝，从而解决了前面提到的临时变量拷贝构造产生的性能损失的问题。这就是所谓的移动语义，右值引用的一个重要作用是用来支持移动语义的。 需要注意的一个细节是，我们提供移动构造函数的同时也会提供一个拷贝构造函数，以防止移动不成功的时候还能拷贝构造，使我们的代码更安全。 我们知道移动语义是通过右值引用来匹配临时值的，那么，普通的左值是否也能借助移动语义来优化性能呢，那该怎么做呢？事实上C++11为了解决这个问题，提供了std::move方法来将左值转换为右值，从而方便应用移动语义。move是将对象资源的所有权从一个对象转移到另一个对象，只是转移，没有内存的拷贝，这就是所谓的move语义。如图1-1所示是深拷贝和move的区别。图1-1 深拷贝和move的区别 再看看下面的例子：1234567&#123; std::list&lt; std::string&gt; tokens; //省略初始化... std::list&lt; std::string&gt; t = tokens; //这里存在拷贝 &#125;std::list&lt; std::string&gt; tokens;std::list&lt; std::string&gt; t = std::move(tokens); //这里没有拷贝 如果不用std::move，拷贝的代价很大，性能较低。使用move几乎没有任何代价，只是转换了资源的所有权。他实际上将左值变成右值引用，然后应用移动语义，调用移动构造函数，就避免了拷贝，提高了程序性能。如果一个对象内部有较大的对内存或者动态数组时，很有必要写move语义的拷贝构造函数和赋值函数，避免无谓的深拷贝，以提高性能。事实上，C++11中所有的容器都实现了移动语义，方便我们做性能优化。 这里也要注意对move语义的误解，move实际上它并不能移动任何东西，它唯一的功能是将一个左值强制转换为一个右值引用。如果是一些基本类型比如int和char[10]定长数组等类型，使用move的话仍然会发生拷贝（因为没有对应的移动构造函数）。所以，move对于含资源（堆内存或句柄）的对象来说更有意义。第4行代码故事1template &lt;typename T&gt;void f(T&amp;&amp; val)&#123; foo(std::forward&lt;T&gt;(val)); &#125; C++11之前调用模板函数时，存在一个比较头疼的问题，如何正确的传递参数。比如：12345678910template &lt;typename T&gt;void forwardValue(T&amp; val)&#123; processValue(val); //右值参数会变成左值 &#125;template &lt;typename T&gt;void forwardValue(const T&amp; val)&#123; processValue(val); //参数都变成常量左值引用了 &#125;都不能按照参数的本来的类型进行转发。 C++11引入了完美转发：在函数模板中，完全依照模板的参数的类型（即保持参数的左值、右值特征），将参数传递给函数模板中调用的另外一个函数。C++11中的std::forward正是做这个事情的，他会按照参数的实际类型进行转发。看下面的例子：12345678910111213141516void processValue(int&amp; a)&#123; cout &lt;&lt; &quot;lvalue&quot; &lt;&lt; endl; &#125;void processValue(int&amp;&amp; a)&#123; cout &lt;&lt; &quot;rvalue&quot; &lt;&lt; endl; &#125;template &lt;typename T&gt;void forwardValue(T&amp;&amp; val)&#123; processValue(std::forward&lt;T&gt;(val)); //照参数本来的类型进行转发。&#125;void Testdelcl()&#123; int i = 0; forwardValue(i); //传入左值 forwardValue(0);//传入右值 &#125;输出：lvaue rvalue 右值引用T&amp;&amp;是一个universal references，可以接受左值或者右值，正是这个特性让他适合作为一个参数的路由，然后再通过std::forward按照参数的实际类型去匹配对应的重载函数，最终实现完美转发。 我们可以结合完美转发和移动语义来实现一个泛型的工厂函数，这个工厂函数可以创建所有类型的对象。具体实现如下：12345template&lt;typename… Args&gt;T* Instance(Args&amp;&amp;… args)&#123; return new T(std::forward&lt;Args &gt;(args)…);&#125; 这个工厂函数的参数是右值引用类型，内部使用std::forward按照参数的实际类型进行转发，如果参数的实际类型是右值，那么创建的时候会自动匹配移动构造，如果是左值则会匹配拷贝构造。总结 通过4行代码我们知道了什么是右值和右值引用，以及右值引用的一些特点，利用这些特点我们才方便实现移动语义和完美转发。C++11正是通过引入右值引用来优化性能，具体来说是通过移动语义来避免无谓拷贝的问题，通过move语义来将临时生成的左值中的资源无代价的转移到另外一个对象中去，通过完美转发来解决不能按照参数实际类型来转发的问题（同时，完美转发获得的一个好处是可以实现移动语义）。本文曾发表于《程序员》2015年1月刊。转载请注明出处。后记：本文的内容主要来自于我在公司内部培训的一次课程，因为很多人对C++11右值引用搞不清或者理解得不深入，所以我觉得有必要拿出来分享一下，让更多的人看到，就整理了一下发到程序员杂志了，我相信读者看完之后对右值引用会有全面深入的了解。一点梦想：尽自己一份力，让c++的世界变得更美好！]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[squid介绍及其简单配置]]></title>
    <url>%2Fposts%2F55e3d16d%2F</url>
    <content type="text"><![CDATA[squid的概念squid是一种用来缓存Internet数据的软件。接受来自人们需要下载的目标（object）的请求并适当的处理这些请求。也就是说，如果一个人想下载一web界面，他请求squid为他取得这个页面。squid随之连接到远程服务器并向这个页面发出请求。然后，squid显式地聚集数据到客户端机器，而且同时复制一份。当下一次有人需要同一页面时， squid可以简单的从磁盘中读到它，那样数据会立即传输到客户机上。下载地址squid-cache 官网 http://www.squid-cache.orgsquid介绍及其简单配置 https://www.cnblogs.com/cherishry/p/5706736.htmlCentOS 7安装squid代理服务器 https://blog.csdn.net/ithomer/article/details/78136993squid代理的作用通过缓存的方式为用户提供Web访问加速对用户的Web访问进行过滤控制工作流程当代理服务器中有客户端需要的数据时：a.客户端向代理服务器发送数据请求；b.代理服务器检查自己的数据缓存；c.代理服务器在缓存中找到了用户想要的数据，取出数据；d.代理服务器将从缓存中取得的数据返回给客户端。当代理服务器中没有客户端需要的数据时了：1.客户端向代理服务器发送数据请求；2.代理服务器检查自己的数据缓存；3.代理服务器在缓存中没有找到用户想要的数据；4.代理服务器向Internet 上的远端服务器发送数据请求；5.远端服务器响应，返回相应的数据；6.代理服务器取得远端服务器的数据，返回给客户端，并保留一份到自己的数据缓存中。Squid代理服务器工作在TCP/IP应用层Squid各种代理的定义正向代理标准的代理缓冲服务器一个标准的代理缓冲服务被用于缓存静态的网页到本地网络上的一台主机上（即代理服务器）。当被缓存的页面被第二次访问的时候，浏览器将直接从本地代理服务器那里获取请求数据而不再向原web站点请求数据。这样就节省了宝贵的网络带宽，而且提高了访问速度。但是，要想实现这种方式，必须在每一个内部主机的浏览器上明确指名代理服务器的IP地址和端口号。客户端上网时，每次都把请求发送给代理服务器处理,代理服务器根据请求确定是否连接到远程web服务器获取数据。如果在本地缓冲区有目标文件，则直接将文件传给用户即可。如果没有的话则先取回文件，先在本地保存一份缓冲，然后将文件发送给客户端浏览器。透明代理缓冲服务器透明代理缓冲服务器和标准代理服务器的功能完全相同。但是，代理操作对客户端的浏览器是透明的（即不需指明代理服务器的IP和端口）。透明代理服务器阻断网络通信，并且过滤出访问外部的HTTP（80端口）流量。如果客户端的请求在本地有缓冲则将缓冲的数据直接发给用户，如果在本地没有缓冲则向远程web服务器发出请求，其余操作和标准的代理服务器完全相同。对于linux操作系统来说，透明代理使用Iptables或者Ipchains实现。因此不需要对浏览器作任何设置，所以，透明代理对于ISP（Internet服务器提供商）特别有用。反向代理反向代理缓冲器反向代理是和前两种代理完全不同的一种代理服务。使用它可以降低原始WEB服务器的负载。反向代理服务器承担了对原始WEB服务器的静态页面的请求，防止原始服务器过载。它位于WEB服务器和Internet之间，处理所有对WEB服务器的请求，组织了WEB服务器和Internet的直接通信。如果互联网用户请求的页面在代理服务器上有缓冲的话，代理服务器直接将缓冲内容发送给用户。如果没有缓冲则先向WEB服务器发出请求，取回数据，本地缓存后再发给用户。这种方式通过降低了WEB服务器的请求数从而降低了WEB服务器的负载。正向代理与反向代理的区别概念正向代理：对于原始服务器而言，就是客户端的代言人反向代理：对于客户端而言，就像是原始服务器用途正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。安全性正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。Squid主要组成部分服务名：squid主程序：/usr/sbin/squid配置目录：/etc/squid主配置文件：/etc/squid/squid.conf监听tcp端口号：3128默认访问日志文件：/var/log/squid/access.logsquid常用配置选项/etc/squid/squid.conf123456789101112131415http_port 3128 (还可以只监听一个IP http_port 192.168.0.1:3128)cache_mem 64MB #缓存占内存大小maximum_object_size 4096KB #最大缓存块reply_body_max_size 1024000 allow all #限定下载文件大小access_log /var/log/squid/access.log #访问日志存放的地方visible_hostname proxy.test.xom #可见的主机名cache_dir ufs /var/spool/squid 100 16 256 #ufs:缓存数据的存储格式#/var/spool/squid 缓存目录#100：缓存目录占磁盘空间大小（M）#16：缓存空间一级子目录个数#256：缓存空间二级子目录个数cache_mgr webmaster@test.com #定义管理员邮箱http_access deny all #访问控制squid中的访问控制使用访问控制特性，可以控制在访问时根据特定的时间间隔进行缓存、访问特定站点或一组站点等等。squid访问控制有两个要素：ACL元素和访问列表。访问列表可以允许或拒绝某些用户对此服务的访问。ACL元素类型src：源地址（即客户机IP地址）dst：目标地址（即服务器IP地址）srcdomain：源名称（即客户机名称）dstdomain：目标名称（即服务器名称）time：一天中的时刻和一周内的一天url_regex：URL规则表达式匹配urlpath_regex：URL-path规则表达式匹配，略去协议和主机名proxy_auth：通过外部程序进行用户验证maxconn：单一IP的最大连接数ACL格式为了使用控制功能，必须先设置ACL规则并应用。ACL声明的格式如下： 注：acl_element_name 可以是任一个在ACL中定义的名称任何两个ACL元素不能用相同的名字每个ACL由列表值组成。当进行匹配检测的时候，多个值由逻辑或运算连接；换言之，即任一ACL元素的值被匹配，则这个ACL元素即被匹配。并不是所有ACL元素都能使用访问列表中的全部类型不同的ACL元素写在不同行中，squid将把他们组合在一个列表中访问条目我们可以使用许多不同的访问条目。下面是我们常用的几个：http_access:允许HTTP访问no_cache:定义对缓存请求的响应。访问列表的规则由一些类似’allow’或‘deny’的关键字构成，用以允许或拒绝向特定或一组ACL元素提供服务。一个访问列表可以由多条规则组成如果没有任何规则与访问请求匹配，默认动作将与列表中最后一条规则对应。一个访问条目中所有元素将用逻辑与运算连接http_access Action 声明1 AND 声明2 AND 声明 OR.http_access Action 声明3多个http_accesss声明间用或运算连接，但每个访问条目的元素间用与运算连接。列表中的规则总是遵循由上而下的顺序这些规则按照他们的排列顺序进行匹配检测，一旦检测到匹配的规则，匹配就立即结束。Squid.conf配置文件详解123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156#acl all src 0.0.0.0/0.0.0.0 and http_access allow all选项定义了一个访问控制列表。详细情况参见和Squid软件#携带的文档。这里的访问控制列表允许所有对代理服务的访问，因为这里该代理是加速web服务器。acl all src 0.0.0.0/0.0.0.0 #允许所有IP访问acl manager proto http #manager url协议为httpacl localhost src 127.0.0.1/255.255.255.255 #允午本机IPacl to_localhost dst 127.0.0.1 #允午目的地址为本机IPacl Safe_ports port 80 # 允许安全更新的端口为80acl CONNECT method CONNECT #请求方法以CONNECThttp_access allow all #允许所有人使用该代理.因为这里是代理加速web服务器http_reply_access allow all #允许所有客户端使用该代理acl OverConnLimit maxconn 16 #限制每个IP最大允许16个连接，防止攻击http_access deny OverConnLimiticp_access deny all #禁止从邻居服务器缓冲内发送和接收ICP请求.miss_access allow all #允许直接更新请求ident_lookup_access deny all #禁止lookup检查DNShttp_port 8080 transparent #指定Squid监听浏览器客户请求的端口号。hierarchy_stoplist cgi-bin ? #用来强制某些特定的对象不被缓存，主要是处于安全的目的。acl QUERY urlpath_regex cgi-bin \?cache deny QUERYcache_mem 1 GB #这是一个优化选项，增加该内存值有利于缓存。应该注意的是： #一般来说如果系统有内存，设置该值为(n/)3M。现在是3G 所以这里1Gfqdncache_size 1024 #FQDN 高速缓存大小maximum_object_size_in_memory 2 MB #允许最大的文件载入内存memory_replacement_policy heap LFUDA #动态使用最小的，移出内存cachecache_replacement_policy heap LFUDA #动态使用最小的，移出硬盘cachecache_dir ufs /home/cache 5000 32 512 #高速缓存目录 ufs 类型 使用的缓冲值最大允午1000MB空间，#32个一级目录，512个二级目录max_open_disk_fds 0 #允许最大打开文件数量,0 无限制minimum_object_size 1 KB #允午最小文件请求体大小maximum_object_size 20 MB #允午最大文件请求体大小cache_swap_low 90 #最小允许使用swap 90%cache_swap_high 95 #最多允许使用swap 95%ipcache_size 2048 # IP 地址高速缓存大小 2Mipcache_low 90 #最小允许ipcache使用swap 90%ipcache_high 95 #最大允许ipcache使用swap 90%access_log /var/log/squid/access.log squid #定义日志存放记录cache_log /var/log/squid/cache.log squidcache_store_log none #禁止store日志emulate_httpd_log on #将使Squid仿照Web服务器的格式创建访问记录。如果希望使用 #Web访问记录分析程序，就需要设置这个参数。refresh_pattern . 0 20% 4320 override-expire override-lastmod reload-into-ims ignore-reload #更新cache规则acl buggy_server url_regex ^http://.... http:// #只允许http的请求broken_posts allow buggy_serveracl apache rep_header Server ^Apache #允许apache的编码broken_vary_encoding allow apacherequest_entities off #禁止非http的标分准请求，防止攻击header_access header allow all #允许所有的http报头relaxed_header_parser on #不严格分析http报头.client_lifetime 120 minute #最大客户连接时间 120分钟cache_mgr sky@test.com #指定当缓冲出现问题时向缓冲管理者发送告警信息的地址信息。cache_effective_user squid #这里以用户squid的身份Squid服务器cache_effective_group squidicp_port 0 #指定Squid从邻居服务器缓冲内发送和接收ICP请求的端口号。 #这里设置为0是因为这里配置Squid为内部Web服务器的加速器， #所以不需要使用邻居服务器的缓冲。0是禁用# cache_peer 设置允许更新缓存的主机，因是本机所以127.0.0.1cache_peer 127.0.0.1 parent 80 0 no-query default multicast-responder no-netdb-exchangecache_peer_domain 127.0.0.1 hostname_aliases 127.0.0.1error_directory /usr/share/squid/errors/Simplify_Chinese #定义错误路径always_direct allow all # cache丢失或不存在是允许所有请求直接转发到原始服务器ignore_unknown_nameservers on #开反DNS查询，当域名地址不相同时候，禁止访问coredump_dir /var/log/squid #定义dump的目录max_filedesc 2048 #最大打开的文件描述half_closed_clients off #使Squid在当read不再返回数据时立即关闭客户端的连接。 #有时read不再返回数据是由于某些客户关闭TCP的发送数据 #而仍然保持接收数据。而Squid分辨不出TCP半关闭和完全关闭。buffered_logs on #若打开选项“buffered_logs”可以稍稍提高加速某些对日志文件的写入，该选项主要是实现优化特性。#防止天涯盗链，转嫁给百度acl tianya referer_regex -i tianyahttp_access deny tianyadeny_info tianya#阻止baidu蜘蛛acl baidu req_header User-Agent Baiduspiderhttp_access deny baidu#限制同一IP客户端的最大连接数acl OverConnLimit maxconn 128http_access deny OverConnLimit#防止被人利用为HTTP代理，设置允许访问的IP地址acl myip dst 222.18.63.37http_access deny !myip#允许本地管理acl Manager proto cache_objectacl Localhost src 127.0.0.1 222.18.63.37http_access allow Manager Localhostcachemgr_passwd 53034338 allhttp_access deny Manager#仅仅允许80端口的代理acl all src 0.0.0.0/0.0.0.0acl Safe_ports port 80 # httphttp_access deny !Safe_portshttp_access allow all#Squid信息设置visible_hostname happy.swjtu.edu.cncache_mgr ooopic2008@qq.com#基本设置cache_effective_user squidcache_effective_group squidtcp_recv_bufsize 65535 bytes#2.6的反向代理加速配置cache_peer 127.0.0.1 parent 80 0 no-query originserver#错误文档error_directory /usr/local/squid/share/errors/Simplify_Chinese#单台使用，不使用该功能icp_port 0hierarchy_stoplist cgi-bin ?acl QUERY urlpath_regex cgi-bin \? .php .cgi .avi .wmv .rm .ram .mpg .mpeg .zip .execache deny QUERYacl apache rep_header Server ^Apachebroken_vary_encoding allow apacherefresh_pattern ^ftp: 1440 20% 10080refresh_pattern ^gopher: 1440 0% 1440refresh_pattern . 0 20% 4320cache_store_log nonepid_filename /usr/local/squid/var/logs/squid.pidemulate_httpd_log onSquid常用命令初始化在squid.conf里配置的cache目录squid -z如果有错误提示，请检查cache目录的权限，可以更改目录权限chown -R squid:squid /cache目录对squid.conf排错，即验证squid.conf的语法和配置squid -k parse如果在squid.conf中有语法或配置错误，这里会返回提示，若无返回，尝试启动squid前台启动squid，并输出启动过程/usr/local/squid/sbin/squid -N -d1如果有ready to server reques相关信息，说明squid启动成功然后ctrl+c ,停止squid,并以后台运行的方式启动它启动squid在后台运行squid -s可以使用ps -ax | grep squid 来查看squid进程是否存在停止squidsquid -k shutdown重新引导修改过的squid.confsquid -k reconfigure -f /XXX/squid.conf当squid进行配置更改后，可以使用该命令进行squid配置重载把squid添加到系统启动项vim /etc/rc.local/usr/local/squid/sbin/squid -s修改cache缓存目录的权限chown -R squid.squid /cache目录cache缓存目录根据自己的配置更改，squid用户和组是squid，squid修改squid日志目录的权限chown -R squid.squid 定义的日志文件所在目录这一步并不是适合每一个使用squid的用户，意为让squid有权限在该目录里进行写操作查看你的日志文档more /usr/local/squid/var/logs/access.log | grep TCP_MEM_HIT该指令可以看到在squid运行过程中，有那些文件被squid缓存到内存中，并返回给访问用户。more /usr/local/squid/var/logs/access.log | grep TCP_HIT该指令可以看到在squid运行过程中，有那些文件被squid缓存到cache目录中，并返回给访问用户。more /usr/local/squid/var/logs/access.log | grep TCP_MISS该指令可以看到在squid运行过程中，有那些文件没有被squid缓存，而是从原始服务器获取并返回给访问用户。Squid命中率分析12/usr/local/squid/bin/squidclient -p 80 mgr:info/usr/local/squid/bin/squidclient -p 80 mgr:5min可以看到详细的性能情况,其中PORT是你的proxy的端口，5min可以是60min取得squid运行状态信息：1squidclient -p 80 mgr:info取得squid内存使用情况：1squidclient -p 80 mgr:mem取得squid已经缓存的列表：1squidclient -p 80 mgr:bjects. use it carefully,it may crash取得squid的磁盘使用情况：1squidclient -p 80 mgr:diskd强制更新某个url：1squidclient -p 80 -m PURGE http://www.xxx.com/xxx.php更多的请查看：squidclient-h 或者 squidclient -p 80 mgr:查命中率：1squidclient -h IP(具体侦听IP) -p 80(具体侦听端口) mgr:info定期清理swap.state内无效数据123/path/to/squid/sbin/squid -k rotate -f /path/to/squid/conf_filevi /etc/crontab0 0 * * * root /usr/local/sbin/squid -k rotate -f /usr/local/etc/squid/squid1.conf当squid应用运行了一段时间之后，cache_dir对应的swap.state文件就会变得越来越大，里面的无效接口数据越来越多，这可能影响squid的响应时间，因此需要使用squid清理swap.state里面的无效数据，减少swap.state的大小。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>squid</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网：用 VPS 搭建 shadowsocks 服务器]]></title>
    <url>%2Fposts%2Fa067636e%2F</url>
    <content type="text"><![CDATA[shadowsocks 简介shadowsocks 是一款自定义协议的代理软件，由于其流量特征不明显，（直到不久前）一直可以稳定提供上网代理。shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。购买 VPS 服务器主流的 VPS（虚拟主机）服务器提供商有三家：linodedigital oceanbandwagon下面的比上面的便宜。如果只是自用，bandwagon 足够。一般使用 paypal 绑定一个 visa 或 mastercard 信用卡来付款。注意要用国际 paypal 帐号，国内的是不能用外币付款的。在 bandwagon 购买 VPS 以后会获得一个主机地址和用于 ssh 登录的 root 密码。远程登陆 VPSMac或 Linux 下直接在终端中ssh root@your_vps_ip your_ssh_port即可。在 windows 系统下需要专门的客户端来 SSH 登录 VPS。在&nbsp;xShell 官网&nbsp;&nbsp;下载 xShell。家庭和学校用户可以免费试用，下载时选择 home&nbsp;and&nbsp;school&nbsp;use 即可。需要用邮箱注册一下，下载链接会发送到邮箱中。xShell 中新建一个连接，会要求输入目标 IP 地址和端口，以及 root 密码，按提示操作即可。安装 shadowsocks最好是centos71.安装pip由于安装的是python 版本的 shadowsocks，所以首先安装pip$ curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot; $ python get-pip.py 2.安装shadowsocks$ pip install --upgrade pip $ pip install shadowsocks 3.创建配置文件创建文件所在目录:/etc 创建文件命令$ vi /etc/shadowsocks.json 若进入了etc目录$ vi shadowsocks.json 配置文件内容：单端口：1234567891011121314151617&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, --服务器IP，直接用0.0.0.0也可 &quot;server_port&quot;:8888, --端口端口 &quot;local_address&quot;: &quot;127.0.0.1&quot;, --本地地址，可省略 &quot;local_port&quot;:1080,--本地端口，可省略 &quot;password&quot;:&quot;password&quot;,--密码 &quot;timeout&quot;:300, --超时时间，可省略 &quot;method&quot;:&quot;aes-256-cfb&quot;, --加密策略，有多重策略，具体自查&#125;多端口：12345678910111213141516171819202122232425&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:&#123;--每个端口对应一个密码 &quot;1111&quot;:&quot;password1&quot;, &quot;1112&quot;:&quot;password2&quot;, &quot;1113&quot;:&quot;password3&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;:false&#125;4.启动shadowsocks启动ssserver -c /etc/shadowsocks.json -d start 停止ssserver -c /etc/shadowsocks.json -d stop 重启ssserver -c /etc/shadowsocks.json -d restart 启动成功即可通过ss客户端使用。在window端可以在控制台通过以下命令查看端口是否打开telnet {ip} {port} 5.配置自启动新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下： [Unit]Description=Shadowsocks [Service]TimeoutStartSec=0 ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json [Install]WantedBy=multi-user.target 通过以下命令注册，启动服务$ systemctl enable shadowsocks $ systemctl start shadowsocks 启动后可以查看服务状态$ systemctl status shadowsocks -l 若启动成功：● shadowsocks.service - ShadowsocksLoaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)Active: active (running) since Sun 2017-08-13 18:03:41 CST; 1h 29min agoMain PID: 9567 (ssserver)CGroup: /system.slice/shadowsocks.service└─9567 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json如果，服务失败，重启服务器试一下安装并启动 shadowsocks 客户端shadowsocks 支持 windows、Mac&nbsp;OS&nbsp;X、Linux、Android、iOS 等多个平台。不过 iOS 由于系统对应用后台运行的限制，推荐使用客户端内嵌的浏览器科学上网，给其他应用代理时需要每过几分钟重新启动一下 app。shadowsocks 项目 Github 主页在这里。里面可以找到客户端下载地址。下载安装客户端以后，只需按服务器的配置填写 IP 地址、服务器端口、本地端口（如果没有本地端口选项，就是默认的 1080）、密码、加密方式等参数，启动就可以了。客户端支持全局代理和 PAC 代理两种方式，后者会使用一个脚本来自动检查一个网站是否在需要代理的网站列表中，自动选择直接连接或代理连接。PAC 列表可以在线更新，但是难免有收录不全的情况。这时可以选择关闭 shadowsocks 代理（实际上是取消对系统代理的配置，shadowsocks 客户端仍然保持工作），然后使用支持自定义规则的代理管理插件来实现自动切换代理，比如 switchyOmega。使用 switchyOmega 实现自动切换代理switchyOmega 是 chrome 浏览器上一个很好用的代理管理插件。它的前身 switchySharp 更有名。 chrome 应用商店本身需要翻墙才能访问，因此需要先在 shadowsocks 启动代理模式下下载安装，再关闭 shadowsocks 代理。 安装完毕后，右击 switchyOmega 图标，选择选项，进入 switchOmega 配置界面。 创建 shadowsocks 情景模式新建一个情景模式，比如叫 SS，代理协议选择 socks5，代理地址为 127.0.0.1，端口 1080。 现在切换到 SS 情景模式就可以通过 shadowsocks 科学上网了。后面获取自动切换规则列表 设置自动切换模式在设置界面选择自动切换模式，在 “切换规则” 中勾选“规则列表规则”，对应的情景模式选择刚刚新建的 SS。然后在下面的规则列表地址中填写https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt规则列表格式选择 AutoProxy。然后点击立即更新情景模式， 更新完成后会有提示。点击左侧的 “应用选项”。然后单击 switchyOmega 图标，选择自动切换，就可以在访问“不存在的网站” 时自动切换到 shadowsocks 代理了。添加自定义规则如果遇到某个国外网站无法直接连接或速度太慢时，可以单击 switchyOmega 图标，选择 “添加条件”，情景模式选择 SS，就可以了。这时打开 switchyOmega 选项，在自动切换模式的切换规则中就可以看到刚刚添加的规则。可以在这里管理自定义的规则。导入和导出 switchyOmega 设置如果换了一台电脑，重新设置一遍 switchyOmega 就太麻烦了。可以在设置好的 switchyOmega 中导出设置文件，在另一个 chrome 浏览器中导入，就可以直接复制原来的设置了。在 switchyOmega 选项的左侧点击 “导入 / 导出”，点击“生成备份文件” 即可生成 switchyOmega 设置备份。点击 “从备份文件恢复” 可以导入备份文件。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VPS</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tag Plugins]]></title>
    <url>%2Fposts%2Fe2e5eeac%2F</url>
    <content type="text"><![CDATA[FAQWelcome to tag-pluginsTag Plugin is a way to make special style contents supported by Hexo. For example, we cannot show a image with custom size in standard Markdown. And then we can use tag plugins to solve it. Hexo has a lot of tags which can help user. And Hexo also have interfaces to themes which make themes able to create their own tags. Following tags is provided by NexT:Centered QuoteInclude RawButtonFull ImageGroup PicturesLabelMermaidNotePDFTabsVideoCentered QuoteThis tag will make a quote with two lines before and after it, and text quoted will be centered. When using centered quote, if we have multi-line text, and each line has a different length, the quote won’t be symmetrical, so it’s recommended to use when only have single line text. For example before article all after article to make a summary.Usagecenter-quote.js123&#123;% centerquote %&#125;Something&#123;% endcenterquote %&#125;&lt;!-- Tag Alias --&gt;&#123;% cq %&#125;Something&#123;% endcq %&#125;Example1&#123;% cq %&#125;Elegant in code, simple in core&#123;% endcq %&#125;Elegant in code, simple in coreInclude RawThis tag include any raw content into your posts. Path is relative to your site source directory.Usageinclude-raw.js1&#123;% include_raw '_data/path/to/file.html' %&#125;ExampleLet’s create include-raw.html file in _data directory under site root directory with following content:1Any &lt;strong&gt;raw content&lt;/strong&gt; may be included with this tag.Then in any post we can use this content with include_raw tag:1&#123;% include_raw '_data/path/to/include-raw.html' %&#125;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《辐射4》二次元萌妹MOD]]></title>
    <url>%2Fposts%2F8c023e79%2F</url>
    <content type="text"><![CDATA[《辐射4》二次元萌妹MOD补丁类型：游戏MOD整理时间：2019-05-05大小：18.73MB补丁制作：hiyokomod补丁语言：多国版本：v1.0download由N网作者“hiyokomod”制作的一款人物外观替换美化mod“二次元萌妹MOD”，将游戏中将游戏中多位女性NPC外观修改为二次元美少女，非常精致的面部建模和可修改项，带给每一个老冰棍！喜欢这些萌妹子就来3DM下载体验吧！截图注意事项需要下载“LooksMenu捏脸菜单==&gt;点我下载”。使用说明NMM自动安装方法：点我下载NMM1、添加压缩包到NMM(列表中出现)； 2、双击列表安装； 3、进入游戏即可。 **手动安装方法(不推荐)：** 1、解压缩； 2、将data文件夹复制到游戏根目录； 3、用MOD管理器加载ESP； 4、进入游戏中即可。 演示视频分流百度网盘(提取码：br93)本地电信网通高速下载电信下载联通下载]]></content>
      <categories>
        <category>Mod</category>
      </categories>
      <tags>
        <tag>Games</tag>
        <tag>Pc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给hexo博客next主题添加背景音乐]]></title>
    <url>%2Fposts%2F96f89d1%2F</url>
    <content type="text"><![CDATA[请访问我的个人博客 sourcod我的hexo博客使用的是next主题所有次教程在next主题上修改。修改 themes/next/layout/_macro/sidebar.swig 文件添加音乐播放器内容在 themes/next/_config.yml 配置文件中添加歌单地址配置background_music: //music.163.com/outchain/player?type=0&amp;amp;id=2120628564&amp;amp;auto=1&amp;amp;height=66注册网易云音乐自己研究创建歌单自己研究给歌单添加自己喜欢的音乐看你自己了分享歌单不会获取外链的请上度娘: 怎么把自己的歌单做成外链获取外链播放器把地址copy出来height=90改成 66这样以后只需要修改网易云音乐的歌单，博客的背景音乐就会自动修改了。如果出现音乐不自动播放，那是资源的问题，自己上网易云音乐生成外链的页面看看会不会自动播放。把坏资源删除就OK了。修改完我的博客的效果]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[问道]]></title>
    <url>%2Fposts%2Fa3b6fe04%2F</url>
    <content type="text"><![CDATA[游戏背景介绍鸿蒙开化之初，中州大陆昆仑之颠的鸿钧上人创立道教，并收徒三人，各授以道门绝技，三徒皆修成混元大罗金仙万劫不坏之体，分别发展出道教的人道、阐教和截教三个分支。此三徒正是人道教主太上老君、阐教教主元始天尊和截教的通天教主。三教主秉承师父鸿钧上人教诲，广收门徒将道教流传于世。只因入道门中即可修仙，使人跳出三界之外，不在五行之中，免除生死轮回之苦，使得入道修行之人多不胜数。但修仙之道并非苦心修炼便可达成，修行路上，均要经历三百年一小劫，一千五百年一大劫的劫数。修行之人均无法避开劫数，只能根据自身道行的深浅去经历劫数。值商周两朝交替之时，恰逢修仙一千五百年仙劫，于是三教主共议封神榜，以观众仙根行浅深。然劫数难逃，封神一役，致使道门内部阐教和截教不和，修仙众人俱遭屠戮，更引来西方教派参与纷争，后因鸿钧上人亲自出面调停，终得以平息。通天教主被鸿钧上人禁制在紫霄宫昆仑之颠修行思过。时光如梭，转眼已过千年，师尊鸿钧上人外出云游，不知所踪。而通天仿佛已经习惯了这种被禁固的生活，除了每日的必做的修真炼气和静诵《黄庭》，他更多的时间总是在断崖边静静坐着。也许只有这个时刻，他才能真真实实地感觉到自己的存在，千年的苦行使他的修为倍增，同时也让他饱受了孤单和寂寞，他已经很久没有说过一句话了，很久是多久，他自己也不知道，他只知道他在等，他们都在等。.空旷的断崖边，一个人影伫立，良久，一动不动。山风劲袭，人犹如与山浑然一体，仍是一动不动，坚毅的面容毫无表情，只有明亮的双眸在黑夜印衬下寒光闪现，眺望着远方。远处，骷髅山顶，一块顽石好象动了一动，又动了一动，仿佛有了呼吸。慢慢地，顽石周围竟然忽隐忽现出着玄黄色的光芒，最终幻化为一个人形的光团，缓缓飘向山后的幽冥涧。此时，人影的苍白面容上浮现出奇怪的笑意，令人不寒而栗，他是通天。五百年后的中洲大陆。在东海渔村，世世代代以捕鱼为生的渔民有一天突然发现离他们村子不远的海面上，竟然出现一个异常美丽的仙岛。在天墉城，熙熙攘攘地街道上突然多了一些身着奇装奇服，行为举止十分可疑之人。在揽仙镇，一个平凡冷清的小镇上突然间热闹了起来，从四面八方赶来的俊男美女络绎不绝。本来平静的《问道》世界中出现各种异象和征兆，而此时，准备一探究竟的玩家，正赶往揽仙镇的途中。 [1]截图下载客户端下载登录器下载目前只提供1.60.0905版本客户端百度云下载链接🔗百度云密码(kq7m)与版本对应的登录器，服务器为公益服，不做任何盈利和不具备商业性质！链接：https://pan.baidu.com/s/1RN4VX3bOwH61xC70t82dMw提取码：**复制这段内容后打开百度网盘手机App，操作更方便哦更多资讯: Deployment]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>online</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F4a17b156%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deploy更多资讯: Deployment]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
</search>
