{"title":"C++之Lambda研究","date":"2019-06-03T12:20:52.000Z","date_formatted":{"ll":"Jun 3, 2019","L":"06/03/2019","MM-DD":"06-03"},"link":"posts/Lambda","comments":true,"tags":["C++"],"categories":["C++"],"updated":"2020-04-14T14:01:54.168Z","content":"<h1 id=\"1. 前言\">1. 前言<a title=\"#1. 前言\" href=\"#1. 前言\"></a></h1>\n<p>本文代码测试环境为“GCC-9.1.0”，有关编译器的安装请参考《<a href=\"https://blog.csdn.net/Aquester/article/details/89735466\" target=\"_blank\">安装GCC-8.3.0及其依赖</a>》，适用于“GCC-9.1.0”。</p>\n<p>本文试图揭露Lambda背后一面，以方便更好的理解和掌握Lambda。Lambda代码段实际为一个编译器生成的类的“operator ()”函数，编译器会为每一个Lambda函数生成一个匿名的类（在C++中，类和结构体实际一样，无本质区别，除了默认的访问控制）。</p>\n<p>对Lambda的最简单理解，是将它看作一个匿名类（或结构体），实际上也确实如此，编译器把Lambda编译成了匿名类。</p>\n<a id=\"more\"></a>\n<h1 id=\"2.-示例1\">2. 示例1<a title=\"#2.-示例1\" href=\"#2.-示例1\"></a></h1>\n<p>先看一段几乎最简单的Lambda代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> f = [] &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"f\\n\"</span>); &#125;; <span class=\"comment\">// 注意“&#125;”后的“;”必不可少，否则编译报错</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果Lambda表达式（或函数）没有以“;”结尾，则编译时将报如下错误：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a3.cpp: <span class=\"keyword\">In</span> <span class=\"keyword\">function</span> <span class=\"string\">'int main()'</span>:</span><br><span class=\"line\">a3.cpp:<span class=\"number\">4</span>:<span class=\"number\">3</span>: error: expected <span class=\"string\">','</span> <span class=\"keyword\">or</span> <span class=\"string\">';'</span> <span class=\"keyword\">before</span> <span class=\"string\">'return'</span></span><br><span class=\"line\">    <span class=\"number\">4</span> |   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      |   ^~~~~~</span><br></pre></td></tr></table></figure>\n<p>Lambda之所以神奇，这得益于C++编译器的工作，上述“f”实际长这样：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = <span class=\"class\"><span class=\"keyword\">struct</span> &lt;<span class=\"title\">lambda</span>()&gt; &#123;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个匿名的类（或结构体），实际上还有一个成员函数“operator () const”。注意这里成员函数是”const”类型，这是默认的。如果需非”const”成员函数，需要加”mutable”修饰，如下所示：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto f = [<span class=\"string\">n</span>](<span class=\"link\"></span>) mutable &#123; printf(\"%d\\n\", n); &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面例子对应的匿名类没有任何类数据成员，现在来个有类数据成员的代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> f = [n] &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, n); &#125;;</span><br><span class=\"line\">  f(); <span class=\"comment\">// 这里实际调用的是匿名类的成员函数“operator ()”</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时，“f”实际长这样，它是一个含有类数据成员的匿名类，而不再是空无一特的类：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = <span class=\"class\"><span class=\"keyword\">struct</span> &lt;<span class=\"title\">lambda</span>()&gt; &#123;</span></span><br><span class=\"line\">    int __n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3. 示例2\">3. 示例2<a title=\"#3. 示例2\" href=\"#3. 示例2\"></a></h1>\n<p>继续来个变种：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> f = [&amp;n]() <span class=\"keyword\">mutable</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, n); &#125;;</span><br><span class=\"line\">  f();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时，“f”实际长这样，一个包含了引用类型的匿名类：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = <span class=\"class\"><span class=\"keyword\">struct</span> &lt;<span class=\"title\">lambda</span>()&gt; &#123;</span></span><br><span class=\"line\">    int &amp;__n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4. 示例3\">4. 示例3<a title=\"#4. 示例3\" href=\"#4. 示例3\"></a></h1>\n<p>继续变种，“&amp;”的作用让Lambda函数可使用Lambda所在作用域内所有可见的局部变量（包括Lambda所在类的this），并且是以引用传递方式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> f = [&amp;]() <span class=\"keyword\">mutable</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, n); &#125;;</span><br><span class=\"line\">  f();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>“f”实际长这样：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = <span class=\"class\"><span class=\"keyword\">struct</span> &lt;<span class=\"title\">lambda</span>()&gt; &#123;</span></span><br><span class=\"line\">    int &amp;__n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变稍复杂一点：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> f = [&amp;]() <span class=\"keyword\">mutable</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, n); &#125;;</span><br><span class=\"line\">  f();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，“f”并没有发生变化：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = <span class=\"class\"><span class=\"keyword\">struct</span> &lt;<span class=\"title\">lambda</span>()&gt; &#123;</span></span><br><span class=\"line\">    int &amp;__n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5. 示例4\">5. 示例4<a title=\"#5. 示例4\" href=\"#5. 示例4\"></a></h1>\n<p>继续增加复杂度：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> m = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> f = [&amp;]() <span class=\"keyword\">mutable</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d\\n\"</span>, n, m); &#125;;</span><br><span class=\"line\">  f();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到“f”变了：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = <span class=\"class\"><span class=\"keyword\">struct</span> &lt;<span class=\"title\">lambda</span>()&gt; &#123;</span></span><br><span class=\"line\">    int &amp;__n;</span><br><span class=\"line\">    int &amp;__m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面不难看出，编译器只会把Lambda函数用到的变量打包进对应的匿名类。继续一个稍复杂点的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">X</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"foo\\n\"</span>); &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xoo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> f = [&amp;] &#123; foo(); &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  X().xoo();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时，“f”实际长这样：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = struct <span class=\"type\">X</span>::&lt;lambda()&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">X</span> * const __this; // <span class=\"type\">X</span>类型的指针（非对象）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果将“auto f = [&amp;] { foo(); };”中的“&amp;”去掉，则会遇到编译错误，提示“this”没有被Lambda函数捕获：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a2.cpp: <span class=\"keyword\">In</span> lambda <span class=\"keyword\">function</span>:</span><br><span class=\"line\">a2.cpp:<span class=\"number\">5</span>:<span class=\"number\">23</span>: error: <span class=\"symbol\">'this</span>' was <span class=\"keyword\">not</span> captured <span class=\"keyword\">for</span> this lambda <span class=\"keyword\">function</span></span><br><span class=\"line\">    <span class=\"number\">5</span> |     auto f = [] &#123; foo(); &#125;;</span><br><span class=\"line\">      |                       ^</span><br><span class=\"line\">a2.cpp:<span class=\"number\">5</span>:<span class=\"number\">23</span>: error: cannot call member <span class=\"keyword\">function</span> <span class=\"title\">'void</span> X::foo()' <span class=\"keyword\">with</span><span class=\"keyword\">out</span> object</span><br></pre></td></tr></table></figure>\n<p>改成下列方式捕获也是可以的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">X</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"foo\\n\"</span>); &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xoo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> f = [<span class=\"keyword\">this</span>] &#123; foo(); &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  X().xoo();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是C++17，还可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++17</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">X</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"foo\\n\"</span>); &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xoo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> f = [*<span class=\"keyword\">this</span>]() <span class=\"keyword\">mutable</span> &#123; foo(); &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  X().xoo();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意得有“mutable”修饰，不然报如下编译错误：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a2.<span class=\"string\">cpp:</span> In lambda <span class=\"string\">function:</span></span><br><span class=\"line\">a2.<span class=\"string\">cpp:</span><span class=\"number\">5</span>:<span class=\"number\">30</span>: <span class=\"string\">error:</span> passing <span class=\"string\">'const X'</span> <span class=\"keyword\">as</span> <span class=\"string\">'this'</span> argument discards qualifiers [-fpermissive]</span><br><span class=\"line\">    <span class=\"number\">5</span> |     auto f = [*<span class=\"keyword\">this</span>]() &#123; foo(); &#125;;</span><br><span class=\"line\">      |                              ^</span><br><span class=\"line\">a2.<span class=\"string\">cpp:</span><span class=\"number\">3</span>:<span class=\"number\">8</span>: <span class=\"string\">note:</span>   <span class=\"keyword\">in</span> call to <span class=\"string\">'void X::foo()'</span></span><br><span class=\"line\">    <span class=\"number\">3</span> |   <span class=\"keyword\">void</span> foo() &#123; printf(<span class=\"string\">\"foo\\n\"</span>); &#125;</span><br><span class=\"line\">      |        ^~~</span><br></pre></td></tr></table></figure>\n<p>也可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++17</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">X</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"foo\\n\"</span>); &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xoo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> f = [&amp;,*<span class=\"keyword\">this</span>]() <span class=\"keyword\">mutable</span> &#123; foo(); &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  X().xoo();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用“*this”时的“f”样子如下：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> = struct <span class=\"type\">X</span>::&lt;lambda()&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">X</span> __this; // <span class=\"type\">X</span>类型的对象（非指针）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6. 示例5\">6. 示例5<a title=\"#6. 示例5\" href=\"#6. 示例5\"></a></h1>\n<p>继续研究，使用C++ RTTI（Run-Time Type Identification，运行时类型识别）设施“typeid”查看Lambda函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;typeinfo&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">X</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xoo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> f = [] &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"f\\n\"</span>); &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, <span class=\"keyword\">typeid</span>(f).name());</span><br><span class=\"line\">    <span class=\"comment\">// 注：typeid返回值类型为“std::type_info”</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  X().xoo();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行输出：</p>\n<p><code>ZN1X3xooEvEUlvE_</code></p>\n<h1 id=\"7.-匿名类规则\">7. 匿名类规则<a title=\"#7.-匿名类规则\" href=\"#7.-匿名类规则\"></a></h1>\n<p>编译器为Lambda生成的匿名类规则（不同标准有区别）：</p>\n<table align=\"center\" border=\"1\" cellspacing=\"0\"><tbody><tr><td rowspan=\"4\">\t\t\t<p style=\"margin-left:0pt;\">构造函数</p>\t\t\t<p style=\"margin-left:0pt;\">拷贝构造函数</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">ClosureType()&nbsp;=&nbsp;<strong>delete</strong>;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\">C++14前</p>\t\t\t</td>\t\t</tr><tr><td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">ClosureType()&nbsp;=&nbsp;default;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\">C++20起，</p>\t\t\t<p style=\"margin-left:0pt;\">仅当未指定任何俘获时</p>\t\t\t</td>\t\t</tr><tr><td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">ClosureType(const&nbsp;ClosureType&amp;&nbsp;)&nbsp;=&nbsp;default;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\">C++14起</p>\t\t\t</td>\t\t</tr><tr><td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">ClosureType(ClosureType&amp;&amp;&nbsp;)&nbsp;=&nbsp;default;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\">C++14起</p>\t\t\t</td>\t\t</tr><tr><td rowspan=\"3\" style=\"width:69.35pt;\">\t\t\t<p style=\"margin-left:0pt;\">拷贝复制函数</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;<strong>delete</strong>;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\"><span style=\"color:#0000ff;\"><strong>C++20前</strong></span></p>\t\t\t</td>\t\t</tr><tr><td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;default;</p>\t\t\t<p style=\"margin-left:0pt;\">ClosureType&amp;&nbsp;operator=(ClosureType&amp;&amp;)&nbsp;=&nbsp;default;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\">C++20起，</p>\t\t\t<p style=\"margin-left:0pt;\">仅当未指定任何俘获时</p>\t\t\t</td>\t\t</tr><tr><td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;<strong>delete</strong>;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\">C++20起，其他情况</p>\t\t\t</td>\t\t</tr><tr><td style=\"vertical-align:top;width:69.35pt;\">\t\t\t<p style=\"margin-left:0pt;\">析构函数</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:250.8pt;\">\t\t\t<p style=\"margin-left:0pt;\">~ClosureType()&nbsp;=&nbsp;default;</p>\t\t\t</td>\t\t\t<td style=\"vertical-align:top;width:105.95pt;\">\t\t\t<p style=\"margin-left:0pt;\">析构函数是隐式声明的</p>\t\t\t</td>\t\t</tr></tbody></table>\n对于标记为“delete”的函数是不能调用的，如下列代码中的“f2 = f1;”将触发编译错误：\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">auto</span> f1 = []&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">auto</span> f2 = f1;</span><br><span class=\"line\"></span><br><span class=\"line\">  f2 = f1;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上列代码在C++11、C++14和C++17均会报错。不过如规则所示，C++20（含C++2a）上则可以正常编译：</p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a3.cpp: In <span class=\"function\"><span class=\"keyword\">function</span> '<span class=\"title\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>':</span></span><br><span class=\"line\">a3.cpp:<span class=\"number\">4</span>:<span class=\"number\">8</span>: <span class=\"built_in\">error</span>: use of deleted <span class=\"function\"><span class=\"keyword\">function</span> '<span class=\"title\">main</span><span class=\"params\">()</span>::&lt;<span class=\"title\">lambda</span><span class=\"params\">()</span>&gt;&amp; <span class=\"title\">main</span><span class=\"params\">()</span>::&lt;<span class=\"title\">lambda</span><span class=\"params\">()</span>&gt;::<span class=\"title\">operator</span>=<span class=\"params\">(const main()</span>::&lt;<span class=\"title\">lambda</span><span class=\"params\">()</span>&gt;&amp;)'</span></span><br><span class=\"line\">    <span class=\"number\">4</span> |   f2 = f1;</span><br><span class=\"line\">      |        ^~</span><br><span class=\"line\">a3.cpp:<span class=\"number\">2</span>:<span class=\"number\">14</span>: note: a lambda closure <span class=\"built_in\">type</span> has a deleted copy assignment operator</span><br><span class=\"line\">    <span class=\"number\">2</span> |   auto f1 = []&#123;&#125;;</span><br><span class=\"line\">      |              ^</span><br></pre></td></tr></table></figure>\n<p>希望通过本文，对理解Lambda有所帮助。</p>\n<h1 id=\"8. 参考资料\">8. 参考资料<a title=\"#8. 参考资料\" href=\"#8. 参考资料\"></a></h1>\n<ul>\n<li>\n<p>1) <a href=\"https://zh.cppreference.com/w/cpp/language/lambda\" target=\"_blank\">https://zh.cppreference.com/w/cpp/language/lambda</a></p>\n</li>\n<li>\n<p>2) <a href=\"https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-2019\" target=\"_blank\">https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-2019</a></p>\n</li>\n<li>\n<p>3) <a href=\"https://en.cpprefeence.com/w/cpp/language/lambda\" target=\"_blank\">https://en.cpprefeence.com/w/cpp/language/lambda</a></p>\n</li>\n<li>\n<p>4) <a href=\"https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11\" target=\"_blank\">https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11</a></p>\n</li>\n<li>\n<p>5) <a href=\"https://www.cprogramming.com/c++11/c++11-lambda-closures.html\" target=\"_blank\">https://www.cprogramming.com/c++11/c++11-lambda-closures.html</a></p>\n</li>\n</ul>\n<hr>\n<div class=\"note info\">\n            <p>作者：一见<br>来源：CSDN<br>原文：<a href=\"https://blog.csdn.net/Aquester/article/details/90691479\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Aquester/article/details/90691479</a></p>\n          </div>\n","prev":{"title":"Mutex介绍","link":"posts/Mutex介绍"},"next":{"title":"C++ 模板偏特化－来自STL的思考","link":"posts/模板特化"},"plink":"https://shuntan.github.io/posts/Lambda/","toc":[{"id":"1. 前言","title":"1. 前言","index":"1"},{"id":"2.-示例1","title":"2. 示例1","index":"2"},{"id":"3. 示例2","title":"3. 示例2","index":"3"},{"id":"4. 示例3","title":"4. 示例3","index":"4"},{"id":"5. 示例4","title":"5. 示例4","index":"5"},{"id":"6. 示例5","title":"6. 示例5","index":"6"},{"id":"7.-匿名类规则","title":"7. 匿名类规则","index":"7"},{"id":"8. 参考资料","title":"8. 参考资料","index":"8"}],"reward":true}