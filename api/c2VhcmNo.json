[{"title":"test TOC","date":"2019-06-22T06:16:57.000Z","updated":"2019-06-29T01:44:03.501Z","content":"This is H1\ntest H1\nThis is H1ff\ntest H1\nThis is H2\ntest H2\nThis is  H3\n\n\nstd::mutex\n\n\nstd::recursive_mutex\n\n\nstd::time_mutex\n\n\nstd::recursive_timed_mutex\n\n\n\nThis is  H4\ntest H4\n","plink":"https://shuntan.github.io/post/test/"},{"title":"mutex头文件介绍","date":"2019-06-14T03:00:47.000Z","updated":"2019-06-26T01:57:03.838Z","content":"Head\nMutex 又称互斥量，C++ 11中与 Mutex 相关的类（包括锁类型）和函数都声明在  头文件中，所以如果你需要使用 std::mutex，就必须包含  头文件。\n 头文件介绍\newde2e\nMutex 系列类(四种)\n\n\nstd::mutex，最基本的 Mutex 类。\n\n\nstd::recursive_mutex，递归 Mutex 类。\n\n\nstd::time_mutex，定时 Mutex 类。\n\n\nstd::recursive_timed_mutex，定时递归 Mutex 类。\n\n\n\nLock 类（两种）\n\nstd::lock_guard，与 Mutex RAII 相关，方便线程对互斥量上锁。\nstd::unique_lock，与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。\n\n其他类型\n\nstd::once_flag\nstd::adopt_lock_t\nstd::defer_lock_t\nstd::try_to_lock_t\n\n函数\n\nstd::try_lock，尝试同时对多个互斥量上锁。\nstd::lock，可以同时对多个互斥量上锁。\nstd::call_once，如果多个线程需要同时调用某个函数，call_once 可以保证多个线程对该函数只调用一次。\n\nstd::mutex 介绍\n下面以 std::mutex 为例介绍 C++11 中的互斥量用法。\nstd::mutex 是C++11 中最基本的互斥量，std::mutex 对象提供了独占所有权的特性——即不支持递归地对 std::mutex 对象上锁，而 std::recursive_lock 则可以递归地对互斥量对象上锁。\nstd::mutex 的成员函数\n\n构造函数，std::mutex不允许拷贝构造，也不允许 move 拷贝，最初产生的 mutex 对象是处于 unlocked 状态的。\nlock()，调用线程将锁住该互斥量。线程调用该函数会发生下面 3 种情况：(1). 如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁。(2). 如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。\nunlock()， 解锁，释放对互斥量的所有权。\ntry_lock()，尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞。线程调用该函数也会出现下面 3 种情况，(1). 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量。(2). 如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。\n\n下面给出一个与 std::mutex 的小例子（参考）\n1234567891011121314151617181920212223242526#include &lt;iostream&gt;       // std::cout#include &lt;thread&gt;         // std::thread#include &lt;mutex&gt;          // std::mutexvolatile int counter(0); // non-atomic counterstd::mutex mtx;           // locks access to countervoid attempt_10k_increases() &#123;    for (int i=0; i&lt;10000; ++i) &#123;        if (mtx.try_lock()) &#123;   // only increase if currently not locked:            ++counter;            mtx.unlock();        &#125;    &#125;&#125;int main (int argc, const char* argv[]) &#123;    std::thread threads[10];    for (int i=0; i&lt;10; ++i)        threads[i] = std::thread(attempt_10k_increases);    for (auto&amp; th : threads) th.join();    std::cout &lt;&lt; counter &lt;&lt; \" successful increases of the counter.\\n\";    return 0;&#125;\n输出结果：\n123$g++ -lpthread -std=c++11 -o main *.cpp$main9012 successful increases of the counter.\n\n可以看出有很多次mtx.try_lock()返回了false，并没有执行++counter操作。\n如果把mtx.try_lock()改成mtx.lock()，则必定会阻塞其他线程。\n\n输出结果2:\n123$g++ -lpthread -std=c++11 -o main *.cpp$main100000 successful increases of the counter.\nstd::recursive_mutex 介绍\nstd::recursive_mutex 与 std::mutex 一样，也是一种可以被上锁的对象，但是和 std::mutex 不同的是，std::recursive_mutex 允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，std::recursive_mutex 释放互斥量时需要调用与该锁层次深度相同次数的 unlock()，可理解为 lock() 次数和 unlock() 次数相同，除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同。\n12345678910111213141516171819202122232425#include &lt;iostream&gt;       // std::cout#include &lt;thread&gt;         // std::thread#include &lt;mutex&gt;          // std::mutexvolatile int counter(0); // non-atomic counterstd::recursive_mutex  rmtx;           // locks access to countervoid attempt_1k_increases() &#123;    for (int i=0; i&lt;10000; ++i) &#123;        rmtx.lock();           ++counter;     &#125;    for (int i=0; i&lt;10000; ++i) &#123;         counter-=2;         rmtx.unlock();    &#125;&#125;int main (int argc, const char* argv[]) &#123;    auto th = std::thread(attempt_1k_increases);    th.join();    std::cout &lt;&lt; counter &lt;&lt; \" successful increases of the counter.\\n\";    return 0;&#125;\n输出结果：\n123$g++ -lpthread -o main *.cpp$main-10000 successful increases of the counter.\nstd::time_mutex 介绍\nstd::time_mutex 比 std::mutex 多了两个成员函数，try_lock_for()，try_lock_until()。\ntry_lock_for 函数接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与 std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回 false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。\ntry_lock_until 函数则接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。\n下面的小例子说明了 std::time_mutex 的用法（参考）。\n1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;       // std::cout#include &lt;chrono&gt;         // std::chrono::milliseconds#include &lt;thread&gt;         // std::thread#include &lt;mutex&gt;          // std::timed_mutexstd::timed_mutex mtx;void fireworks() &#123;  // waiting to get a lock: each thread prints \"-\" every 200ms:  while (!mtx.try_lock_for(std::chrono::milliseconds(200))) &#123;    std::cout &lt;&lt; \"-\";  &#125;  // got a lock! - wait for 1s, then this thread prints \"*\"  std::this_thread::sleep_for(std::chrono::milliseconds(1000));  std::cout &lt;&lt; \"*\\n\";  mtx.unlock();&#125;int main ()&#123;  std::thread threads[10];  // spawn 10 threads:  for (int i=0; i&lt;10; ++i)    threads[i] = std::thread(fireworks);  for (auto&amp; th : threads) th.join();  return 0;&#125;\n输出结果：\n\n线程输出*表示该线程已经正常退出，并且释放该锁。否则将每200ms尝试获取mutex🔒，直到成功为止。\n\nstd::recursive_timed_mutex 介绍\n和 std:recursive_mutex 与 std::mutex 的关系一样，std::recursive_timed_mutex 的特性也可以从 std::timed_mutex 推导出来，感兴趣的同鞋可以自行查阅。 ;-)\nstd::lock_guard 介绍\n与 Mutex RAII 相关，方便线程对互斥量上锁。例子（参考）:\n\n1.std::lock_guard 在构造函数中进行加锁，析构函数中进行解锁。\n2.锁在多线程编程中，使用较多，因此c++11提供了lock_guard模板类；在实际编程中，我们也可以根据自己的场景编写resource_guard RAII类，避免忘掉释放资源。\n\n12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;       // std::cout#include &lt;thread&gt;         // std::thread#include &lt;mutex&gt;          // std::mutex, std::lock_guard#include &lt;stdexcept&gt;      // std::logic_errorstd::mutex mtx;void print_even (int x) &#123;    if (x%2==0) std::cout &lt;&lt; x &lt;&lt; \" is even\\n\";    else throw (std::logic_error(\"not even\"));&#125;void print_thread_id (int id) &#123;    try &#123;        // using a local lock_guard to lock mtx guarantees unlocking on destruction / exception:        std::lock_guard&lt;std::mutex&gt; lck (mtx);        print_even(id);    &#125;    catch (std::logic_error&amp;) &#123;        std::cout &lt;&lt; \"[exception caught]\\n\";    &#125;&#125;int main ()&#123;    std::thread threads[10];    // spawn 10 threads:    for (int i=0; i&lt;10; ++i)        threads[i] = std::thread(print_thread_id,i+1);    for (auto&amp; th : threads) th.join();    return 0;&#125;\n输出结果：\n123456789101112$g++ -lpthread -o main *.cpp$main[exception caught]4 is even[exception caught]2 is even[exception caught]6 is even8 is even[exception caught][exception caught]10 is even\nstd::unique_lock 介绍\n与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。例子（参考）：\n\n1.类 unique_lock 是通用互斥包装器，允许延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用。\n2.unique_lock比lock_guard使用更加灵活，功能更加强大。\n使用unique_lock需要付出更多的时间、性能成本。\n\n12345678910111213141516171819202122232425#include &lt;iostream&gt;       // std::cout#include &lt;thread&gt;         // std::thread#include &lt;mutex&gt;          // std::mutex, std::unique_lockstd::mutex mtx;           // mutex for critical sectionvoid print_block (int n, char c) &#123;    // critical section (exclusive access to std::cout signaled by lifetime of lck):    std::unique_lock&lt;std::mutex&gt; lck (mtx);    for (int i=0; i&lt;n; ++i) &#123;        std::cout &lt;&lt; c;    &#125;    std::cout &lt;&lt; '\\n';&#125;int main ()&#123;    std::thread th1 (print_block,50,'*');    std::thread th2 (print_block,50,'$');    th1.join();    th2.join();    return 0;&#125;\n输出结果：\n1234$g++ -lpthread -o main *.cpp$main**************************************************$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n好了，本文暂时讲到这里，还剩下 std::try_lock，std::lock，std::call_once 三个函数没有讲到，留在下一篇博客中讲吧 ;-)\n","thumbnail":"images/background.jpg","plink":"https://shuntan.github.io/post/Mutex介绍/"},{"title":"squid介绍及其简单配置","date":"2019-05-15T07:15:30.000Z","updated":"2019-06-26T02:42:28.427Z","content":"squid的概念\nsquid是一种用来缓存Internet数据的软件。接受来自人们需要下载的目标（object）的请求并适当的处理这些请求。也就是说，如果一个人想下载一web界面，他请求squid为他取得这个页面。squid随之连接到远程服务器并向这个页面发出请求。然后，squid显式地聚集数据到客户端机器，而且同时复制一份。当下一次有人需要同一页面时， squid可以简单的从磁盘中读到它，那样数据会立即传输到客户机上。\n\n下载地址\nsquid-cache 官网 http://www.squid-cache.org\nsquid介绍及其简单配置 https://www.cnblogs.com/cherishry/p/5706736.html\nCentOS 7安装squid代理服务器 https://blog.csdn.net/ithomer/article/details/78136993\nsquid代理的作用\n\n通过缓存的方式为用户提供Web访问加速\n对用户的Web访问进行过滤控制\n\n工作流程\n当代理服务器中有客户端需要的数据时：\na.客户端向代理服务器发送数据请求；\nb.代理服务器检查自己的数据缓存；\nc.代理服务器在缓存中找到了用户想要的数据，取出数据；\nd.代理服务器将从缓存中取得的数据返回给客户端。\n当代理服务器中没有客户端需要的数据时了：\n1.客户端向代理服务器发送数据请求；\n2.代理服务器检查自己的数据缓存；\n3.代理服务器在缓存中没有找到用户想要的数据；\n4.代理服务器向Internet 上的远端服务器发送数据请求；\n5.远端服务器响应，返回相应的数据；\n6.代理服务器取得远端服务器的数据，返回给客户端，并保留一份到自己的数据缓存中。\n\nSquid代理服务器工作在TCP/IP应用层\n\nSquid各种代理的定义\n正向代理\n标准的代理缓冲服务器\n一个标准的代理缓冲服务被用于缓存静态的网页到本地网络上的一台主机上（即代理服务器）。当被缓存的页面被第二次访问的时候，浏览器将直接从本地代理服务器那里获取请求数据而不再向原web站点请求数据。这样就节省了宝贵的网络带宽，而且提高了访问速度。但是，要想实现这种方式，必须在每一个内部主机的浏览器上明确指名代理服务器的IP地址和端口号。客户端上网时，每次都把请求发送给代理服务器处理,代理服务器根据请求确定是否连接到远程web服务器获取数据。如果在本地缓冲区有目标文件，则直接将文件传给用户即可。如果没有的话则先取回文件，先在本地保存一份缓冲，然后将文件发送给客户端浏览器。\n透明代理缓冲服务器\n透明代理缓冲服务器和标准代理服务器的功能完全相同。但是，代理操作对客户端的浏览器是透明的（即不需指明代理服务器的IP和端口）。透明代理服务器阻断网络通信，并且过滤出访问外部的HTTP（80端口）流量。如果客户端的请求在本地有缓冲则将缓冲的数据直接发给用户，如果在本地没有缓冲则向远程web服务器发出请求，其余操作和标准的代理服务器完全相同。对于linux操作系统来说，透明代理使用Iptables或者Ipchains实现。因此不需要对浏览器作任何设置，所以，透明代理对于ISP（Internet服务器提供商）特别有用。\n反向代理\n反向代理缓冲器\n反向代理是和前两种代理完全不同的一种代理服务。使用它可以降低原始WEB服务器的负载。反向代理服务器承担了对原始WEB服务器的静态页面的请求，防止原始服务器过载。它位于WEB服务器和Internet之间，处理所有对WEB服务器的请求，组织了WEB服务器和Internet的直接通信。如果互联网用户请求的页面在代理服务器上有缓冲的话，代理服务器直接将缓冲内容发送给用户。如果没有缓冲则先向WEB服务器发出请求，取回数据，本地缓存后再发给用户。这种方式通过降低了WEB服务器的请求数从而降低了WEB服务器的负载。\n正向代理与反向代理的区别\n概念\n正向代理：对于原始服务器而言，就是客户端的代言人\n反向代理：对于客户端而言，就像是原始服务器\n用途\n正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。\n反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。\n安全性\n正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。\n反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。\nSquid主要组成部分\n服务名：squid\n主程序：/usr/sbin/squid\n配置目录：/etc/squid\n主配置文件：/etc/squid/squid.conf\n监听tcp端口号：3128\n默认访问日志文件：/var/log/squid/access.log\nsquid常用配置选项\n/etc/squid/squid.conf\n123456789101112131415http_port 3128  (还可以只监听一个IP http_port 192.168.0.1:3128)cache_mem 64MB  #缓存占内存大小maximum_object_size 4096KB  #最大缓存块reply_body_max_size  1024000 allow all      #限定下载文件大小access_log /var/log/squid/access.log    #访问日志存放的地方visible_hostname    proxy.test.xom  #可见的主机名cache_dir ufs /var/spool/squid  100 16 256 #ufs:缓存数据的存储格式#/var/spool/squid    缓存目录#100：缓存目录占磁盘空间大小（M）#16：缓存空间一级子目录个数#256：缓存空间二级子目录个数cache_mgr webmaster@test.com    #定义管理员邮箱http_access deny all    #访问控制\nsquid中的访问控制\n使用访问控制特性，可以控制在访问时根据特定的时间间隔进行缓存、访问特定站点或一组站点等等。squid访问控制有两个要素：ACL元素和访问列表。访问列表可以允许或拒绝某些用户对此服务的访问。\nACL元素类型\n\nsrc：源地址（即客户机IP地址）\ndst：目标地址（即服务器IP地址）\nsrcdomain：源名称（即客户机名称）\ndstdomain：目标名称（即服务器名称）\ntime：一天中的时刻和一周内的一天\nurl_regex：URL规则表达式匹配\nurlpath_regex：URL-path规则表达式匹配，略去协议和主机名\nproxy_auth：通过外部程序进行用户验证\nmaxconn：单一IP的最大连接数\n\nACL格式\n为了使用控制功能，必须先设置ACL规则并应用。ACL声明的格式如下：\n\n注：\n\nacl_element_name 可以是任一个在ACL中定义的名称\n任何两个ACL元素不能用相同的名字\n每个ACL由列表值组成。当进行匹配检测的时候，多个值由逻辑或运算连接；换言之，即任一ACL元素的值被匹配，则这个ACL元素即被匹配。\n并不是所有ACL元素都能使用访问列表中的全部类型\n不同的ACL元素写在不同行中，squid将把他们组合在一个列表中\n\n访问条目\n我们可以使用许多不同的访问条目。下面是我们常用的几个：\n\nhttp_access:允许HTTP访问\nno_cache:定义对缓存请求的响应。\n访问列表的规则由一些类似’allow’或‘deny’的关键字构成，用以允许或拒绝向特定或一组ACL元素提供服务。\n\n\n一个访问列表可以由多条规则组成\n如果没有任何规则与访问请求匹配，默认动作将与列表中最后一条规则对应。\n一个访问条目中所有元素将用逻辑与运算连接\nhttp_access Action 声明1 AND 声明2 AND 声明 OR.\nhttp_access Action 声明3\n多个http_accesss声明间用或运算连接，但每个访问条目的元素间用与运算连接。\n列表中的规则总是遵循由上而下的顺序\n这些规则按照他们的排列顺序进行匹配检测，一旦检测到匹配的规则，匹配就立即结束。\n\nSquid.conf配置文件详解\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156#acl all src 0.0.0.0/0.0.0.0 and http_access allow all选项定义了一个访问控制列表。详细情况参见和Squid软件#携带的文档。这里的访问控制列表允许所有对代理服务的访问，因为这里该代理是加速web服务器。acl all src 0.0.0.0/0.0.0.0                 #允许所有IP访问acl manager proto http                 #manager url协议为httpacl localhost src 127.0.0.1/255.255.255.255  #允午本机IPacl to_localhost dst 127.0.0.1                 #允午目的地址为本机IPacl Safe_ports port 80                # 允许安全更新的端口为80acl CONNECT method CONNECT        #请求方法以CONNECThttp_access allow all                #允许所有人使用该代理.因为这里是代理加速web服务器http_reply_access allow all                #允许所有客户端使用该代理acl OverConnLimit maxconn 16        #限制每个IP最大允许16个连接，防止攻击http_access deny OverConnLimiticp_access deny all                        #禁止从邻居服务器缓冲内发送和接收ICP请求.miss_access allow all                #允许直接更新请求ident_lookup_access deny all                                #禁止lookup检查DNShttp_port 8080 transparent                                #指定Squid监听浏览器客户请求的端口号。hierarchy_stoplist cgi-bin ?                #用来强制某些特定的对象不被缓存，主要是处于安全的目的。acl QUERY urlpath_regex cgi-bin \\?cache deny QUERYcache_mem 1 GB        #这是一个优化选项，增加该内存值有利于缓存。应该注意的是：                     #一般来说如果系统有内存，设置该值为(n/)3M。现在是3G 所以这里1Gfqdncache_size 1024        #FQDN 高速缓存大小maximum_object_size_in_memory 2 MB        #允许最大的文件载入内存memory_replacement_policy heap LFUDA  #动态使用最小的，移出内存cachecache_replacement_policy heap LFUDA         #动态使用最小的，移出硬盘cachecache_dir ufs /home/cache 5000 32 512  #高速缓存目录 ufs 类型 使用的缓冲值最大允午1000MB空间，#32个一级目录，512个二级目录max_open_disk_fds 0                                 #允许最大打开文件数量,0 无限制minimum_object_size 1 KB                         #允午最小文件请求体大小maximum_object_size 20 MB                 #允午最大文件请求体大小cache_swap_low 90                            #最小允许使用swap 90%cache_swap_high 95                            #最多允许使用swap 95%ipcache_size 2048                                # IP 地址高速缓存大小 2Mipcache_low 90                                #最小允许ipcache使用swap 90%ipcache_high 95                                  #最大允许ipcache使用swap 90%access_log /var/log/squid/access.log squid        #定义日志存放记录cache_log /var/log/squid/cache.log squidcache_store_log none                        #禁止store日志emulate_httpd_log on        #将使Squid仿照Web服务器的格式创建访问记录。如果希望使用                                #Web访问记录分析程序，就需要设置这个参数。refresh_pattern . 0 20% 4320 override-expire override-lastmod reload-into-ims ignore-reload   #更新cache规则acl buggy_server url_regex ^http://.... http://          #只允许http的请求broken_posts allow buggy_serveracl apache rep_header Server ^Apache                 #允许apache的编码broken_vary_encoding allow apacherequest_entities off                                        #禁止非http的标分准请求，防止攻击header_access header allow all                        #允许所有的http报头relaxed_header_parser on                                #不严格分析http报头.client_lifetime 120 minute                                #最大客户连接时间 120分钟cache_mgr sky@test.com                        #指定当缓冲出现问题时向缓冲管理者发送告警信息的地址信息。cache_effective_user squid                        #这里以用户squid的身份Squid服务器cache_effective_group squidicp_port 0                       #指定Squid从邻居服务器缓冲内发送和接收ICP请求的端口号。                     #这里设置为0是因为这里配置Squid为内部Web服务器的加速器，                     #所以不需要使用邻居服务器的缓冲。0是禁用# cache_peer 设置允许更新缓存的主机，因是本机所以127.0.0.1cache_peer 127.0.0.1 parent 80 0 no-query default multicast-responder no-netdb-exchangecache_peer_domain 127.0.0.1                                 hostname_aliases 127.0.0.1error_directory /usr/share/squid/errors/Simplify_Chinese        #定义错误路径always_direct allow all                # cache丢失或不存在是允许所有请求直接转发到原始服务器ignore_unknown_nameservers on        #开反DNS查询，当域名地址不相同时候，禁止访问coredump_dir  /var/log/squid                 #定义dump的目录max_filedesc 2048                #最大打开的文件描述half_closed_clients off        #使Squid在当read不再返回数据时立即关闭客户端的连接。                                #有时read不再返回数据是由于某些客户关闭TCP的发送数据                                #而仍然保持接收数据。而Squid分辨不出TCP半关闭和完全关闭。buffered_logs on #若打开选项“buffered_logs”可以稍稍提高加速某些对日志文件的写入，该选项主要是实现优化特性。#防止天涯盗链，转嫁给百度acl tianya referer_regex -i tianyahttp_access deny tianyadeny_info  tianya#阻止baidu蜘蛛acl baidu req_header User-Agent Baiduspiderhttp_access deny baidu#限制同一IP客户端的最大连接数acl OverConnLimit maxconn 128http_access deny OverConnLimit#防止被人利用为HTTP代理，设置允许访问的IP地址acl myip dst 222.18.63.37http_access deny !myip#允许本地管理acl Manager proto cache_objectacl Localhost src 127.0.0.1 222.18.63.37http_access allow Manager Localhostcachemgr_passwd 53034338 allhttp_access deny Manager#仅仅允许80端口的代理acl all src 0.0.0.0/0.0.0.0acl Safe_ports port 80 # httphttp_access deny !Safe_portshttp_access allow all#Squid信息设置visible_hostname happy.swjtu.edu.cncache_mgr  ooopic2008@qq.com#基本设置cache_effective_user squidcache_effective_group squidtcp_recv_bufsize 65535 bytes#2.6的反向代理加速配置cache_peer 127.0.0.1 parent 80 0 no-query originserver#错误文档error_directory /usr/local/squid/share/errors/Simplify_Chinese#单台使用，不使用该功能icp_port 0hierarchy_stoplist cgi-bin ?acl QUERY urlpath_regex cgi-bin \\? .php .cgi .avi .wmv .rm .ram .mpg .mpeg .zip .execache deny QUERYacl apache rep_header Server ^Apachebroken_vary_encoding allow apacherefresh_pattern ^ftp:           1440 20%     10080refresh_pattern ^gopher:        1440 0%    1440refresh_pattern .             0    20%     4320cache_store_log nonepid_filename /usr/local/squid/var/logs/squid.pidemulate_httpd_log on\nSquid常用命令\n\n初始化在squid.conf里配置的cache目录\nsquid -z\n如果有错误提示，请检查cache目录的权限，可以更改目录权限\nchown -R squid:squid /cache目录\n对squid.conf排错，即验证squid.conf的语法和配置\nsquid -k parse\n如果在squid.conf中有语法或配置错误，这里会返回提示，若无返回，尝试启动squid\n前台启动squid，并输出启动过程\n/usr/local/squid/sbin/squid -N -d1\n如果有ready to server reques相关信息，说明squid启动成功\n然后ctrl+c ,停止squid,并以后台运行的方式启动它\n启动squid在后台运行\nsquid -s\n可以使用ps -ax | grep squid 来查看squid进程是否存在\n停止squid\nsquid -k shutdown\n重新引导修改过的squid.conf\nsquid -k reconfigure -f /XXX/squid.conf\n当squid进行配置更改后，可以使用该命令进行squid配置重载\n把squid添加到系统启动项\nvim /etc/rc.local\n/usr/local/squid/sbin/squid -s\n修改cache缓存目录的权限\nchown -R squid.squid /cache目录\ncache缓存目录根据自己的配置更改，squid用户和组是squid，squid\n修改squid日志目录的权限\nchown -R squid.squid 定义的日志文件所在目录\n这一步并不是适合每一个使用squid的用户，意为让squid有权限在该目录里进行写操作\n查看你的日志文档\nmore /usr/local/squid/var/logs/access.log | grep TCP_MEM_HIT\n该指令可以看到在squid运行过程中，有那些文件被squid缓存到内存中，并返回给访问用户。\nmore /usr/local/squid/var/logs/access.log | grep TCP_HIT\n该指令可以看到在squid运行过程中，有那些文件被squid缓存到cache目录中，并返回给访问用户。\nmore /usr/local/squid/var/logs/access.log | grep TCP_MISS\n该指令可以看到在squid运行过程中，有那些文件没有被squid缓存，而是从原始服务器获取并返回给访问用户。\n\nSquid命中率分析\n12/usr/local/squid/bin/squidclient -p 80 mgr:info/usr/local/squid/bin/squidclient -p 80 mgr:5min\n可以看到详细的性能情况,其中PORT是你的proxy的端口，5min可以是60min\n取得squid运行状态信息：\n1squidclient -p 80 mgr:info\n取得squid内存使用情况：\n1squidclient -p 80 mgr:mem\n取得squid已经缓存的列表：\n1squidclient -p 80 mgr:bjects. use it carefully,it may crash\n取得squid的磁盘使用情况：\n1squidclient -p 80 mgr:diskd\n强制更新某个url：\n1squidclient -p 80 -m PURGE http://www.xxx.com/xxx.php\n更多的请查看：squidclient-h 或者 squidclient -p 80 mgr:\n查命中率：\n1squidclient -h IP(具体侦听IP) -p 80(具体侦听端口) mgr:info\n定期清理swap.state内无效数据\n123/path/to/squid/sbin/squid -k rotate -f /path/to/squid/conf_filevi /etc/crontab0        0       *       *       *       root    /usr/local/sbin/squid -k rotate -f /usr/local/etc/squid/squid1.conf\n当squid应用运行了一段时间之后，cache_dir对应的swap.state文件就会变得越来越大，里面的无效接口数据越来越多，这可能影响squid的响应时间，因此需要使用squid清理swap.state里面的无效数据，减少swap.state的大小。\n","plink":"https://shuntan.github.io/post/squid/"},{"title":"test","date":"2019-06-21T08:42:38.000Z","updated":"2019-06-21T08:49:37.909Z","content":"","plink":"https://shuntan.github.io/about/"}]