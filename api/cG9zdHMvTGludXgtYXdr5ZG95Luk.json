{"title":"Linux--awk命令","date":"2019-09-18T12:00:37.000Z","date_formatted":{"ll":"Sep 18, 2019","L":"09/18/2019","MM-DD":"09-18"},"link":"posts/Linux-awk命令","comments":true,"tags":["Linux"],"categories":["awk"],"updated":"2019-09-19T07:25:44.596Z","content":"<h2 id=\"一：awk简介\">一：awk简介<a href=\"posts/Linux-awk命令#一：awk简介\"></a></h2><p>​        awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p>\n<p>​       awk 是一种很棒的语言，它适合文本处理和报表生成，其语法较为常见，借鉴了某些语言的一些精华，如 C 语言等。在 linux 系统日常处理工作中，发挥很重要的作用，掌握了 awk将会使你的工作变的高大上。 awk 是三剑客的老大，利剑出鞘，必会不同凡响。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"https://www.cnblogs.com/yaohong/p/9163471.html#_labelTop\" target=\"_blank\" rel=\"noopener\">回到顶部</a></p>\n<h2 id=\"二：使用方法\"><strong>二：使用方法</strong><a href=\"posts/Linux-awk命令#二：使用方法\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`awk ``<span class=\"string\">'&#123;pattern + action&#125;'</span>` `&#123;filenames&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>​        尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>\n<p>​        awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p>\n<p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>\n<p><a href=\"https://www.cnblogs.com/yaohong/p/9163471.html#_labelTop\" target=\"_blank\" rel=\"noopener\">回到顶部</a></p>\n<h2 id=\"三：awk-的原理\">三：awk 的原理<a href=\"posts/Linux-awk命令#三：awk-的原理\"></a></h2><p>通过一个简短的命令，我们来了解其工作原理。 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'&#123;print $0&#125;'</span>` `/etc/passwd``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``bin:x:<span class=\"number\">1</span>:<span class=\"number\">1</span>:bin:/bin:/sbin/nologin``.....................................................`` ` `[root@Gin scripts]# echo hhh|awk ``<span class=\"string\">'&#123;print \"hello,world\"&#125;'</span>``hello,world`` ` `[root@Gin scripts]# awk ``<span class=\"string\">'&#123;print \"hiya\"&#125;'</span>` `/etc/passwd``hiya``hiya``hiya``hiya``...............................................`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>​       你将会见到/etc/passwd 文件的内容出现在眼前。现在，解释 awk 做了些什么。调用 awk时，我们指定/etc/passwd 作为输入文件。执行 awk 时，它依次对/etc/passwd 中的每一行执行 print 命令。</p>\n<p>​       所有输出都发送到 stdout，所得到的结果与执行 cat /etc/passwd 完全相同。<br>​       现在，解释{ print }代码块。在 awk 中，花括号用于将几块代码组合到一起，这一点类似于 C 语言。在代码块中只有一条 print 命令。在 awk 中，如果只出现 print 命令，那么将打印当前行的全部内容。<br><strong>再次说明， awk 对输入文件中的每一行都执行这个脚本。</strong></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1089507/201701/1089507-20170126222420597-662074402.jpg\" alt=\"img\" class=\"article-img\"></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`$ awk -F``<span class=\"string\">\":\"</span>` `<span class=\"string\">'&#123; print $1 &#125;'</span>` `/etc/passwd``$ awk -F``<span class=\"string\">\":\"</span>` `<span class=\"string\">'&#123; print $1 $3 &#125;'</span>` `/etc/passwd``$ awk -F``<span class=\"string\">\":\"</span>` `<span class=\"string\">'&#123; print $1 \" \" $3 &#125;'</span>` `/etc/passwd``$ awk -F``<span class=\"string\">\":\"</span>` `<span class=\"string\">'&#123; print \"username: \" $1 \"\\t\\tuid:\" $3\" &#125;'</span>` `/etc/passwd`</span><br></pre></td></tr></table></div></figure>\n\n<p>   -F参数：指定分隔符，可指定一个或多个</p>\n<p>   print 后面做字符串的拼接</p>\n<p><strong>下面通过几实例来了解下awk的工作原理：</strong></p>\n<h4 id=\"实例一：只查看test-txt文件（100行）内第20到第30行的内容（企业面试）\">实例一：只查看test.txt文件（100行）内第20到第30行的内容（企业面试）<a href=\"posts/Linux-awk命令#实例一：只查看test-txt文件（100行）内第20到第30行的内容（企业面试）\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`#print $a取列#NR取行数[root@Gin scripts]# awk <span class=\"string\">'&#123;if(NR&gt;=20 &amp;&amp; NR&lt;=30) print $1&#125;'</span> test.txt  ``<span class=\"number\">20</span>``<span class=\"number\">21</span>``<span class=\"number\">22</span>``<span class=\"number\">23</span>``<span class=\"number\">24</span>``<span class=\"number\">25</span>``<span class=\"number\">26</span>``<span class=\"number\">27</span>``<span class=\"number\">28</span>``<span class=\"number\">29</span>``<span class=\"number\">30</span>`</span><br></pre></td></tr></table></div></figure>\n\n\n\n<h4 id=\"实例二：已知test-txt文件内容为：\">实例二：已知test.txt文件内容为：<a href=\"posts/Linux-awk命令#实例二：已知test-txt文件内容为：\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat test.txt``I am Poe,my qq ``is` `<span class=\"number\">33794712</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>请从该文件中过滤出’Poe’字符串与33794712，最后输出的结果为：Poe 33794712</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk -F ``<span class=\"string\">'[ ,]+'</span>` `<span class=\"string\">'&#123;print $3\" \"$7&#125;'</span>` `test.txt``Poe <span class=\"number\">33794712</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h3 id=\"BEGIN-和-END-模块\">BEGIN 和 END 模块<a href=\"posts/Linux-awk命令#BEGIN-和-END-模块\"></a></h3><p>通常，对于每个输入行， awk 都会执行每个脚本代码块一次。然而，在许多编程情况中，可能需要在 awk 开始处理输入文件中的文本之前执行初始化代码。对于这种情况， awk 允许您定义一个 BEGIN 块。</p>\n<p>因为 awk 在开始处理输入文件之前会执行 BEGIN 块，因此它是初始化 FS（字段分隔符）变量、打印页眉或初始化其它在程序中以后会引用的全局变量的极佳位置。<br>awk 还提供了另一个特殊块，叫作 END 块。 awk 在处理了输入文件中的所有行之后执行这个块。通常， END 块用于执行最终计算或打印应该出现在输出流结尾的摘要信息。</p>\n<h4 id=\"实例一：统计-etc-passwd的账户人数\">实例一：统计/etc/passwd的账户人数<a href=\"posts/Linux-awk命令#实例一：统计-etc-passwd的账户人数\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'&#123;count++;print $0;&#125; END&#123;print \"user count is \",count&#125;'</span>` `passwd``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``..............................................``user count ``is`  `<span class=\"number\">27</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN &#123;count=0;print \"[start] user count is \",count&#125; &#123;count=count+1;print $0&#125; END&#123;print \"[end] user count is \",count&#125;'</span>` `passwd``[start] user count ``is`  `<span class=\"number\">0</span>``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``...................................................................``[end] user count ``is`  `<span class=\"number\">27</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h4 id=\"实例二：统计某个文件夹下的文件占用的字节数\">实例二：统计某个文件夹下的文件占用的字节数<a href=\"posts/Linux-awk命令#实例二：统计某个文件夹下的文件占用的字节数\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# ll |awk ``<span class=\"string\">'BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print \"[end]size is \",size&#125;'</span>``[end]size ``is`  `<span class=\"number\">1489</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>如果以M为单位显示:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# ll |awk ``<span class=\"string\">'BEGIN&#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print \"[end]size is \",size/1024/1024,\"M\"&#125;'</span>`  `[end]size ``is`  `<span class=\"number\">0.00142002</span> M`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h3 id=\"awk运算符\">awk运算符<a href=\"posts/Linux-awk命令#awk运算符\"></a></h3><p><img src=\"https://images2015.cnblogs.com/blog/1089507/201701/1089507-20170126224150269-207487187.jpg\" alt=\"img\" class=\"article-img\"></p>\n<h4 id=\"awk-赋值运算符：a-5-等价于：-a-a-5-其他同类\">awk 赋值运算符：a+5;等价于： a=a+5;其他同类<a href=\"posts/Linux-awk命令#awk-赋值运算符：a-5-等价于：-a-a-5-其他同类\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=5;a+=5;print a&#125;'</span>``<span class=\"number\">10</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h4 id=\"awk逻辑运算符：\">awk逻辑运算符：<a href=\"posts/Linux-awk命令#awk逻辑运算符：\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=1;b=2;print (a&gt;2&amp;&amp;b&gt;1,a=1||b&gt;1)&#125;'</span>``<span class=\"number\">0</span> <span class=\"number\">1</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>判断表达式 a&gt;2&amp;&amp;b&gt;1为真还是为假，后面的表达式同理</p>\n<h4 id=\"awk正则运算符：\">awk正则运算符：<a href=\"posts/Linux-awk命令#awk正则运算符：\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=\"100testaa\";if(a~/100/) &#123;print \"ok\"&#125;&#125;'</span>``ok`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# echo|awk ``<span class=\"string\">'BEGIN&#123;a=\"100testaaa\"&#125;a~/test/&#123;print \"ok\"&#125;'</span>``ok`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h4 id=\"关系运算符：\">关系运算符：<a href=\"posts/Linux-awk命令#关系运算符：\"></a></h4><p>如： &gt; &lt; 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字 才转为数值比较。字符串比较：按照ascii码顺序比较。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=\"11\";if(a&gt;=9)&#123;print \"ok\"&#125;&#125;'</span>` `#无输出``[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=11;if(a&gt;=9)&#123;print \"ok\"&#125;&#125;'</span>``ok``[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a;if(a&gt;=b)&#123;print \"ok\"&#125;&#125;'</span>``ok`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h4 id=\"awk-算术运算符：\">awk 算术运算符：<a href=\"posts/Linux-awk命令#awk-算术运算符：\"></a></h4><p>说明，所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=\"b\";print a++,++a&#125;'</span>``<span class=\"number\">0</span> <span class=\"number\">2</span>``[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=\"20b4\";print a++,++a&#125;'</span>``<span class=\"number\">20</span> <span class=\"number\">22</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>这里的a++ , ++a与javascript语言一样：a++是先赋值加++；++a是先++再赋值</p>\n<h4 id=\"三目运算符\">三目运算符 ?:<a href=\"posts/Linux-awk命令#三目运算符\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=\"b\";print a==\"b\"?\"ok\":\"err\"&#125;'</span>``ok``[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;a=\"b\";print a==\"c\"?\"ok\":\"err\"&#125;'</span>``err`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h3 id=\"常用-awk-内置变量\">常用 awk 内置变量<a href=\"posts/Linux-awk命令#常用-awk-内置变量\"></a></h3><p><img src=\"https://images2015.cnblogs.com/blog/1089507/201701/1089507-20170126225731300-1873454323.jpg\" alt=\"img\" class=\"article-img\"></p>\n<p> 注：内置变量很多，参阅相关资料</p>\n<h4 id=\"字段分隔符-FS\">字段分隔符 FS<a href=\"posts/Linux-awk命令#字段分隔符-FS\"></a></h4><p>FS=”\\t” 一个或多个 Tab 分隔</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat tab.txt``ww   CC        IDD``[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;FS=\"\\t+\"&#125;&#123;print $1,$2,$3&#125;'</span>` `tab.txt``ww   CC        IDD`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>FS=”[[:space:]+]” 一个或多个空白空格，默认的 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat space.txt``we are    studing awk now!``[root@Gin scripts]# awk -F [[:space:]+] ``<span class=\"string\">'&#123;print $1,$2,$3,$4,$5&#125;'</span>` `space.txt``we are ``[root@Gin scripts]# awk -F [[:space:]+] ``<span class=\"string\">'&#123;print $1,$2&#125;'</span>` `space.txt``we are`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>FS=”[“ “:]+” 以一个或多个空格或：分隔 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat hello.txt``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``[root@Gin scripts]# awk -F [``<span class=\"string\">\" \"</span>``:]+ ``<span class=\"string\">'&#123;print $1,$2,$3&#125;'</span>` `hello.txt``root x <span class=\"number\">0</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>字段数量 NF </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat hello.txt``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``bin:x:<span class=\"number\">1</span>:<span class=\"number\">1</span>:bin:/bin:/sbin/nologin:<span class=\"number\">888</span>``[root@Gin scripts]# awk -F ``<span class=\"string\">\":\"</span>` `<span class=\"string\">'NF==8&#123;print $0&#125;'</span>` `hello.txt``bin:x:<span class=\"number\">1</span>:<span class=\"number\">1</span>:bin:/bin:/sbin/nologin:<span class=\"number\">888</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>记录数量 NR</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# ifconfig eth0|awk -F [``<span class=\"string\">\" \"</span>``:]+ ``<span class=\"string\">'NR==2&#123;print $4&#125;'</span>`  `## NR==<span class=\"number\">2</span>也就是取第<span class=\"number\">2</span>行``<span class=\"number\">192.168</span><span class=\"number\">.17</span><span class=\"number\">.129</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>RS 记录分隔符变量<br>将 FS 设置成”\\n”告诉 awk 每个字段都占据一行。通过将 RS 设置成””，还会告诉 awk每个地址记录都由空白行分隔。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat recode.txt``Jimmy the Weasel``<span class=\"number\">100</span> Pleasant Drive``San Francisco,CA <span class=\"number\">123456</span>`` ` `Big Tony``<span class=\"number\">200</span> Incognito Ave.``Suburbia,WA <span class=\"number\">64890</span>``[root@Gin scripts]# cat awk.txt``#!/bin/awk``BEGIN &#123;``        ``FS=``<span class=\"string\">\"\\n\"</span>``        ``RS=``<span class=\"string\">\"\"</span>``&#125;``&#123;``        ``print $<span class=\"number\">1</span>``<span class=\"string\">\",\"</span>``$<span class=\"number\">2</span>``<span class=\"string\">\",\"</span>``$<span class=\"number\">3</span>``&#125;``[root@Gin scripts]# awk -f awk.txt recode.txt``Jimmy the Weasel,<span class=\"number\">100</span> Pleasant Drive,San Francisco,CA <span class=\"number\">123456</span>``Big Tony,<span class=\"number\">200</span> Incognito Ave.,Suburbia,WA <span class=\"number\">64890</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>OFS 输出字段分隔符 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat hello.txt``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``bin:x:<span class=\"number\">1</span>:<span class=\"number\">1</span>:bin:/bin:/sbin/nologin:<span class=\"number\">888</span>``[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;FS=\":\"&#125;&#123;print $1\",\"$2\",\"$3&#125;'</span>` `hello.txt``root,x,<span class=\"number\">0</span>``bin,x,<span class=\"number\">1</span>``[root@Gin scripts]# awk ``<span class=\"string\">'BEGIN&#123;FS=\":\";OFS=\"#\"&#125;&#123;print $1,$2,$3&#125;'</span>` `hello.txt``root#x#<span class=\"number\">0</span>``bin#x#<span class=\"number\">1</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>ORS 输出记录分隔符 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# cat recode.txt``Jimmy the Weasel``<span class=\"number\">100</span> Pleasant Drive``San Francisco,CA <span class=\"number\">123456</span>`` ` `Big Tony``<span class=\"number\">200</span> Incognito Ave.``Suburbia,WA <span class=\"number\">64890</span>``[root@Gin scripts]# cat awk.txt``#!/bin/awk``BEGIN &#123;``        ``FS=``<span class=\"string\">\"\\n\"</span>``        ``RS=``<span class=\"string\">\"\"</span>``        ``ORS=``<span class=\"string\">\"\\n\\n\"</span>``&#125;``&#123;``        ``print $<span class=\"number\">1</span>``<span class=\"string\">\",\"</span>``$<span class=\"number\">2</span>``<span class=\"string\">\",\"</span>``$<span class=\"number\">3</span>``&#125;``[root@Gin scripts]# awk -f awk.txt recode.txt``Jimmy the Weasel,<span class=\"number\">100</span> Pleasant Drive,San Francisco,CA <span class=\"number\">123456</span>`` ` `Big Tony,<span class=\"number\">200</span> Incognito Ave.,Suburbia,WA <span class=\"number\">64890</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h3 id=\"awk-正则\">awk 正则<a href=\"posts/Linux-awk命令#awk-正则\"></a></h3><p><img src=\"https://images2015.cnblogs.com/blog/1089507/201701/1089507-20170126232437800-1355193233.jpg\" alt=\"img\" class=\"article-img\"></p>\n<h4 id=\"正则应用\">正则应用<a href=\"posts/Linux-awk命令#正则应用\"></a></h4><p>规则表达式</p>\n<p>awk ‘/REG/{action} ‘ file,/REG/为正则表达式，可以将$0 中，满足条件的记录送入到：action 进行处理</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk ``<span class=\"string\">'/root/&#123;print $0&#125;'</span>` `passwd ##匹配所有包含root的行``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``operator``:x:<span class=\"number\">11</span>:<span class=\"number\">0</span>:``operator``:/root:/sbin/nologin`` ` `[root@Gin scripts]# awk -F: ``<span class=\"string\">'$5~/root/&#123;print $0&#125;'</span>` `passwd  ## 以分号作为分隔符，匹配第<span class=\"number\">5</span>个字段是root的行``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash`` ` `[root@Gin scripts]# ifconfig eth0|awk ``<span class=\"string\">'BEGIN&#123;FS=\"[[:space:]:]+\"&#125; NR==2&#123;print $4&#125;'</span>``<span class=\"number\">192.168</span><span class=\"number\">.17</span><span class=\"number\">.129</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>布尔表达式<br>awk ‘布尔表达式{action}’ file 仅当对前面的布尔表达式求值为真时， awk 才执行代码块。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`[root@Gin scripts]# awk -F: ``<span class=\"string\">'$1==\"root\"&#123;print $0&#125;'</span>` `passwd``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash``[root@Gin scripts]# awk -F: ``<span class=\"string\">'($1==\"root\")&amp;&amp;($5==\"root\") &#123;print $0&#125;'</span>` `passwd``root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h3 id=\"awk-的-if、循环和数组\">awk 的 if、循环和数组<a href=\"posts/Linux-awk命令#awk-的-if、循环和数组\"></a></h3><h4 id=\"条件语句\">条件语句<a href=\"posts/Linux-awk命令#条件语句\"></a></h4><p>awk 提供了非常好的类似于 C 语言的 if 语句。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&#123;``        ``<span class=\"keyword\">if</span>` `($<span class=\"number\">1</span>==``<span class=\"string\">\"foo\"</span>``)&#123;``                ``<span class=\"keyword\">if</span>``($<span class=\"number\">2</span>==``<span class=\"string\">\"foo\"</span>``)&#123;``                        ``print ``<span class=\"string\">\"uno\"</span>``                ``&#125;``else``&#123;``                        ``print ``<span class=\"string\">\"one\"</span>``                ``&#125;``        ``&#125;elseif($<span class=\"number\">1</span>==``<span class=\"string\">\"bar\"</span>``)&#123;``                ``print ``<span class=\"string\">\"two\"</span>``        ``&#125;``else``&#123;``                ``print ``<span class=\"string\">\"three\"</span>``        ``&#125;``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>使用 if 语句还可以将代码： </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`! /matchme/ &#123; <span class=\"builtin-name\">print</span> <span class=\"variable\">$1</span> <span class=\"variable\">$3</span> <span class=\"variable\">$4</span> &#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>转换成：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&#123;``　　``<span class=\"keyword\">if</span>` `( $<span class=\"number\">0</span> !~ /matchme/ ) &#123;``　　　　print $<span class=\"number\">1</span> $<span class=\"number\">3</span> $<span class=\"number\">4</span>``　　&#125;``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h4 id=\"循环结构\">循环结构<a href=\"posts/Linux-awk命令#循环结构\"></a></h4><p>我们已经看到了 awk 的 while 循环结构，它等同于相应的 C 语言 while 循环。 awk 还有”do…while”循环，它在代码块结尾处对条件求值，而不像标准 while 循环那样在开始处求值。</p>\n<p>它类似于其它语言中的”repeat…until”循环。以下是一个示例：<br>do…while 示例</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&#123;``    ``count=<span class=\"number\">1</span>do &#123;``        ``print ``<span class=\"string\">\"I get printed at least once no matter what\"</span>``    ``&#125; ``while` `( count !=<span class=\"number\">1</span> )``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>与一般的 while 循环不同，由于在代码块之后对条件求值， “do…while”循环永远都至少执行一次。换句话说，当第一次遇到普通 while 循环时，如果条件为假，将永远不执行该循环。</p>\n<h4 id=\"for-循环\">for 循环<a href=\"posts/Linux-awk命令#for-循环\"></a></h4><p>awk 允许创建 for 循环，它就象 while 循环，也等同于 C 语言的 for 循环：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`for` `( initial assignment; comparison; increment ) &#123;``    ``<span class=\"keyword\">code</span> block``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>以下是一个简短示例： </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`for` `( x=<span class=\"number\">1</span>;x&lt;=<span class=\"number\">4</span>;x++ ) &#123;``    ``print ``<span class=\"string\">\"iteration\"</span>``, x``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>此段代码将打印： </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`iteration1``iteration2``iteration3``iteration4`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h4 id=\"break-和-continue\">break 和 continue<a href=\"posts/Linux-awk命令#break-和-continue\"></a></h4><p>此外，如同 C 语言一样， awk 提供了 break 和 continue 语句。使用这些语句可以更好地控制 awk 的循环结构。以下是迫切需要 break 语句的代码片断：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`while` `死循环``while` `(<span class=\"number\">1</span>) &#123;``print ``<span class=\"string\">\"forever and ever...\"</span>``&#125;``while` `死循环 <span class=\"number\">1</span> 永远代表是真，这个 ``while` `循环将永远运行下去。`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>以下是一个只执行十次的循环： </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`#break 语句示例``x=<span class=\"number\">1</span>``while``(<span class=\"number\">1</span>) &#123;``　　print ``<span class=\"string\">\"iteration\"</span>``, x``　　``<span class=\"keyword\">if</span>` `( x==<span class=\"number\">10</span> ) &#123;``　　　　``break``　　&#125;``　　x++``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>这里， break 语句用于“逃出”最深层的循环。 “break”使循环立即终止，并继续执行循环代码块后面的语句。<br>continue 语句补充了 break，其作用如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`x=<span class=\"number\">1</span>while (<span class=\"number\">1</span>) &#123;``        ``<span class=\"keyword\">if</span>` `( x==<span class=\"number\">4</span> ) &#123;``        ``x++``        ``continue``    ``&#125;``    ``print ``<span class=\"string\">\"iteration\"</span>``, x``    ``<span class=\"keyword\">if</span>` `( x&gt;<span class=\"number\">20</span> ) &#123;``        ``break``    ``&#125;``    ``x++``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>这段代码打印”iteration1”到”iteration21”， “iteration4”除外。如果迭代等于 4，则增加 x并调用 continue 语句，该语句立即使 awk 开始执行下一个循环迭代，而不执行代码块的其余部分。如同 break 一样，</p>\n<p>continue 语句适合各种 awk 迭代循环。在 for 循环主体中使用时， continue 将使循环控制变量自动增加。以下是一个等价循环：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`for` `( x=<span class=\"number\">1</span>;x&lt;=<span class=\"number\">21</span>;x++ ) &#123;``    ``<span class=\"keyword\">if</span>` `( x==<span class=\"number\">4</span> ) &#123;``        ``continue``    ``&#125;``    ``print ``<span class=\"string\">\"iteration\"</span>``, x``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>在while 循环中时，在调用 continue 之前没有必要增加 x，因为 for 循环会自动增加 x。 </p>\n<h4 id=\"数组\">数组<a href=\"posts/Linux-awk命令#数组\"></a></h4><p>AWK 中的数组都是关联数组,数字索引也会转变为字符串索引 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&#123;``    ``cities[<span class=\"number\">1</span>]=”beijing”``    ``cities[<span class=\"number\">2</span>]=”shanghai”``    ``cities[“three”]=”guangzhou”``    ``for``( c ``<span class=\"keyword\">in</span>` `cities) &#123;``        ``print cities[c]``    ``&#125;``    ``print cities[<span class=\"number\">1</span>]``    ``print cities[“<span class=\"number\">1</span>”]``    ``print cities[“three”]``&#125;`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>for…in 输出，因为数组是关联数组，默认是无序的。所以通过 for…in 得到是无序的数组。如果需要得到有序数组，需要通过下标获得。</p>\n<h4 id=\"数组的典型应用\">数组的典型应用<a href=\"posts/Linux-awk命令#数组的典型应用\"></a></h4><p>用 awk 中查看服务器连接状态并汇总 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`netstat -an|awk ``<span class=\"string\">'/^tcp/&#123;++s[$NF]&#125;END&#123;for(a in s)print a,s[a]&#125;'</span>``ESTABLISHED <span class=\"number\">1</span>``LISTEN <span class=\"number\">20</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>统计 web 日志访问流量，要求输出访问次数，请求页面或图片，每个请求的总大小，总访问流量的大小汇总</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`awk '&#123;a[$7]+=$10;++b[$7];total+=$10&#125;<span class=\"keyword\">END</span>&#123;<span class=\"symbol\">``</span><span class=\"keyword\">for</span><span class=\"symbol\">``</span>(x <span class=\"symbol\">``</span><span class=\"keyword\">in</span><span class=\"symbol\">` `</span>a)print b[x],x,a[x]|<span class=\"symbol\">``</span><span class=\"string\">\"sort -rn -k1\"</span><span class=\"symbol\">``</span>;print``\"total size is :\"``total&#125;' /app/log/access_log``total size ``is` `:172230``21 /icons/poweredby.png 83076``14 / 70546``8 /icons/apache_pb.gif 18608``a[$7]+=$10 表示以第 <span class=\"number\">7</span> 列为下标的数组（ $<span class=\"number\">10</span> 列为$<span class=\"number\">7</span> 列的大小），把他们大小累加得到<span class=\"symbol\">``</span>$<span class=\"number\">7</span> 每次访问的大小，后面的 <span class=\"symbol\">``</span><span class=\"keyword\">for</span><span class=\"symbol\">` `</span>循环有个取巧的地方， a 和 b 数组的下标相同，所以一<span class=\"symbol\">``</span>条 <span class=\"symbol\">``</span><span class=\"keyword\">for</span><span class=\"symbol\">` `</span>语句足矣<span class=\"symbol\">`</span></span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<h3 id=\"常用字符串函数\">常用字符串函数<a href=\"posts/Linux-awk命令#常用字符串函数\"></a></h3><p><img src=\"https://images2015.cnblogs.com/blog/1089507/201701/1089507-20170126235509019-257728577.jpg\" alt=\"img\" class=\"article-img\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1089507/201701/1089507-20170126235518706-915272948.jpg\" alt=\"img\" class=\"article-img\"></p>\n<h4 id=\"字符串函数的应用\">字符串函数的应用<a href=\"posts/Linux-awk命令#字符串函数的应用\"></a></h4><p>替换 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`awk ``<span class=\"string\">'BEGIN&#123;info=\"this is a test2010test!\";gsub(/[0-9]+/,\"!\",info);print info&#125;'</span>` `this` `is` `a test!test!``在 info 中查找满足正则表达式， /[<span class=\"number\">0</span><span class=\"number\">-9</span>]+/ 用”!”替换，并且替换后的值，赋值给 info 未``给 info 值，默认是$<span class=\"number\">0</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>查找 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`awk ``<span class=\"string\">'BEGIN&#123;info=\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";&#125;'</span>``ok #未找到，返回 <span class=\"number\">0</span>`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>匹配查找 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`awk ``<span class=\"string\">'BEGIN&#123;info=\"this is a test2010test!\";print match(info,/[0-9]+/)?\"ok\":\"no found\";&#125;'</span>``ok #如果查找到数字则匹配成功返回 ok，否则失败，返回未找到`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>截取 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`awk ``<span class=\"string\">'BEGIN&#123;info=\"this is a test2010test!\";print substr(info,4,10);&#125;'</span>``s ``is` `a tes #从第 <span class=\"number\">4</span> 个 字符开始，截取 <span class=\"number\">10</span> 个长度字符串`</span><br></pre></td></tr></table></div></figure>\n\n<p>　　</p>\n<p>分割 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`awk ``<span class=\"string\">'BEGIN&#123;info=\"this is a test\";split(info,tA,\" \");print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;'</span>` `<span class=\"number\">4</span>``<span class=\"number\">4</span> test <span class=\"number\">1</span> ``this` `<span class=\"number\">2</span> ``is` `<span class=\"number\">3</span> a``#分割 info,动态创建数组 tA,awk for …<span class=\"keyword\">in</span> 循环，是一个无序的循环。 并不是从数组下标``<span class=\"number\">1</span>…n 开始`</span><br></pre></td></tr></table></div></figure>","prev":{"title":"new和malloc的区别","link":"posts/new和malloc的区别"},"next":{"title":"编译器架构的王者LLVM——使用JIT引擎","link":"posts/编译器架构的王者LLVM——使用JIT引擎"},"plink":"https://shuntan.github.io/posts/Linux-awk命令/","toc":[{"title":"一：awk简介","id":"一：awk简介","index":"1"},{"title":"<strong>二：使用方法</strong>","id":"二：使用方法","index":"2"},{"title":"三：awk 的原理","id":"三：awk-的原理","index":"3","children":[{"title":"BEGIN 和 END 模块","id":"BEGIN-和-END-模块","index":"3.1","children":[{"title":"实例一：统计/etc/passwd的账户人数","id":"实例一：统计-etc-passwd的账户人数","index":"3.1.1"},{"title":"实例二：统计某个文件夹下的文件占用的字节数","id":"实例二：统计某个文件夹下的文件占用的字节数","index":"3.1.2"}]},{"title":"awk运算符","id":"awk运算符","index":"3.2","children":[{"title":"awk 赋值运算符：a+5;等价于： a=a+5;其他同类","id":"awk-赋值运算符：a-5-等价于：-a-a-5-其他同类","index":"3.2.1"},{"title":"awk逻辑运算符：","id":"awk逻辑运算符：","index":"3.2.2"},{"title":"awk正则运算符：","id":"awk正则运算符：","index":"3.2.3"},{"title":"关系运算符：","id":"关系运算符：","index":"3.2.4"},{"title":"awk 算术运算符：","id":"awk-算术运算符：","index":"3.2.5"},{"title":"三目运算符 ?:","id":"三目运算符","index":"3.2.6"}]},{"title":"常用 awk 内置变量","id":"常用-awk-内置变量","index":"3.3","children":[{"title":"字段分隔符 FS","id":"字段分隔符-FS","index":"3.3.1"}]},{"title":"awk 正则","id":"awk-正则","index":"3.4","children":[{"title":"正则应用","id":"正则应用","index":"3.4.1"}]},{"title":"awk 的 if、循环和数组","id":"awk-的-if、循环和数组","index":"3.5","children":[{"title":"条件语句","id":"条件语句","index":"3.5.1"},{"title":"循环结构","id":"循环结构","index":"3.5.2"},{"title":"for 循环","id":"for-循环","index":"3.5.3"},{"title":"break 和 continue","id":"break-和-continue","index":"3.5.4"},{"title":"数组","id":"数组","index":"3.5.5"},{"title":"数组的典型应用","id":"数组的典型应用","index":"3.5.6"}]},{"title":"常用字符串函数","id":"常用字符串函数","index":"3.6","children":[{"title":"字符串函数的应用","id":"字符串函数的应用","index":"3.6.1"}]}]}],"reward":true,"copyright":{"author":"Shawntan","link":"<a href=\"https://shuntan.github.io/posts/Linux-awk命令/\" title=\"Linux--awk命令\">https://shuntan.github.io/posts/Linux-awk命令/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"September 18, 2019","updated":"September 19, 2019"}}