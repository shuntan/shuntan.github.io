{"per_page":10,"total":3,"current":2,"data":[{"title":"Mutex介绍","date":"2019-06-14T03:00:47.000Z","date_formatted":{"ll":"Jun 14, 2019","L":"06/14/2019","MM-DD":"06-14"},"thumbnail":"/posts/Mutex介绍/mutex.png","excerpt":"<p>Mutex 又称互斥量，C++ 11中与 Mutex 相关的类（包括锁类型）和函数都声明在 <mutex> 头文件中，所以如果你需要使用 std::mutex，就必须包含 <mutex> 头文件。</p>","link":"posts/Mutex介绍","tags":["C++"],"categories":["C++"]},{"title":"C++之Lambda研究","date":"2019-06-03T12:20:52.000Z","date_formatted":{"ll":"Jun 3, 2019","L":"06/03/2019","MM-DD":"06-03"},"thumbnail":"/posts/Lambda/lambda.png","excerpt":"<h1 id=\"1. 前言\">1. 前言<a title=\"#1. 前言\" href=\"#1. 前言\"></a></h1>\n<p>本文代码测试环境为“GCC-9.1.0”，有关编译器的安装请参考《<a href=\"https://blog.csdn.net/Aquester/article/details/89735466\" target=\"_blank\">安装GCC-8.3.0及其依赖</a>》，适用于“GCC-9.1.0”。</p>\n<p>本文试图揭露Lambda背后一面，以方便更好的理解和掌握Lambda。Lambda代码段实际为一个编译器生成的类的“operator ()”函数，编译器会为每一个Lambda函数生成一个匿名的类（在C++中，类和结构体实际一样，无本质区别，除了默认的访问控制）。</p>\n<p>对Lambda的最简单理解，是将它看作一个匿名类（或结构体），实际上也确实如此，编译器把Lambda编译成了匿名类。</p>","link":"posts/Lambda","tags":["C++"],"categories":["C++"]},{"title":"C++ 模板偏特化－来自STL的思考","date":"2019-05-31T06:29:52.000Z","date_formatted":{"ll":"May 31, 2019","L":"05/31/2019","MM-DD":"05-31"},"thumbnail":"/posts/模板特化/github-badge.png","excerpt":"<p>之前学习STL时接触过一段时间的模板，模板是C++泛型编程编程的基础<br>\nSTL从头到尾都是模板泛型编程，我觉得用的最巧妙的就是在traits萃取技巧时用到的模板偏特化</p>\n<hr>\n<ul>\n<li>先简要回顾一下模板吧，模板主要分为函数模板与类模板</li>\n</ul>\n<h2 id=\"函数模板\">函数模板<a title=\"#函数模板\" href=\"#函数模板\"></a></h2>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">template&lt;<span class=\"keyword\">class</span> <span class=\"symbol\">T</span>&gt;</span><br><span class=\"line\"><span class=\"symbol\">T</span> <span class=\"symbol\">add</span>(<span class=\"symbol\">T</span> <span class=\"symbol\">a, <span class=\"symbol\">T</span></span> <span class=\"symbol\">b</span>) &#123; <span class=\"keyword\">return</span> a + b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; add(a + b) &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"posts/模板特化","tags":["C++"],"categories":["C++"]},{"title":"C++中的万能引用和完美转发","date":"2019-05-29T02:05:19.000Z","date_formatted":{"ll":"May 29, 2019","L":"05/29/2019","MM-DD":"05-29"},"thumbnail":"/posts/完美转发/apple.png","excerpt":"<h2 id=\"c++中的万能引用和完美转发\">C++中的万能引用和完美转发<a title=\"#c++中的万能引用和完美转发\" href=\"#c++中的万能引用和完美转发\"></a></h2>\n<ul>\n<li>阅读这篇博文需要了解C<ins>中的左值（lvalue）和右值（rvalue）的概念，详情参见我的另外一篇博文：C</ins>移动语义及拷贝优化</li>\n<li>万能引用和完美转发多涉及到模板的使用，如若不是自己写模板，则可不用关心</li>\n</ul>","link":"posts/完美转发","tags":["C++"],"categories":["C++"]},{"title":"从4行代码看右值引用","date":"2019-05-23T06:50:40.000Z","date_formatted":{"ll":"May 23, 2019","L":"05/23/2019","MM-DD":"05-23"},"thumbnail":"/posts/右值引用/app-launch.png","excerpt":"<h2 id=\"概述\">概述<a title=\"#概述\" href=\"#概述\"></a></h2>\n<p>右值引用的概念有些读者可能会感到陌生，其实他和C<ins>98/03中的左值引用有些类似，例如，c</ins>98/03中的左值引用是这样的：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span>&amp; j = i;</span><br></pre></td></tr></table></figure>\n<p>这里的int&amp;是对左值进行绑定（但是int&amp;却不能绑定右值），相应的，对右值进行绑定的引用就是右值引用，他的语法是这样的A&amp;&amp;，通过双引号来表示绑定类型为A的右值。通过&amp;&amp;我们就可以很方便的绑定右值了，比如我们可以这样绑定一个右值：</p>","link":"posts/右值引用","tags":["C++"],"categories":["C++"]},{"title":"squid介绍及其简单配置","date":"2019-05-15T07:15:30.000Z","date_formatted":{"ll":"May 15, 2019","L":"05/15/2019","MM-DD":"05-15"},"thumbnail":"/posts/squid/squid.png","excerpt":"<h1 id=\"squid的概念\">squid的概念<a title=\"#squid的概念\" href=\"#squid的概念\"></a></h1>\n<p>squid是一种用来缓存Internet数据的软件。接受来自人们需要下载的目标（object）的请求并适当的处理这些请求。也就是说，如果一个人想下载一web界面，他请求squid为他取得这个页面。squid随之连接到远程服务器并向这个页面发出请求。然后，squid显式地聚集数据到客户端机器，而且同时复制一份。当下一次有人需要同一页面时， squid可以简单的从磁盘中读到它，那样数据会立即传输到客户机上。</p>","link":"posts/squid","tags":["proxy","squid"],"categories":["Linux"]},{"title":"科学上网：用 VPS 搭建 shadowsocks 服务器","date":"2019-05-15T06:38:46.000Z","date_formatted":{"ll":"May 15, 2019","L":"05/15/2019","MM-DD":"05-15"},"thumbnail":"/posts/shadowsocks/shadowsocks.png","excerpt":"<h2 id=\"shadowsocks-简介\">shadowsocks 简介<a title=\"#shadowsocks-简介\" href=\"#shadowsocks-简介\"></a></h2>\n<p>shadowsocks 是一款自定义协议的代理软件，由于其流量特征不明显，（直到不久前）一直可以稳定提供上网代理。</p>\n<p>shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。</p>\n<p>因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。</p>","link":"posts/shadowsocks","tags":["VPS","shadowsocks"],"categories":["Linux"]},{"title":"Tag Plugins","date":"2019-05-10T04:35:58.000Z","date_formatted":{"ll":"May 10, 2019","L":"05/10/2019","MM-DD":"05-10"},"excerpt":"<div class=\"note info\">\n            <h3 id=\"faq\">FAQ<a title=\"#faq\" href=\"#faq\"></a></h3><p><strong>Welcome</strong> to <a href=\"https://theme-next.org/docs/tag-plugins/\" target=\"_blank\">tag-plugins</a></p>\n          </div>\n<p>Tag Plugin is a way to make special style contents supported by Hexo. For example, we cannot show a image with custom size in standard Markdown. And then we can use tag plugins to solve it. <a href=\"https://hexo.io/docs/tag-plugins\" target=\"_blank\">Hexo has a lot of tags</a> which can help user. And Hexo also have interfaces to themes which make themes able to create their own tags. Following tags is provided by NexT:</p>","link":"posts/Tag Plugins","tags":["Hexo","Next"],"categories":["Hexo"]},{"title":"《辐射4》二次元萌妹MOD","date":"2019-05-06T15:03:34.000Z","date_formatted":{"ll":"May 6, 2019","L":"05/06/2019","MM-DD":"05-06"},"thumbnail":"/posts/《辐射4》二次元萌妹MOD/fallout.png","excerpt":"<h3 id=\"《辐射4》二次元萌妹mod\">《辐射4》二次元萌妹MOD<a title=\"#《辐射4》二次元萌妹mod\" href=\"#《辐射4》二次元萌妹mod\"></a></h3>\n<ul>\n<li>补丁类型：游戏MOD</li>\n<li>整理时间：2019-05-05</li>\n<li>大小：18.73MB</li>\n<li>补丁制作：hiyokomod</li>\n<li>补丁语言：多国</li>\n<li>版本：v1.0</li>\n</ul>\n<p><a href=\"http://id.ttz9.cn/thn/%E3%80%8A%E8%BE%90%E5%B0%844%E3%80%8B%E4%BA%8C%E6%AC%A1%E5%85%83%E8%90%8C%E5%A6%B9MOD_id371@371_2138610\" target=\"_blank\">download</a></p>\n<blockquote><p>由N网作者“hiyokomod”制作的一款人物外观替换美化mod“<strong>二次元萌妹MOD</strong>”，<br>\n将游戏中将游戏中多位女性NPC外观修改为二次元美少女，非常精致的面部建模和可修改项，<br>\n带给每一个老冰棍！喜欢这些萌妹子就来3DM下载体验吧！</p>\n</blockquote>","link":"posts/《辐射4》二次元萌妹MOD","tags":["Games","PC"],"categories":["Mod"]},{"title":"给hexo博客next主题添加背景音乐","date":"2019-05-06T13:11:05.000Z","date_formatted":{"ll":"May 6, 2019","L":"05/06/2019","MM-DD":"05-06"},"excerpt":"<ul>\n<li>请访问我的个人博客 <a href=\"//blog.sourcod.com\" target=\"_blank\">sourcod</a></li>\n</ul>\n<blockquote>\n<p>我的hexo博客使用的是next主题所有次教程在next主题上修改。</p>\n</blockquote>\n<h3 id=\"修改-themes/next/layout/_macro/sidebar.swig-文件\">修改 <code>themes/next/layout/_macro/sidebar.swig</code> 文件<a title=\"#修改-themes/next/layout/_macro/sidebar.swig-文件\" href=\"#修改-themes/next/layout/_macro/sidebar.swig-文件\"></a></h3>\n<p>添加音乐播放器内容</p>\n<p><img src=\"http://sourcod.oss-cn-beijing.aliyuncs.com/hexo/91fc7624571cb9276c6338b1c9913fa3.png\" alt=\"sidebar\" class=\"φcx\"></p>","link":"posts/给hexo博客next主题添加背景音乐","tags":["hexo"],"categories":["Hexo教程"]}]}