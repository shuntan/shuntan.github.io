{"title":"Mutex介绍","date":"2019-06-14T03:00:47.000Z","date_formatted":{"ll":"Jun 14, 2019","L":"06/14/2019","MM-DD":"06-14"},"thumbnail":"/posts/Mutex介绍/mutex.png","link":"posts/Mutex介绍","comments":true,"tags":["C++"],"categories":["C++"],"updated":"2020-04-22T07:13:19.836Z","content":"<p>Mutex 又称互斥量，C++ 11中与 Mutex 相关的类（包括锁类型）和函数都声明在 <mutex> 头文件中，所以如果你需要使用 std::mutex，就必须包含 <mutex> 头文件。</p>\n<a id=\"more\"></a>\n<h3 id=\"&lt;mutex&gt;-头文件介绍\"><mutex> 头文件介绍<a title=\"#&lt;mutex&gt;-头文件介绍\" href=\"#&lt;mutex&gt;-头文件介绍\"></a></h3>\n<h4 id=\"mutex-系列类(四种)\">Mutex 系列类(四种)<a title=\"#mutex-系列类(四种)\" href=\"#mutex-系列类(四种)\"></a></h4>\n<ul>\n<li>\n<p>std::mutex，最基本的 Mutex 类。</p>\n</li>\n<li>\n<p>std::recursive_mutex，递归 Mutex 类。</p>\n</li>\n<li>\n<p>std::time_mutex，定时 Mutex 类。</p>\n</li>\n<li>\n<p>std::recursive_timed_mutex，定时递归 Mutex 类。</p>\n</li>\n</ul>\n<h4 id=\"lock-类（两种）\">Lock 类（两种）<a title=\"#lock-类（两种）\" href=\"#lock-类（两种）\"></a></h4>\n<ul>\n<li>std::lock_guard，与 Mutex RAII 相关，方便线程对互斥量上锁。</li>\n<li>std::unique_lock，与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。</li>\n</ul>\n<h4 id=\"其他类型\">其他类型<a title=\"#其他类型\" href=\"#其他类型\"></a></h4>\n<ul>\n<li>std::once_flag</li>\n<li>std::adopt_lock_t</li>\n<li>std::defer_lock_t</li>\n<li>std::try_to_lock_t</li>\n</ul>\n<h4 id=\"函数\">函数<a title=\"#函数\" href=\"#函数\"></a></h4>\n<ul>\n<li>std::try_lock，尝试同时对多个互斥量上锁。</li>\n<li>std::lock，可以同时对多个互斥量上锁。</li>\n<li>std::call_once，如果多个线程需要同时调用某个函数，call_once 可以保证多个线程对该函数只调用一次。</li>\n</ul>\n<h3 id=\"std::mutex-介绍\">std::mutex 介绍<a title=\"#std::mutex-介绍\" href=\"#std::mutex-介绍\"></a></h3>\n<p>下面以 std::mutex 为例介绍 C++11 中的互斥量用法。</p>\n<p>std::mutex 是C++11 中最基本的互斥量，std::mutex 对象提供了独占所有权的特性——即不支持递归地对 std::mutex 对象上锁，而 std::recursive_lock 则可以递归地对互斥量对象上锁。</p>\n<h4 id=\"std::mutex-的成员函数\">std::mutex 的成员函数<a title=\"#std::mutex-的成员函数\" href=\"#std::mutex-的成员函数\"></a></h4>\n<ul>\n<li>构造函数，std::mutex不允许拷贝构造，也不允许 move 拷贝，最初产生的 mutex 对象是处于 unlocked 状态的。</li>\n<li>lock()，调用线程将锁住该互斥量。线程调用该函数会发生下面 3 种情况：(1). 如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁。(2). 如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</li>\n<li>unlock()， 解锁，释放对互斥量的所有权。</li>\n<li>try_lock()，尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞。线程调用该函数也会出现下面 3 种情况，(1). 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量。(2). 如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</li>\n</ul>\n<p>下面给出一个与 std::mutex 的小例子（<a href=\"http://www.cplusplus.com/reference/mutex/mutex/try_lock/\" target=\"_blank\">参考</a>）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;       // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;         // std::thread</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;          // std::mutex</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> <span class=\"title\">counter</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>; <span class=\"comment\">// non-atomic counter</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex mtx;           <span class=\"comment\">// locks access to counter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attempt_10k_increases</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10000</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mtx.try_lock()) &#123;   <span class=\"comment\">// only increase if currently not locked:</span></span><br><span class=\"line\">            ++counter;</span><br><span class=\"line\">            mtx.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread threads[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">        threads[i] = <span class=\"built_in\">std</span>::thread(attempt_10k_increases);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; th : threads) th.join();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; counter &lt;&lt; <span class=\"string\">\" successful increases of the counter.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$g++ -lpthread -<span class=\"built_in\">std</span>=c++<span class=\"number\">11</span> -o main *.cpp</span><br><span class=\"line\">$main</span><br><span class=\"line\"><span class=\"number\">9012</span> successful increases of the counter.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以看出有很多次mtx.try_lock()返回了false，并没有执行++counter操作。</p>\n<p>如果把mtx.try_lock()改成mtx.lock()，则必定会阻塞其他线程。</p>\n</blockquote>\n<p>输出结果2:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$g++ -lpthread -<span class=\"built_in\">std</span>=c++<span class=\"number\">11</span> -o main *.cpp</span><br><span class=\"line\">$main</span><br><span class=\"line\"><span class=\"number\">100000</span> successful increases of the counter.</span><br></pre></td></tr></table></figure>\n<h3 id=\"std::recursive_mutex-介绍\">std::recursive_mutex 介绍<a title=\"#std::recursive_mutex-介绍\" href=\"#std::recursive_mutex-介绍\"></a></h3>\n<p>std::recursive_mutex 与 std::mutex 一样，也是一种可以被上锁的对象，但是和 std::mutex 不同的是，std::recursive_mutex 允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，std::recursive_mutex 释放互斥量时需要调用与该锁层次深度相同次数的 unlock()，可理解为 lock() 次数和 unlock() 次数相同，除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;       // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;         // std::thread</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;          // std::mutex</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> <span class=\"title\">counter</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>; <span class=\"comment\">// non-atomic counter</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::recursive_mutex  rmtx;           <span class=\"comment\">// locks access to counter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attempt_1k_increases</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10000</span>; ++i) &#123;</span><br><span class=\"line\">        rmtx.lock();   </span><br><span class=\"line\">        ++counter; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10000</span>; ++i) &#123; </span><br><span class=\"line\">        counter-=<span class=\"number\">2</span>; </span><br><span class=\"line\">        rmtx.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> th = <span class=\"built_in\">std</span>::thread(attempt_1k_increases);</span><br><span class=\"line\">    th.join();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; counter &lt;&lt; <span class=\"string\">\" successful increases of the counter.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$g++ -lpthread -o main *.cpp</span><br><span class=\"line\">$main</span><br><span class=\"line\"><span class=\"number\">-10000</span> successful increases of the counter.</span><br></pre></td></tr></table></figure>\n<h3 id=\"std::time_mutex-介绍\">std::time_mutex 介绍<a title=\"#std::time_mutex-介绍\" href=\"#std::time_mutex-介绍\"></a></h3>\n<p>std::time_mutex 比 std::mutex 多了两个成员函数，try_lock_for()，try_lock_until()。</p>\n<p>try_lock_for 函数接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与 std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回 false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。</p>\n<p>try_lock_until 函数则接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。</p>\n<p>下面的小例子说明了 std::time_mutex 的用法（<a href=\"http://www.cplusplus.com/reference/mutex/timed_mutex/try_lock_for/\" target=\"_blank\">参考</a>）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;       // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;         // std::chrono::milliseconds</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;         // std::thread</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;          // std::timed_mutex</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::timed_mutex mtx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fireworks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// waiting to get a lock: each thread prints \"-\" every 200ms:</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!mtx.try_lock_for(<span class=\"built_in\">std</span>::chrono::milliseconds(<span class=\"number\">200</span>))) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// got a lock! - wait for 1s, then this thread prints \"*\"</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::milliseconds(<span class=\"number\">1000</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"*\\n\"</span>;</span><br><span class=\"line\">  mtx.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread threads[<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"comment\">// spawn 10 threads:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    threads[i] = <span class=\"built_in\">std</span>::thread(fireworks);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; th : threads) th.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<blockquote>\n<p>线程输出*表示该线程已经正常退出，并且释放该锁。否则将每200ms尝试获取mutex🔒，直到成功为止。</p>\n</blockquote>\n<h3 id=\"std::recursive_timed_mutex-介绍\">std::recursive_timed_mutex 介绍<a title=\"#std::recursive_timed_mutex-介绍\" href=\"#std::recursive_timed_mutex-介绍\"></a></h3>\n<p>和 std:recursive_mutex 与 std::mutex 的关系一样，std::recursive_timed_mutex 的特性也可以从 std::timed_mutex 推导出来，感兴趣的同鞋可以自行查阅。 ;-)</p>\n<h3 id=\"std::lock_guard-介绍\">std::lock_guard 介绍<a title=\"#std::lock_guard-介绍\" href=\"#std::lock_guard-介绍\"></a></h3>\n<p>与 Mutex RAII 相关，方便线程对互斥量上锁。例子（<a href=\"http://www.cplusplus.com/reference/mutex/lock_guard/\" target=\"_blank\">参考</a>）:</p>\n<ul>\n<li>1.std::lock_guard 在构造函数中进行加锁，析构函数中进行解锁。</li>\n<li>2.锁在多线程编程中，使用较多，因此c++11提供了lock_guard模板类；在实际编程中，我们也可以根据自己的场景编写<code>resource_guard</code> RAII类，避免忘掉释放资源。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;       // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;         // std::thread</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;          // std::mutex, std::lock_guard</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdexcept&gt;      // std::logic_error</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex mtx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_even</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x%<span class=\"number\">2</span>==<span class=\"number\">0</span>) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"string\">\" is even\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> (<span class=\"built_in\">std</span>::logic_error(<span class=\"string\">\"not even\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_thread_id</span> <span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// using a local lock_guard to lock mtx guarantees unlocking on destruction / exception:</span></span><br><span class=\"line\">        <span class=\"built_in\">std</span>::lock_guard&lt;<span class=\"built_in\">std</span>::mutex&gt; lck (mtx);</span><br><span class=\"line\">        print_even(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (<span class=\"built_in\">std</span>::logic_error&amp;) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[exception caught]\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread threads[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"comment\">// spawn 10 threads:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">        threads[i] = <span class=\"built_in\">std</span>::thread(print_thread_id,i+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; th : threads) th.join();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$g++ -lpthread -o main *.cpp</span><br><span class=\"line\">$main</span><br><span class=\"line\">[exception caught]</span><br><span class=\"line\"><span class=\"number\">4</span> is even</span><br><span class=\"line\">[exception caught]</span><br><span class=\"line\"><span class=\"number\">2</span> is even</span><br><span class=\"line\">[exception caught]</span><br><span class=\"line\"><span class=\"number\">6</span> is even</span><br><span class=\"line\"><span class=\"number\">8</span> is even</span><br><span class=\"line\">[exception caught]</span><br><span class=\"line\">[exception caught]</span><br><span class=\"line\"><span class=\"number\">10</span> is even</span><br></pre></td></tr></table></figure>\n<h3 id=\"std::unique_lock-介绍\">std::unique_lock 介绍<a title=\"#std::unique_lock-介绍\" href=\"#std::unique_lock-介绍\"></a></h3>\n<p>与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。例子（<a href=\"http://www.cplusplus.com/reference/mutex/unique_lock/\" target=\"_blank\">参考</a>）：</p>\n<ul>\n<li>1.类 unique_lock 是通用互斥包装器，允许<code>延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用</code>。</li>\n<li>2.unique_lock比lock_guard使用更加灵活，功能更加强大。<br>\n使用unique_lock需要付出更多的时间、性能成本。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;       // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;         // std::thread</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;          // std::mutex, std::unique_lock</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex mtx;           <span class=\"comment\">// mutex for critical section</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_block</span> <span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// critical section (exclusive access to std::cout signaled by lifetime of lck):</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::unique_lock&lt;<span class=\"built_in\">std</span>::mutex&gt; lck (mtx);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">th1</span> <span class=\"params\">(print_block,<span class=\"number\">50</span>,<span class=\"string\">'*'</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">th2</span> <span class=\"params\">(print_block,<span class=\"number\">50</span>,<span class=\"string\">'$'</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    th1.join();</span><br><span class=\"line\">    th2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$g++ -lpthread -o main *.cpp</span><br><span class=\"line\">$main</span><br><span class=\"line\">**************************************************</span><br><span class=\"line\">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br></pre></td></tr></table></figure>\n<p>好了，本文暂时讲到这里，还剩下 std::try_lock，std::lock，std::call_once 三个函数没有讲到，留在下一篇博客中讲吧 ;-)</p>\n","prev":{"title":"C++中优雅的异步操作","link":"posts/C++中优雅的异步操作"},"next":{"title":"C++之Lambda研究","link":"posts/Lambda"},"plink":"https://shuntan.github.io/posts/Mutex介绍/","toc":[{"id":"&lt;mutex&gt;-头文件介绍","title":" 头文件介绍","index":"1"},{"id":"std::mutex-介绍","title":"std::mutex 介绍","index":"2"},{"id":"std::recursive_mutex-介绍","title":"std::recursive_mutex 介绍","index":"3"},{"id":"std::time_mutex-介绍","title":"std::time_mutex 介绍","index":"4"},{"id":"std::recursive_timed_mutex-介绍","title":"std::recursive_timed_mutex 介绍","index":"5"},{"id":"std::lock_guard-介绍","title":"std::lock_guard 介绍","index":"6"},{"id":"std::unique_lock-介绍","title":"std::unique_lock 介绍","index":"7"}],"reward":true,"copyright":{"author":"Shawntan","link":"<a href=\"https://shuntan.github.io/posts/Mutex介绍/\" title=\"Mutex介绍\">https://shuntan.github.io/posts/Mutex介绍/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"June 14, 2019","updated":"April 22, 2020"}}