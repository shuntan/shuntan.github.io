{"title":"模版元编程应用","date":"2019-06-19T02:34:15.000Z","link":"posts/模版元编程应用","comments":true,"tags":["C++"],"categories":["C++"],"updated":"2019-07-14T01:22:40.191Z","content":"<h3 id=\"1-概述\">1.概述<a href=\"posts/模版元编程应用#1-概述\"></a></h3><p>　　关于C++11模板元的基本用法和常用技巧，在常规编程中可能很少遇到，那么C++11模版元编程用来解决什么实际问题呢，在实际工程中又该如何应用呢？本文将侧重介绍C++11模板的一些具体应用，向读者展示模版元编程的具体应用。</p>\n<p>　　我们将展示如何通过C++11模版元来实现function_traits、Vairant类型和泛型bind绑定器。function_traits侧重于如何萃取可调用对象的一些元信息，Variant则是一种能接受多种类型数据的“万能”类型，bind则是一个泛化的绑定器，下面来看看这些具体的例子。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"类型萃取\">类型萃取<a href=\"posts/模版元编程应用#类型萃取\"></a></h4><p>　　C++模板中的类型参数T是抽象的，我们并不能在模板内部直接获得它的具体特征。类型萃取（抽取）技术就是要抽取类型的一些具体特征(trait)，比如它是哪种具体类型，它是引用类型，内建类型，还是类类型等。可见，类型萃取技术其实就是trait模板技术的具体体现。获取类型的具体特征在Java、C#等语言中也称为反射(reflection)，C++中通过模板技术也可以实现一定的反射行为。<br>　　类型信息是编译期的实体，现在要针对类型来进行编程，这其实就是模板元编程的一个方面。我们平常使用的if/else，while，for等基本的逻辑结构都是运行期的行为，在面向类型的编程中并不能使用，这就需要用到一些特殊的模板技术。实现类型萃取要用到的基本思想一个是特化，一个就是用typedef来携带类型信息。实际上，我们在用模板做设计时，一般建议在模板定义内部，为模板的每个类型参数提供typedef定义，这样在泛型代码中可以很容易地访问或抽取这些类型。<br>　　在C和C++中，普通的函数可以称为值函数，它们接受的参数是某些值，返回的结果也是值。而所谓的类型函数接受的实参是类型，返回的是被抽取出来的类型或常量值等（即用typedef定义的类型别名，一般不同的具体类型都定义统一的别名）。如类模板就是类型函数，sizeof是内建的类型函数，返回给定类型实参的大小。在类型编程中，很多地方都要用到sizeof。<br>//下面演示一些有用的类型萃取实现，这些都是类型函数。</p>\n<h3 id=\"2-function-traits\">2.function_traits<a href=\"posts/模版元编程应用#2-function-traits\"></a></h3><p>　　function_traits用来获取函数语义的可调用对象的一些属性，比如函数类型、返回类型、函数指针类型和参数类型等。下面来看看如何实现function_traits。</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">function_traits</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通函数萃取</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Ret, <span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">function_traits</span>&lt;Ret(Args...)&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123; arity = <span class=\"keyword\">sizeof</span>...(Args) &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">typedef</span> Ret <span class=\"title\">function_type</span><span class=\"params\">(Args...)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> Ret return_type;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> stl_function_type = <span class=\"built_in\">std</span>::function&lt;function_type&gt;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">Ret</span><span class=\"params\">(*pointer)</span><span class=\"params\">(Args...)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">size_t</span> I&gt;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">args</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">static_assert</span>(I &lt; arity, <span class=\"string\">\"index is out of range, index must less than sizeof Args\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">using</span> type = <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::tuple_element&lt;I, <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&gt;::type;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类函数萃取</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Ret, <span class=\"keyword\">typename</span> Class, <span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">function_traits</span>&lt;Ret(Class::*) (Args...)&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123; arity = <span class=\"keyword\">sizeof</span>...(Args) &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">typedef</span> Ret <span class=\"title\">function_type</span><span class=\"params\">(Args...)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> Ret return_type;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> stl_function_type = <span class=\"built_in\">std</span>::function&lt;function_type&gt;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">Ret</span><span class=\"params\">(Class::* pointer)</span><span class=\"params\">(Args...)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> Class class_type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">size_t</span> I&gt;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">args</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">static_assert</span>(I &lt; arity, <span class=\"string\">\"index is out of range, index must less than sizeof Args\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">using</span> type = <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::tuple_element&lt;I, <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&gt;::type;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数指针</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Ret, <span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">function_traits</span>&lt;Ret(*)(Args...)&gt; :</span> function_traits&lt;Ret(Args...)&gt; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//std::function</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Ret, <span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">function_traits</span>&lt;std::function&lt;Ret(Args...)&gt;&gt; :</span> function_traits&lt;Ret(Args...)&gt; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//member function</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> ReturnType, <span class=\"keyword\">typename</span> ClassType, <span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">function_traits</span>&lt;ReturnType(ClassType::*)(Args...) const&gt; :</span> function_traits&lt;ReturnType(ClassType::*)(Args...)&gt; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数对象</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Callable&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">function_traits</span> :</span> function_traits&lt;<span class=\"keyword\">decltype</span>(&amp;Callable::<span class=\"keyword\">operator</span>())&gt; &#123;&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>由于可调用对象可能是普通的函数、函数指针、lambda、std::function和成员函数，所以我们需要针对这些类型分别做偏特化，然后萃取出可调用对象的元信息。其中，成员函数的偏特化稍微复杂一点，因为涉及到cv符的处理，这里通过定义一个宏来消除重复的模板类定义。参数类型的获取我们是借助于tuple，将参数转换为tuple类型，然后根据索引来获取对应类型。它的用法比较简单：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)</span> </span>&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">fun</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">0.1</span>; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintType</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">typeid</span>(T).name() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> (S::* cfptr)(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*) = &amp;S::fun; <span class=\"comment\">// class fnptr</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> (*fptr)() = fun; <span class=\"comment\">//fnptr</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">int</span>(<span class=\"keyword\">int</span>)&gt; f = [](<span class=\"keyword\">int</span> a) &#123;<span class=\"keyword\">return</span> a; &#125;;  <span class=\"comment\">//function</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> lambda = [](<span class=\"keyword\">int</span> a) &#123;<span class=\"keyword\">return</span> a; &#125;; <span class=\"comment\">// lambda</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印函数类型</span></span><br><span class=\"line\">    PrintType&lt;function_traits&lt;<span class=\"keyword\">decltype</span>(fptr)&gt;::function_type&gt;(); <span class=\"comment\">//将输出double __cdecl&lt;void&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//打印类函数指针类型</span></span><br><span class=\"line\">    PrintType&lt;function_traits&lt;<span class=\"keyword\">decltype</span>(&amp;cfptr)&gt;::pointer&gt;(); <span class=\"comment\">//将输出void &lt;__thiscall S::*&gt;&lt;char const *&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印函数的第一个参数类型</span></span><br><span class=\"line\">    PrintType&lt;function_traits&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">int</span>(<span class=\"keyword\">bool</span>)&gt;&gt;::args&lt;<span class=\"number\">0</span>&gt;::type&gt;();<span class=\"comment\">//将输出bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印函数的返回类型</span></span><br><span class=\"line\">    PrintType&lt;function_traits&lt;<span class=\"keyword\">decltype</span>(f)&gt;::return_type&gt;(); <span class=\"comment\">//将输出int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印函数指针类型</span></span><br><span class=\"line\">    PrintType&lt;function_traits&lt;<span class=\"keyword\">decltype</span>(f)&gt;::pointer&gt;(); <span class=\"comment\">//将输出int &lt;__cdecl*&gt;&lt;int&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印function函数类型</span></span><br><span class=\"line\">    PrintType&lt;function_traits&lt;<span class=\"keyword\">decltype</span>(f)&gt;::stl_function_type&gt;(); <span class=\"comment\">//将输出class std::function&lt;int __cdecl&lt;int&gt;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//lambda =&gt; 隐式转化为了匿名类对象</span></span><br><span class=\"line\">    PrintType&lt;function_traits&lt;<span class=\"keyword\">decltype</span>(lambda)&gt;::class_type&gt;(); <span class=\"comment\">//将输出class &lt;lambda_13vr3tgewf32rt23rfgt435g41239da&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>gun gcc下：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FdvE</span><br><span class=\"line\">b</span><br><span class=\"line\">i</span><br><span class=\"line\">PFiiE</span><br><span class=\"line\">St8functionIFiiEE</span><br><span class=\"line\">Z4mainEUliE0_</span><br><span class=\"line\">M1SFvPKcE</span><br></pre></td></tr></table></div></figure>\n\n<p>Visual studio下：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> __cdecl(<span class=\"keyword\">void</span>)</span><br><span class=\"line\"><span class=\"keyword\">void</span> (__thiscall S::*)(<span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *)</span><br><span class=\"line\"><span class=\"keyword\">bool</span></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> (__cdecl*)(<span class=\"keyword\">int</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">std</span>:</span>:function&lt;<span class=\"keyword\">int</span> __cdecl(<span class=\"keyword\">int</span>)&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> &lt;lambda_173ed6f42b6e4df55bf9ec2e4778d93a&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>其实结果是一样的，至于为什么可以参考<a href=\"http://www.cppblog.com/smagle/archive/2010/05/14/115286.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>可以看到这个function_traits通过类型萃取，可以很方便地获取可调用对象（函数、函数指针、函数对象、std::function和lambda表达式）的一些元信息，功能非常强大，这个function_traits经常会用到是更高层模版元程序的基础。比如Variant类型的实现就要用到这个function_traits，下面来看看Variant的实现。</p>\n<h3 id=\"3-Variant\">3.Variant<a href=\"posts/模版元编程应用#3-Variant\"></a></h3><p>　　借助上面的function_traits和前文实现的一些元函数，我们就能方便的实现一个“万能类型”—Variant，Variant实际上一个泛化的类型，这个Variant和boost.variant的用法类似，需要预定义一些类型作为可接受的类型。boost.variant的基本用法如下：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> variant&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">char</span>, <span class=\"keyword\">double</span>&gt; vt;</span><br><span class=\"line\">vt v = <span class=\"number\">1</span>;</span><br><span class=\"line\">v = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">v = <span class=\"number\">12.32</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>　　这个variant可以接受已经定义的那些类型，看起来有点类似于c#和java中的object类型，实际上variant是擦除了类型，要获取它的实际类型的时候就稍显麻烦，需要通过boost.visitor来访问：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">VariantVisitor</span> :</span> <span class=\"keyword\">public</span> boost::static_visitor&lt;<span class=\"keyword\">void</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"int\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">short</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"short\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">double</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"double\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"string\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">boost::variant&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">short</span>,<span class=\"keyword\">double</span>,<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; v = <span class=\"number\">1</span>;</span><br><span class=\"line\">boost::apply_visitor(visitor, v); <span class=\"comment\">//将输出int</span></span><br></pre></td></tr></table></div></figure>\n\n<p>​    　通过C++11模版元实现的Variant将改进值的获取，将获取实际值的方式改为内置的，即通过下面的方式来访问：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> Variant&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">double</span>, <span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; cv;</span><br><span class=\"line\">cv v = <span class=\"number\">10</span>;</span><br><span class=\"line\">v.Visit([&amp;](<span class=\"keyword\">double</span> i)&#123;<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>; &#125;, [](<span class=\"keyword\">short</span> i)&#123;<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>; &#125;, [=](<span class=\"keyword\">int</span> i)&#123;<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>; &#125;,[](<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; i)&#123;<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>; &#125;);<span class=\"comment\">//结果将输出10</span></span><br></pre></td></tr></table></div></figure>\n\n<p>　这种方式更方便直观。Variant的实现需要借助前文中实现的一些元函数MaxInteger、MaxAlign、Contains和At等等。可以在下面的tab中展开观看，下面来看看Variant实现的关键代码。<br>IntegerMax代码：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 获取整数列表中最大的整数 */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> arg, <span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span>... rest&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IntegerMax</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> arg&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IntegerMax</span>&lt;arg&gt; :</span> <span class=\"built_in\">std</span>::integral_constant&lt;<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span>, arg&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> arg1, <span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> arg2, <span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span>... rest&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IntegerMax</span>&lt;arg1, arg2, rest...&gt; :</span> <span class=\"built_in\">std</span>::integral_constant&lt;<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span>, arg1 &gt;= arg2 ? IntegerMax&lt;arg1, rest...&gt;::value</span><br><span class=\"line\">    : IntegerMax&lt;arg2, rest...&gt;::value&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>MaxAlign代码：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 获取最大的align */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MaxAlign</span> :</span> <span class=\"built_in\">std</span>::integral_constant&lt;<span class=\"keyword\">int</span>, IntegerMax&lt;<span class=\"built_in\">std</span>::alignment_of&lt;Args&gt;::value...&gt;::value&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>Contains代码：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 是否包含某个类型 */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span>... List&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Contains</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> Head, <span class=\"keyword\">typename</span>... Rest&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Contains</span>&lt;T, Head, Rest...&gt;</span></span><br><span class=\"line\"><span class=\"class\">    :</span> <span class=\"built_in\">std</span>::conditional&lt;<span class=\"built_in\">std</span>::is_same&lt;T, Head&gt;::value, <span class=\"built_in\">std</span>::true_type, Contains&lt;T, Rest... &gt;&gt; ::type</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Contains</span>&lt;T&gt; :</span> <span class=\"built_in\">std</span>::false_type</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>IndexOf代码：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span>... List&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IndexOf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> Head, <span class=\"keyword\">typename</span>... Rest&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IndexOf</span>&lt;T, Head, Rest...&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123; value = IndexOf&lt;T, Rest...&gt;::value + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span>... Rest&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IndexOf</span>&lt;T, T, Rest...&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123; value = <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IndexOf</span>&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span>&#123;value = <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>At代码：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> index, <span class=\"keyword\">typename</span>... Types&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">At</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> index, <span class=\"keyword\">typename</span> First, <span class=\"keyword\">typename</span>... Types&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">At</span>&lt;index, First, Types...&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> type = <span class=\"keyword\">typename</span> At&lt;index - <span class=\"number\">1</span>, Types...&gt;::type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span>... Types&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">At</span>&lt;0, T, Types...&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> type = T;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>Variant关键代码：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Types&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Variant</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span>&#123;</span><br><span class=\"line\">        data_size = IntegerMax&lt;<span class=\"keyword\">sizeof</span>(Types)...&gt;::value, <span class=\"comment\">//参数个数</span></span><br><span class=\"line\">        align_size = MaxAlign&lt;Types...&gt;::value\t<span class=\"comment\">//参数最大字节数</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">data_t</span> = <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::aligned_storage&lt;data_size, align_size&gt;::type;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> index&gt;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> IndexType = <span class=\"keyword\">typename</span> At&lt;index, Types...&gt;::type;</span><br><span class=\"line\"></span><br><span class=\"line\">    Variant(<span class=\"keyword\">void</span>) :m_typeIndex(<span class=\"keyword\">typeid</span>(<span class=\"keyword\">void</span>))&#123;&#125;</span><br><span class=\"line\">    ~Variant()&#123; Destroy(m_typeIndex, &amp;m_data); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Variant(Variant&lt;Types...&gt;&amp;&amp; old) : m_typeIndex(old.m_typeIndex)&#123;</span><br><span class=\"line\">        Move(old.m_typeIndex, &amp;old.m_data, &amp;m_data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Variant(<span class=\"keyword\">const</span> Variant&lt;Types...&gt;&amp; old) : m_typeIndex(old.m_typeIndex)&#123;</span><br><span class=\"line\">        Copy(old.m_typeIndex, &amp;old.m_data, &amp;m_data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>,</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">class</span> = <span class=\"title\">typename</span> <span class=\"title\">std</span>:</span>:enable_if&lt;Contains&lt;<span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::remove_reference&lt;T&gt;::type, Types...&gt;::value&gt;::type&gt; Variant(T&amp;&amp; value) : m_typeIndex(<span class=\"keyword\">typeid</span>(<span class=\"keyword\">void</span>))&#123;</span><br><span class=\"line\">            Destroy(m_typeIndex, &amp;m_data);</span><br><span class=\"line\">            <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::remove_reference&lt;T&gt;::type U;</span><br><span class=\"line\">            <span class=\"keyword\">new</span>(&amp;m_data) U(<span class=\"built_in\">std</span>::forward&lt;T&gt;(value));</span><br><span class=\"line\">            m_typeIndex = type_index(<span class=\"keyword\">typeid</span>(U));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Is</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (m_typeIndex == type_index(<span class=\"keyword\">typeid</span>(T)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::decay&lt;T&gt;::<span class=\"function\">type&amp; <span class=\"title\">Get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> U = <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::decay&lt;T&gt;::type;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Is&lt;U&gt;())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">typeid</span>(U).name() &lt;&lt; <span class=\"string\">\" is not defined. \"</span> &lt;&lt; <span class=\"string\">\"current type is \"</span> &lt;&lt;</span><br><span class=\"line\">                m_typeIndex.name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"built_in\">std</span>::bad_cast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(U*)(&amp;m_data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> F&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Visit</span><span class=\"params\">(F&amp;&amp; f)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> T = <span class=\"keyword\">typename</span> Function_Traits&lt;F&gt;::<span class=\"keyword\">template</span> arg&lt;<span class=\"number\">0</span>&gt;::type;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Is&lt;T&gt;())</span><br><span class=\"line\">            f(Get&lt;T&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> F, <span class=\"keyword\">typename</span>... Rest&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Visit</span><span class=\"params\">(F&amp;&amp; f, Rest&amp;&amp;... rest)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> T = <span class=\"keyword\">typename</span> Function_Traits&lt;F&gt;::<span class=\"keyword\">template</span> arg&lt;<span class=\"number\">0</span>&gt;::type;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Is&lt;T&gt;())</span><br><span class=\"line\">            Visit(<span class=\"built_in\">std</span>::forward&lt;F&gt;(f));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Visit(<span class=\"built_in\">std</span>::forward&lt;Rest&gt;(rest)...);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Destroy</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; index, <span class=\"keyword\">void</span> * buf)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;(Destroy0&lt;Types&gt;(index, buf), <span class=\"number\">0</span>)...&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Destroy0</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; id, <span class=\"keyword\">void</span>* data)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == type_index(<span class=\"keyword\">typeid</span>(T)))</span><br><span class=\"line\">            <span class=\"keyword\">reinterpret_cast</span>&lt;T*&gt;(data)-&gt;~T();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Move</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; <span class=\"keyword\">old_t</span>, <span class=\"keyword\">void</span>* old_v, <span class=\"keyword\">void</span>* new_v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;(Move0&lt;Types&gt;(<span class=\"keyword\">old_t</span>, old_v, new_v), <span class=\"number\">0</span>)...&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Move0</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; <span class=\"keyword\">old_t</span>, <span class=\"keyword\">void</span>* old_v, <span class=\"keyword\">void</span>* new_v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">old_t</span> == type_index(<span class=\"keyword\">typeid</span>(T)))</span><br><span class=\"line\">            <span class=\"keyword\">new</span> (new_v)T(<span class=\"built_in\">std</span>::move(*<span class=\"keyword\">reinterpret_cast</span>&lt;T*&gt;(old_v)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; <span class=\"keyword\">old_t</span>, <span class=\"keyword\">void</span>* old_v, <span class=\"keyword\">void</span>* new_v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;(Copy0&lt;Types&gt;(<span class=\"keyword\">old_t</span>, old_v, new_v), <span class=\"number\">0</span>)...&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy0</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; <span class=\"keyword\">old_t</span>, <span class=\"keyword\">void</span>* old_v, <span class=\"keyword\">void</span>* new_v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">old_t</span> == type_index(<span class=\"keyword\">typeid</span>(T)))</span><br><span class=\"line\">            <span class=\"keyword\">new</span> (new_v)T(*<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">const</span> T*&gt;(old_v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">data_t</span> m_data;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::type_index m_typeIndex;<span class=\"comment\">//类型ID</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>　实现Variant首先需要定义一个足够大的缓冲区用来存放不同的类型的值，这个缓类型冲区实际上就是用来擦除类型，不同的类型都通过placement new在这个缓冲区上创建对象，因为类型长度不同，所以需要考虑内存对齐，C++11刚好提供了内存对齐的缓冲区aligned_storage：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt; <span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> Len, <span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> Align = <span class=\"comment\">/*default-alignment*/</span> &gt;</span><br><span class=\"line\">struct aligned_storage;</span><br></pre></td></tr></table></div></figure>\n\n<p>它的第一个参数是缓冲区的长度，第二个参数是缓冲区内存对齐的大小，由于Varaint可以接受多种类型，所以我们需要获取最大的类型长度，保证缓冲区足够大，然后还要获取最大的内存对齐大小，这里我们通过前面实现的MaxInteger和MaxAlign就可以了，Varaint中内存对齐的缓冲区定义如下：</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        data_size = IntegerMax&lt;<span class=\"keyword\">sizeof</span>(Types)...&gt;::value,</span><br><span class=\"line\">        align_size = MaxAlign&lt;Types...&gt;::value</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">data_t</span> = <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::aligned_storage&lt;data_size, align_size&gt;::type; <span class=\"comment\">//内存对齐的缓冲区类型</span></span><br></pre></td></tr></table></div></figure>\n\n<p>其次，我们还要实现对缓冲区的构造、拷贝、析构和移动，因为Variant重新赋值的时候需要将缓冲区中原来的类型析构掉，拷贝构造和移动构造时则需要拷贝和移动。这里以析构为例，我们需要根据当前的type_index来遍历Variant的所有类型，找到对应的类型然后调用该类型的析构函数。</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　 <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Destroy</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; index, <span class=\"keyword\">void</span> * buf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;(Destroy0&lt;Types&gt;(index, buf), <span class=\"number\">0</span>)...&#125;;</span><br><span class=\"line\"> <span class=\"comment\">//这里通过一个初始化列表来初始化一个变长数组，int数组的目的就是为了在数组构造的过程展开参数包</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Destroy0</span><span class=\"params\">(<span class=\"keyword\">const</span> type_index&amp; id, <span class=\"keyword\">void</span>* data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == type_index(<span class=\"keyword\">typeid</span>(T)))</span><br><span class=\"line\">        <span class=\"keyword\">reinterpret_cast</span>&lt;T*&gt;(data)-&gt;~T();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这里，我们通过初始化列表和逗号表达式来展开可变模板参数，在展开的过程中查找对应的类型，如果找到了则析构。在Variant构造时还需要注意一个细节是，Variant不能接受没有预先定义的类型，所以在构造Variant时，需要限定类型必须在预定义的类型范围当中，这里通过type_traits的enable_if来限定模板参数的类型。</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>,</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">class</span> = <span class=\"title\">typename</span> <span class=\"title\">std</span>:</span>:enable_if&lt;Contains&lt;<span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::remove_reference&lt;T&gt;::type, Types...&gt;::value&gt;::type&gt; Variant(T&amp;&amp; value) : m_typeIndex(<span class=\"keyword\">typeid</span>(<span class=\"keyword\">void</span>))&#123;</span><br><span class=\"line\">            Destroy(m_typeIndex, &amp;m_data);</span><br><span class=\"line\">            <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::remove_reference&lt;T&gt;::type U;</span><br><span class=\"line\">            <span class=\"keyword\">new</span>(&amp;m_data) U(<span class=\"built_in\">std</span>::forward&lt;T&gt;(value));</span><br><span class=\"line\">            m_typeIndex = type_index(<span class=\"keyword\">typeid</span>(U));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这里enbale_if的条件就是前面实现的元函数Contains的值，当没有在预定义的类型中找到对应的类型时，即Contains返回false时，编译期会报一个编译错误。</p>\n<p>最后还需要实现内置的Vistit功能，Visit的实现需要先通过定义一系列的访问函数，然后再遍历这些函数，遍历过程中，判断函数的第一个参数类型的type_index是否与当前的type_index相同，如果相同则获取当前类型的值。</p>\n<figure class=\"highlight c++\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> F&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Visit</span><span class=\"params\">(F&amp;&amp; f)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> T = <span class=\"keyword\">typename</span> Function_Traits&lt;F&gt;::<span class=\"keyword\">template</span> arg&lt;<span class=\"number\">0</span>&gt;::type;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Is&lt;T&gt;())</span><br><span class=\"line\">            f(Get&lt;T&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> F, <span class=\"keyword\">typename</span>... Rest&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Visit</span><span class=\"params\">(F&amp;&amp; f, Rest&amp;&amp;... rest)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> T = <span class=\"keyword\">typename</span> Function_Traits&lt;F&gt;::<span class=\"keyword\">template</span> arg&lt;<span class=\"number\">0</span>&gt;::type;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Is&lt;T&gt;())</span><br><span class=\"line\">            Visit(<span class=\"built_in\">std</span>::forward&lt;F&gt;(f));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Visit(<span class=\"built_in\">std</span>::forward&lt;Rest&gt;(rest)...);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>　Visit功能的实现利用了可变模板参数和function_traits，通过可变模板参数来遍历一系列的访问函数，遍历过程中，通过function_traits来获取第一个参数的类型，和Variant当前的type_index相同时则取值。为什么要获取访问函数第一个参数的类型呢？因为Variant的值是唯一的，只有一个值，所以获取的访问函数的第一个参数的类型就是Variant中存储的对象的实际类型。</p>\n<p>未完待续。。。</p>\n","next":{"title":"C++中优雅的异步操作","link":"posts/C++中优雅的异步操作"},"plink":"https://shuntan.github.io/posts/模版元编程应用/","reward":true,"copyright":{"author":"Shawntan","link":"<a href=\"https://shuntan.github.io/posts/模版元编程应用/\" title=\"模版元编程应用\">https://shuntan.github.io/posts/模版元编程应用/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"June 19, 2019","updated":"July 14, 2019"}}