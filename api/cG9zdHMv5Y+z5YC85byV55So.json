{"title":"从4行代码看右值引用","date":"2019-05-23T06:50:40.000Z","date_formatted":{"ll":"May 23, 2019","L":"05/23/2019","MM-DD":"05-23"},"link":"posts/右值引用","comments":true,"tags":["C++"],"categories":["C++"],"updated":"2019-07-14T01:22:55.309Z","content":"<h2 id=\"概述\">概述<a href=\"posts/右值引用#概述\"></a></h2>\n<p>右值引用的概念有些读者可能会感到陌生，其实他和C<ins>98/03中的左值引用有些类似，例如，c</ins>98/03中的左值引用是这样的：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span>&amp; j = i;</span><br></pre></td></tr></table></div></figure>\n<p>这里的int&amp;是对左值进行绑定（但是int&amp;却不能绑定右值），相应的，对右值进行绑定的引用就是右值引用，他的语法是这样的A&amp;&amp;，通过双引号来表示绑定类型为A的右值。通过&amp;&amp;我们就可以很方便的绑定右值了，比如我们可以这样绑定一个右值：</p>\n<a id=\"more\"></a>　　\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>&amp;&amp; i = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></div></figure>\n<p>这里我们绑定了一个右值0，关于右值的概念会在后面介绍。右值引用是C<ins>11中新增加的一个很重要的特性，他主是要用来解决C</ins>98/03中遇到的两个问题，第一个问题就是临时对象非必要的昂贵的拷贝操作，第二个问题是在模板函数中如何按照参数的实际类型进行转发。通过引入右值引用，很好的解决了这两个问题，改进了程序性能，后面将会详细介绍右值引用是如何解决这两个问题的。</p>\n<p>和右值引用相关的概念比较多，比如：右值、纯右值、将亡值、universal references、引用折叠、移动语义、move语义和完美转发等等。很多都是新概念，对于刚学习C++11右值引用的初学者来说，可能会觉得右值引用过于复杂，概念之间的关系难以理清。</p>\n<p>右值引用实际上并没有那么复杂，其实是关于4行代码的故事，通过简单的4行代码我们就能清晰的理解右值引用相关的概念了。本文希望带领读者通过4行代码来理解右值引用相关的概念，理清他们之间的关系，并最终能透彻地掌握C++11的新特性–右值引用。</p>\n<h2 id=\"四行代码的故事\">四行代码的故事<a href=\"posts/右值引用#四行代码的故事\"></a></h2>\n<h3 id=\"第1行代码的故事\">第1行代码的故事<a href=\"posts/右值引用#第1行代码的故事\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">int i</span> = getVar();</span><br></pre></td></tr></table></div></figure>\n<p>上面的这行代码很简单，从getVar()函数获取一个整形值，然而，这行代码会产生几种类型的值呢？答案是会产生两种类型的值，一种是左值i，一种是函数getVar()返回的临时值，这个临时值在表达式结束后就销毁了，而左值i在表达式结束后仍然存在，这个临时值就是右值，具体来说是一个纯右值，右值是不具名的。区分左值和右值的一个简单办法是：看能不能对表达式取地址，如果能，则为左值，否则为右值。</p>\n<p>所有的具名变量或对象都是左值，而匿名变量则是右值，比如，简单的赋值语句：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></div></figure>\n<p>在这条语句中，i 是左值，0 是字面量，就是右值。在上面的代码中，i 可以被引用，0 就不可以了。具体来说上面的表达式中等号右边的0是纯右值（prvalue），在C<ins>11中所有的值必属于左值、将亡值、纯右值三者之一。比如，非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和lambda表达式等都是纯右值。而将亡值是C</ins>11新增的、与右值引用相关的表达式，比如，将要被移动的对象、T&amp;&amp;函数返回值、std::move返回值和转换为T&amp;&amp;的类型的转换函数的返回值等。关于将亡值我们会在后面介绍，先看下面的代码：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> j = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">auto</span> f = []&#123;<span class=\"keyword\">return</span> <span class=\"number\">5</span>;&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>上面的代码中5是一个原始字面量， []{return 5;}是一个lambda表达式，都是属于纯右值，他们的特点是在表达式结束之后就销毁了。</p>\n<p>通过地行代码我们对右值有了一个初步的认识，知道了什么是右值，接下来再来看看第二行代码。</p>\n<h3 id=\"第2行代码的故事\">第2行代码的故事<a href=\"posts/右值引用#第2行代码的故事\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T<span class=\"variable\">&amp;&amp;</span> k = ge<span class=\"meta\">tVar(</span>);</span><br></pre></td></tr></table></div></figure>\n<p>第二行代码和第一行代码很像，只是相比第一行代码多了“&amp;&amp;”，他就是右值引用，我们知道左值引用是对左值的引用，那么，对应的，对右值的引用就是右值引用，而且右值是匿名变量，我们也只能通过引用的方式来获取右值。虽然第二行代码和第一行代码看起来差别不大，但是实际上语义的差别很大，这里，getVar()产生的临时值不会像第一行代码那样，在表达式结束之后就销毁了，而是会被“续命”，他的生命周期将会通过右值引用得以延续，和变量k的声明周期一样长。</p>\n<p>右值引用的第一个特点<br>\n　　通过右值引用的声明，右值又“重获新生”，其生命周期与右值引用类型变量的生命周期一样长，只要该变量还活着，该右值临时量将会一直存活下去。让我们通过一个简单的例子来看看右值的生命周期。如代码清单1-1所示。</p>\n<p>代码清单1-1</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> g_constructCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g_copyConstructCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g_destructCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"construct: \"</span>&lt;&lt;++g_constructCount&lt;&lt;<span class=\"built_in\">endl</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    A(<span class=\"keyword\">const</span> A&amp; a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"copy construct: \"</span>&lt;&lt;++g_copyConstructCount &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"destruct: \"</span>&lt;&lt;++g_destructCount&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">GetA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a = GetA();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>为了清楚的观察临时值，在编译时设置编译选项-fno-elide-constructors用来关闭返回值优化效果。</p>\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">construc<span class=\"variable\">t:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">copy</span> construc<span class=\"variable\">t:</span> <span class=\"number\">1</span></span><br><span class=\"line\">destruc<span class=\"variable\">t:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">copy</span> construc<span class=\"variable\">t:</span> <span class=\"number\">2</span></span><br><span class=\"line\">destruc<span class=\"variable\">t:</span> <span class=\"number\">2</span></span><br><span class=\"line\">destruc<span class=\"variable\">t:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></div></figure>\n<p>从上面的例子中可以看到，在没有返回值优化的情况下，拷贝构造函数调用了两次，一次是GetA()函数内部创建的对象返回出来构造一个临时对象产生的，另一次是在main函数中构造a对象产生的。第二次的destruct是因为临时对象在构造a对象之后就销毁了。如果开启返回值优化的话，输出结果将是：</p>\n<p>construct: 1</p>\n<p>destruct: 1</p>\n<p>可以看到返回值优化将会把临时对象优化掉，但这不是c++标准，是各编译器的优化规则。我们在回到之前提到的可以通过右值引用来延长临时右值的生命周期，如果上面的代码中我们通过右值引用来绑定函数返回值的话，结果又会是什么样的呢？在编译时设置编译选项-fno-elide-constructors。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> main() &#123;</span><br><span class=\"line\">    A&amp;&amp; a = GetA();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">construct: <span class=\"number\">1</span></span><br><span class=\"line\">copy construct: <span class=\"number\">1</span></span><br><span class=\"line\">destruct: <span class=\"number\">1</span></span><br><span class=\"line\">destruct: <span class=\"number\">2</span></span><br></pre></td></tr></table></div></figure>\n<p>通过右值引用，比之前少了一次拷贝构造和一次析构，原因在于右值引用绑定了右值，让临时右值的生命周期延长了。我们可以利用这个特点做一些性能优化，即避免临时对象的拷贝构造和析构，事实上，在c++98/03中，通过常量左值引用也经常用来做性能优化。上面的代码改成：</p>\n<p>const A&amp; a = GetA();</p>\n<p>输出的结果和右值引用一样，因为常量左值引用是一个“万能”的引用类型，可以接受左值、右值、常量左值和常量右值。需要注意的是普通的左值引用不能接受右值，比如这样的写法是不对的：</p>\n<p>A&amp; a = GetA();</p>\n<p>上面的代码会报一个编译错误，因为非常量左值引用只能接受左值。</p>\n<p>右值引用的第二个特点<br>\n　　右值引用独立于左值和右值。意思是右值引用类型的变量可能是左值也可能是右值。比如下面的例子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>&amp;&amp; var1 = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></div></figure>\n<p>var1类型为右值引用，但var1本身是左值，因为具名变量都是左值。</p>\n<p>关于右值引用一个有意思的问题是：T&amp;&amp;是什么，一定是右值吗？让我们来看看下面的例子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(T&amp;&amp; t)</span></span>&#123;&#125;</span><br><span class=\"line\">f(<span class=\"number\">10</span>); <span class=\"comment\">//t是右值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">f(x); <span class=\"comment\">//t是左值</span></span><br></pre></td></tr></table></div></figure>\n<p>从上面的代码中可以看到，T&amp;&amp;表示的值类型不确定，可能是左值又可能是右值，这一点看起来有点奇怪，这就是右值引用的一个特点。</p>\n<p>右值引用的第三个特点<br>\n　　T&amp;&amp; t在发生自动类型推断的时候，它是未定的引用类型（universal references），如果被一个左值初始化，它就是一个左值；如果它被一个右值初始化，它就是一个右值，它是左值还是右值取决于它的初始化。</p>\n<p>我们再回过头看上面的代码，对于函数template<typename t>void f(T&amp;&amp; t)，当参数为右值10的时候，根据universal references的特点，t被一个右值初始化，那么t就是右值；当参数为左值x时，t被一个左值引用初始化，那么t就是一个左值。需要注意的是，仅仅是当发生自动类型推导（如函数模板的类型自动推导，或auto关键字）的时候，T&amp;&amp;才是universal references。再看看下面的例子：</typename></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(T&amp;&amp; param)</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> &#123;</span></span><br><span class=\"line\">    Test(Test&amp;&amp; rhs); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>上面的例子中，param是universal reference，rhs是Test&amp;&amp;右值引用，因为模版函数f发生了类型推断，而Test&amp;&amp;并没有发生类型推导，因为Test&amp;&amp;是确定的类型了。</p>\n<p>正是因为右值引用可能是左值也可能是右值，依赖于初始化，并不是一下子就确定的特点，我们可以利用这一点做很多文章，比如后面要介绍的移动语义和完美转发。</p>\n<p>这里再提一下引用折叠，正是因为引入了右值引用，所以可能存在左值引用与右值引用和右值引用与右值引用的折叠，C++11确定了引用折叠的规则，规则是这样的：</p>\n<ul>\n<li>所有的右值引用叠加到右值引用上仍然还是一个右值引用；</li>\n<li>所有的其他引用类型之间的叠加都将变成左值引用。</li>\n</ul>\n<h3 id=\"第3行代码的故事\">第3行代码的故事<a href=\"posts/右值引用#第3行代码的故事\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"constructor\">T(T<span class=\"operator\">&amp;&amp;</span> <span class=\"params\">a</span>)</span> : m<span class=\"constructor\">_val(<span class=\"params\">val</span>)</span>&#123; a.m_val=nullptr; &#125;</span><br></pre></td></tr></table></div></figure>\n<p>这行代码实际上来自于一个类的构造函数，构造函数的一个参数是一个右值引用，为什么将右值引用作为构造函数的参数呢？在解答这个问题之前我们先看一个例子。如代码清单1-2所示。</p>\n<p>代码清单1-2</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A():m_ptr(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">0</span>))&#123;<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"construct\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    A(<span class=\"keyword\">const</span> A&amp; a):m_ptr(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(*a.m_ptr)) <span class=\"comment\">//深拷贝的拷贝构造函数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"copy construct\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~A()&#123; <span class=\"keyword\">delete</span> m_ptr;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* m_ptr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a = GetA();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    输出：</span><br><span class=\"line\">construct</span><br><span class=\"line\">copy construct</span><br><span class=\"line\">copy construct</span><br></pre></td></tr></table></div></figure>\n<p>这个例子很简单，一个带有堆内存的类，必须提供一个深拷贝拷贝构造函数，因为默认的拷贝构造函数是浅拷贝，会发生“指针悬挂”的问题。如果不提供深拷贝的拷贝构造函数，上面的测试代码将会发生错误（编译选项-fno-elide-constructors），内部的m_ptr将会被删除两次，一次是临时右值析构的时候删除一次，第二次外面构造的a对象释放时删除一次，而这两个对象的m_ptr是同一个指针，这就是所谓的指针悬挂问题。提供深拷贝的拷贝构造函数虽然可以保证正确，但是在有些时候会造成额外的性能损耗，因为有时候这种深拷贝是不必要的。比如下面的代码：</p>\n<p>上面代码中的GetA函数会返回临时变量，然后通过这个临时变量拷贝构造了一个新的对象a，临时变量在拷贝构造完成之后就销毁了，如果堆内存很大的话，那么，这个拷贝构造的代价会很大，带来了额外的性能损失。每次都会产生临时变量并造成额外的性能损失，有没有办法避免临时变量造成的性能损失呢？答案是肯定的，C++11已经有了解决方法，看看下面的代码。如代码清单1-3所示。</p>\n<p>代码清单1-3</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"constructor\">A()</span> :m<span class=\"constructor\">_ptr(<span class=\"params\">new</span> <span class=\"params\">int</span>(0)</span>)&#123;&#125;</span><br><span class=\"line\">    <span class=\"constructor\">A(<span class=\"params\">const</span> A&amp; <span class=\"params\">a</span>)</span>:m<span class=\"constructor\">_ptr(<span class=\"params\">new</span> <span class=\"params\">int</span>(<span class=\"operator\">*</span><span class=\"params\">a</span>.<span class=\"params\">m_ptr</span>)</span>) <span class=\"comment\">//深拷贝的拷贝构造函数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">\"copy construct\"</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"constructor\">A(A<span class=\"operator\">&amp;&amp;</span> <span class=\"params\">a</span>)</span> :m<span class=\"constructor\">_ptr(<span class=\"params\">a</span>.<span class=\"params\">m_ptr</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a.m_ptr = nullptr;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">\"move construct\"</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"constructor\">A()</span>&#123; delete m_ptr;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">int</span>* m_ptr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">int</span> main<span class=\"literal\">()</span>&#123;</span><br><span class=\"line\">    A a = <span class=\"constructor\">Get(<span class=\"params\">false</span>)</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">输出：</span><br><span class=\"line\">construct</span><br><span class=\"line\">move construct</span><br><span class=\"line\">move construct</span><br></pre></td></tr></table></div></figure>\n<p>代码清单1-3和1-2相比只多了一个构造函数，输出结果表明，并没有调用拷贝构造函数，只调用了move construct函数，让我们来看看这个move construct函数：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"constructor\">A(A<span class=\"operator\">&amp;&amp;</span> <span class=\"params\">a</span>)</span> :m<span class=\"constructor\">_ptr(<span class=\"params\">a</span>.<span class=\"params\">m_ptr</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a.m_ptr = nullptr;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">\"move construct\"</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个构造函数并没有做深拷贝，仅仅是将指针的所有者转移到了另外一个对象，同时，将参数对象a的指针置为空，这里仅仅是做了浅拷贝，因此，这个构造函数避免了临时变量的深拷贝问题。</p>\n<p>上面这个函数其实就是移动构造函数，他的参数是一个右值引用类型，这里的A&amp;&amp;表示右值，为什么？前面已经提到，这里没有发生类型推断，是确定的右值引用类型。为什么会匹配到这个构造函数？因为这个构造函数只能接受右值参数，而函数返回值是右值，所以就会匹配到这个构造函数。这里的A&amp;&amp;可以看作是临时值的标识，对于临时值我们仅仅需要做浅拷贝即可，无需再做深拷贝，从而解决了前面提到的临时变量拷贝构造产生的性能损失的问题。这就是所谓的移动语义，右值引用的一个重要作用是用来支持移动语义的。</p>\n<p>需要注意的一个细节是，我们提供移动构造函数的同时也会提供一个拷贝构造函数，以防止移动不成功的时候还能拷贝构造，使我们的代码更安全。</p>\n<p>我们知道移动语义是通过右值引用来匹配临时值的，那么，普通的左值是否也能借助移动语义来优化性能呢，那该怎么做呢？事实上C++11为了解决这个问题，提供了std::move方法来将左值转换为右值，从而方便应用移动语义。move是将对象资源的所有权从一个对象转移到另一个对象，只是转移，没有内存的拷贝，这就是所谓的move语义。如图1-1所示是深拷贝和move的区别。</p>\n<p>图1-1 深拷贝和move的区别</p>\n<p>再看看下面的例子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; tokens;</span><br><span class=\"line\">    <span class=\"comment\">//省略初始化...</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; t = tokens; <span class=\"comment\">//这里存在拷贝 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; tokens;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; t = <span class=\"built_in\">std</span>::move(tokens);  <span class=\"comment\">//这里没有拷贝</span></span><br></pre></td></tr></table></div></figure>\n<p>如果不用std::move，拷贝的代价很大，性能较低。使用move几乎没有任何代价，只是转换了资源的所有权。他实际上将左值变成右值引用，然后应用移动语义，调用移动构造函数，就避免了拷贝，提高了程序性能。如果一个对象内部有较大的对内存或者动态数组时，很有必要写move语义的拷贝构造函数和赋值函数，避免无谓的深拷贝，以提高性能。事实上，C++11中所有的容器都实现了移动语义，方便我们做性能优化。</p>\n<p>这里也要注意对move语义的误解，move实际上它并不能移动任何东西，它唯一的功能是将一个左值强制转换为一个右值引用。如果是一些基本类型比如int和char[10]定长数组等类型，使用move的话仍然会发生拷贝（因为没有对应的移动构造函数）。所以，move对于含资源（堆内存或句柄）的对象来说更有意义。</p>\n<h3 id=\"第4行代码故事\">第4行代码故事<a href=\"posts/右值引用#第4行代码故事\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(T&amp;&amp; val)</span></span>&#123; foo(<span class=\"built_in\">std</span>::forward&lt;T&gt;(val)); &#125;</span><br></pre></td></tr></table></div></figure>\n<p>C++11之前调用模板函数时，存在一个比较头疼的问题，如何正确的传递参数。比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">forwardValue</span><span class=\"params\">(T&amp; val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    processValue(val); <span class=\"comment\">//右值参数会变成左值 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">forwardValue</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    processValue(val); <span class=\"comment\">//参数都变成常量左值引用了 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>都不能按照参数的本来的类型进行转发。</p>\n<p>C<ins>11引入了完美转发：在函数模板中，完全依照模板的参数的类型（即保持参数的左值、右值特征），将参数传递给函数模板中调用的另外一个函数。C</ins>11中的std::forward正是做这个事情的，他会按照参数的实际类型进行转发。看下面的例子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processValue</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; a)</span></span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"lvalue\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processValue</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp;&amp; a)</span></span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"rvalue\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">forwardValue</span><span class=\"params\">(T&amp;&amp; val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    processValue(<span class=\"built_in\">std</span>::forward&lt;T&gt;(val)); <span class=\"comment\">//照参数本来的类型进行转发。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Testdelcl</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    forwardValue(i); <span class=\"comment\">//传入左值 </span></span><br><span class=\"line\">    forwardValue(<span class=\"number\">0</span>);<span class=\"comment\">//传入右值 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出：</span><br><span class=\"line\">lvaue </span><br><span class=\"line\">rvalue</span><br></pre></td></tr></table></div></figure>\n<p>右值引用T&amp;&amp;是一个universal references，可以接受左值或者右值，正是这个特性让他适合作为一个参数的路由，然后再通过std::forward按照参数的实际类型去匹配对应的重载函数，最终实现完美转发。</p>\n<p>我们可以结合完美转发和移动语义来实现一个泛型的工厂函数，这个工厂函数可以创建所有类型的对象。具体实现如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template&lt;typename…  Args&gt;</span><br><span class=\"line\">T* <span class=\"constructor\">Instance(Args<span class=\"operator\">&amp;&amp;</span>… <span class=\"params\">args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return <span class=\"keyword\">new</span> <span class=\"constructor\">T(<span class=\"params\">std</span>::<span class=\"params\">forward</span>&lt;Args &gt;(<span class=\"params\">args</span>)</span>…);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个工厂函数的参数是右值引用类型，内部使用std::forward按照参数的实际类型进行转发，如果参数的实际类型是右值，那么创建的时候会自动匹配移动构造，如果是左值则会匹配拷贝构造。</p>\n<h2 id=\"总结\">总结<a href=\"posts/右值引用#总结\"></a></h2>\n<p>通过4行代码我们知道了什么是右值和右值引用，以及右值引用的一些特点，利用这些特点我们才方便实现移动语义和完美转发。C++11正是通过引入右值引用来优化性能，具体来说是通过移动语义来避免无谓拷贝的问题，通过move语义来将临时生成的左值中的资源无代价的转移到另外一个对象中去，通过完美转发来解决不能按照参数实际类型来转发的问题（同时，完美转发获得的一个好处是可以实现移动语义）。</p>\n<p><em>本文曾发表于《程序员》2015年1月刊。转载请注明出处。</em></p>\n<p>*后记：*本文的内容主要来自于我在公司内部培训的一次课程，因为很多人对C++11右值引用搞不清或者理解得不深入，所以我觉得有必要拿出来分享一下，让更多的人看到，就整理了一下发到程序员杂志了，我相信读者看完之后对右值引用会有全面深入的了解。</p>\n<p>一点梦想：尽自己一份力，让c++的世界变得更美好！</p>\n","prev":{"title":"C++中的万能引用和完美转发","link":"posts/完美转发"},"next":{"title":"squid介绍及其简单配置","link":"posts/squid"},"plink":"https://shuntan.github.io/posts/右值引用/","toc":[{"title":"概述","id":"概述","index":"1"},{"title":"四行代码的故事","id":"四行代码的故事","index":"2","children":[{"title":"第1行代码的故事","id":"第1行代码的故事","index":"2.1"},{"title":"第2行代码的故事","id":"第2行代码的故事","index":"2.2"},{"title":"第3行代码的故事","id":"第3行代码的故事","index":"2.3"},{"title":"第4行代码故事","id":"第4行代码故事","index":"2.4"}]},{"title":"总结","id":"总结","index":"3"}],"reward":true,"copyright":{"author":"Shawntan","link":"<a href=\"https://shuntan.github.io/posts/右值引用/\" title=\"从4行代码看右值引用\">https://shuntan.github.io/posts/右值引用/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"May 23, 2019","updated":"July 14, 2019"}}