<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shawntan&#39;s Blog</title>
  
  <subtitle>Segmentfault</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuntan.github.io/"/>
  <updated>2019-07-03T11:59:33.247Z</updated>
  <id>https://shuntan.github.io/</id>
  
  <author>
    <name>Shawntan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模版元编程应用</title>
    <link href="https://shuntan.github.io/posts/%E6%A8%A1%E7%89%88%E5%85%83%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8/"/>
    <id>https://shuntan.github.io/posts/模版元编程应用/</id>
    <published>2019-06-19T02:34:15.000Z</published>
    <updated>2019-07-03T11:59:33.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述">1.概述<a href="post/模版元编程应用#1-概述"></a></h3><p>　　关于C++11模板元的基本用法和常用技巧，在常规编程中可能很少遇到，那么C++11模版元编程用来解决什么实际问题呢，在实际工程中又该如何应用呢？本文将侧重介绍C++11模板的一些具体应用，向读者展示模版元编程的具体应用。</p><p>　　我们将展示如何通过C++11模版元来实现function_traits、Vairant类型和泛型bind绑定器。function_traits侧重于如何萃取可调用对象的一些元信息，Variant则是一种能接受多种类型数据的“万能”类型，bind则是一个泛化的绑定器，下面来看看这些具体的例子。</p><a id="more"></a><h4 id="类型萃取">类型萃取<a href="post/模版元编程应用#类型萃取"></a></h4><p>　　C++模板中的类型参数T是抽象的，我们并不能在模板内部直接获得它的具体特征。类型萃取（抽取）技术就是要抽取类型的一些具体特征(trait)，比如它是哪种具体类型，它是引用类型，内建类型，还是类类型等。可见，类型萃取技术其实就是trait模板技术的具体体现。获取类型的具体特征在Java、C#等语言中也称为反射(reflection)，C++中通过模板技术也可以实现一定的反射行为。<br>　　类型信息是编译期的实体，现在要针对类型来进行编程，这其实就是模板元编程的一个方面。我们平常使用的if/else，while，for等基本的逻辑结构都是运行期的行为，在面向类型的编程中并不能使用，这就需要用到一些特殊的模板技术。实现类型萃取要用到的基本思想一个是特化，一个就是用typedef来携带类型信息。实际上，我们在用模板做设计时，一般建议在模板定义内部，为模板的每个类型参数提供typedef定义，这样在泛型代码中可以很容易地访问或抽取这些类型。<br>　　在C和C++中，普通的函数可以称为值函数，它们接受的参数是某些值，返回的结果也是值。而所谓的类型函数接受的实参是类型，返回的是被抽取出来的类型或常量值等（即用typedef定义的类型别名，一般不同的具体类型都定义统一的别名）。如类模板就是类型函数，sizeof是内建的类型函数，返回给定类型实参的大小。在类型编程中，很多地方都要用到sizeof。<br>//下面演示一些有用的类型萃取实现，这些都是类型函数。</p><h3 id="2-function-traits">2.function_traits<a href="post/模版元编程应用#2-function-traits"></a></h3><p>　　function_traits用来获取函数语义的可调用对象的一些属性，比如函数类型、返回类型、函数指针类型和参数类型等。下面来看看如何实现function_traits。</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">function_traits</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数萃取</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ret, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">function_traits</span>&lt;Ret(Args...)&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> &#123; arity = <span class="keyword">sizeof</span>...(Args) &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> Ret <span class="title">function_type</span><span class="params">(Args...)</span></span>;</span><br><span class="line">    <span class="keyword">typedef</span> Ret return_type;</span><br><span class="line">    <span class="keyword">using</span> stl_function_type = <span class="built_in">std</span>::function&lt;function_type&gt;;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">Ret</span><span class="params">(*pointer)</span><span class="params">(Args...)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">size_t</span> I&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">args</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">static_assert</span>(I &lt; arity, <span class="string">"index is out of range, index must less than sizeof Args"</span>);</span><br><span class="line">        <span class="keyword">using</span> type = <span class="keyword">typename</span> <span class="built_in">std</span>::tuple_element&lt;I, <span class="built_in">std</span>::tuple&lt;Args...&gt;&gt;::type;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类函数萃取</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ret, <span class="keyword">typename</span> Class, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">function_traits</span>&lt;Ret(Class::*) (Args...)&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> &#123; arity = <span class="keyword">sizeof</span>...(Args) &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> Ret <span class="title">function_type</span><span class="params">(Args...)</span></span>;</span><br><span class="line">    <span class="keyword">typedef</span> Ret return_type;</span><br><span class="line">    <span class="keyword">using</span> stl_function_type = <span class="built_in">std</span>::function&lt;function_type&gt;;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">Ret</span><span class="params">(Class::* pointer)</span><span class="params">(Args...)</span></span>;</span><br><span class="line">    <span class="keyword">typedef</span> Class class_type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">size_t</span> I&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">args</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">static_assert</span>(I &lt; arity, <span class="string">"index is out of range, index must less than sizeof Args"</span>);</span><br><span class="line">        <span class="keyword">using</span> type = <span class="keyword">typename</span> <span class="built_in">std</span>::tuple_element&lt;I, <span class="built_in">std</span>::tuple&lt;Args...&gt;&gt;::type;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数指针</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ret, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">function_traits</span>&lt;Ret(*)(Args...)&gt; :</span> function_traits&lt;Ret(Args...)&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//std::function</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Ret, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">function_traits</span>&lt;std::function&lt;Ret(Args...)&gt;&gt; :</span> function_traits&lt;Ret(Args...)&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//member function</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span> ClassType, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">function_traits</span>&lt;ReturnType(ClassType::*)(Args...) const&gt; :</span> function_traits&lt;ReturnType(ClassType::*)(Args...)&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数对象</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Callable&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">function_traits</span> :</span> function_traits&lt;<span class="keyword">decltype</span>(&amp;Callable::<span class="keyword">operator</span>())&gt; &#123;&#125;;</span><br></pre></td></tr></table></div></figure><p>由于可调用对象可能是普通的函数、函数指针、lambda、std::function和成员函数，所以我们需要针对这些类型分别做偏特化，然后萃取出可调用对象的元信息。其中，成员函数的偏特化稍微复杂一点，因为涉及到cv符的处理，这里通过定义一个宏来消除重复的模板类定义。参数类型的获取我们是借助于tuple，将参数转换为tuple类型，然后根据索引来获取对应类型。它的用法比较简单：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//类函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0.1</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintType</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(T).name() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> (S::* cfptr)(<span class="keyword">const</span> <span class="keyword">char</span>*) = &amp;S::fun; <span class="comment">// class fnptr</span></span><br><span class="line">    <span class="keyword">double</span> (*fptr)() = fun; <span class="comment">//fnptr</span></span><br><span class="line">    <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; f = [](<span class="keyword">int</span> a) &#123;<span class="keyword">return</span> a; &#125;;  <span class="comment">//function</span></span><br><span class="line">    <span class="keyword">auto</span> lambda = [](<span class="keyword">int</span> a) &#123;<span class="keyword">return</span> a; &#125;; <span class="comment">// lambda</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印函数类型</span></span><br><span class="line">    PrintType&lt;function_traits&lt;<span class="keyword">decltype</span>(fptr)&gt;::function_type&gt;(); <span class="comment">//将输出double __cdecl&lt;void&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//打印类函数指针类型</span></span><br><span class="line">    PrintType&lt;function_traits&lt;<span class="keyword">decltype</span>(&amp;cfptr)&gt;::pointer&gt;(); <span class="comment">//将输出void &lt;__thiscall S::*&gt;&lt;char const *&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印函数的第一个参数类型</span></span><br><span class="line">    PrintType&lt;function_traits&lt;<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">bool</span>)&gt;&gt;::args&lt;<span class="number">0</span>&gt;::type&gt;();<span class="comment">//将输出bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印函数的返回类型</span></span><br><span class="line">    PrintType&lt;function_traits&lt;<span class="keyword">decltype</span>(f)&gt;::return_type&gt;(); <span class="comment">//将输出int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印函数指针类型</span></span><br><span class="line">    PrintType&lt;function_traits&lt;<span class="keyword">decltype</span>(f)&gt;::pointer&gt;(); <span class="comment">//将输出int &lt;__cdecl*&gt;&lt;int&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印function函数类型</span></span><br><span class="line">    PrintType&lt;function_traits&lt;<span class="keyword">decltype</span>(f)&gt;::stl_function_type&gt;(); <span class="comment">//将输出class std::function&lt;int __cdecl&lt;int&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//lambda =&gt; 隐式转化为了匿名类对象</span></span><br><span class="line">    PrintType&lt;function_traits&lt;<span class="keyword">decltype</span>(lambda)&gt;::class_type&gt;(); <span class="comment">//将输出class &lt;lambda_13vr3tgewf32rt23rfgt435g41239da&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>gun gcc下：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FdvE</span><br><span class="line">b</span><br><span class="line">i</span><br><span class="line">PFiiE</span><br><span class="line">St8functionIFiiEE</span><br><span class="line">Z4mainEUliE0_</span><br><span class="line">M1SFvPKcE</span><br></pre></td></tr></table></div></figure><p>Visual studio下：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> __cdecl(<span class="keyword">void</span>)</span><br><span class="line"><span class="keyword">void</span> (__thiscall S::*)(<span class="keyword">char</span> <span class="keyword">const</span> *)</span><br><span class="line"><span class="keyword">bool</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="keyword">int</span> (__cdecl*)(<span class="keyword">int</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">std</span>:</span>:function&lt;<span class="keyword">int</span> __cdecl(<span class="keyword">int</span>)&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;lambda_173ed6f42b6e4df55bf9ec2e4778d93a&gt;</span></span><br></pre></td></tr></table></div></figure><p>其实结果是一样的，至于为什么可以参考<a href="http://www.cppblog.com/smagle/archive/2010/05/14/115286.html" target="_blank" rel="noopener">这里</a></p><p>可以看到这个function_traits通过类型萃取，可以很方便地获取可调用对象（函数、函数指针、函数对象、std::function和lambda表达式）的一些元信息，功能非常强大，这个function_traits经常会用到是更高层模版元程序的基础。比如Variant类型的实现就要用到这个function_traits，下面来看看Variant的实现。</p><h3 id="3-Variant">3.Variant<a href="post/模版元编程应用#3-Variant"></a></h3><p>　　借助上面的function_traits和前文实现的一些元函数，我们就能方便的实现一个“万能类型”—Variant，Variant实际上一个泛化的类型，这个Variant和boost.variant的用法类似，需要预定义一些类型作为可接受的类型。boost.variant的基本用法如下：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> variant&lt;<span class="keyword">int</span>,<span class="keyword">char</span>, <span class="keyword">double</span>&gt; vt;</span><br><span class="line">vt v = <span class="number">1</span>;</span><br><span class="line">v = <span class="string">'a'</span>;</span><br><span class="line">v = <span class="number">12.32</span>;</span><br></pre></td></tr></table></div></figure><p>　　这个variant可以接受已经定义的那些类型，看起来有点类似于c#和java中的object类型，实际上variant是擦除了类型，要获取它的实际类型的时候就稍显麻烦，需要通过boost.visitor来访问：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VariantVisitor</span> :</span> <span class="keyword">public</span> boost::static_visitor&lt;<span class="keyword">void</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"int"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">short</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"short"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">double</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"double"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"string"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">boost::variant&lt;<span class="keyword">int</span>,<span class="keyword">short</span>,<span class="keyword">double</span>,<span class="built_in">std</span>::<span class="built_in">string</span>&gt; v = <span class="number">1</span>;</span><br><span class="line">boost::apply_visitor(visitor, v); <span class="comment">//将输出int</span></span><br></pre></td></tr></table></div></figure><p>​    　通过C++11模版元实现的Variant将改进值的获取，将获取实际值的方式改为内置的，即通过下面的方式来访问：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Variant&lt;<span class="keyword">int</span>, <span class="keyword">double</span>, <span class="built_in">string</span>, <span class="keyword">int</span>&gt; cv;</span><br><span class="line">cv v = <span class="number">10</span>;</span><br><span class="line">v.Visit([&amp;](<span class="keyword">double</span> i)&#123;<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; &#125;, [](<span class="keyword">short</span> i)&#123;<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; &#125;, [=](<span class="keyword">int</span> i)&#123;<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; &#125;,[](<span class="keyword">const</span> <span class="built_in">string</span>&amp; i)&#123;<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; &#125;);<span class="comment">//结果将输出10</span></span><br></pre></td></tr></table></div></figure><p>　这种方式更方便直观。Variant的实现需要借助前文中实现的一些元函数MaxInteger、MaxAlign、Contains和At等等。可以在下面的tab中展开观看，下面来看看Variant实现的关键代码。<br>IntegerMax代码：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取整数列表中最大的整数 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> arg, <span class="built_in">std</span>::<span class="keyword">size_t</span>... rest&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntegerMax</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> arg&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntegerMax</span>&lt;arg&gt; :</span> <span class="built_in">std</span>::integral_constant&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>, arg&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> arg1, <span class="built_in">std</span>::<span class="keyword">size_t</span> arg2, <span class="built_in">std</span>::<span class="keyword">size_t</span>... rest&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntegerMax</span>&lt;arg1, arg2, rest...&gt; :</span> <span class="built_in">std</span>::integral_constant&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>, arg1 &gt;= arg2 ? IntegerMax&lt;arg1, rest...&gt;::value</span><br><span class="line">    : IntegerMax&lt;arg2, rest...&gt;::value&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>MaxAlign代码：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取最大的align */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaxAlign</span> :</span> <span class="built_in">std</span>::integral_constant&lt;<span class="keyword">int</span>, IntegerMax&lt;<span class="built_in">std</span>::alignment_of&lt;Args&gt;::value...&gt;::value&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>Contains代码：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 是否包含某个类型 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... List&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Contains</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Rest&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Contains</span>&lt;T, Head, Rest...&gt;</span></span><br><span class="line"><span class="class">    :</span> <span class="built_in">std</span>::conditional&lt;<span class="built_in">std</span>::is_same&lt;T, Head&gt;::value, <span class="built_in">std</span>::true_type, Contains&lt;T, Rest... &gt;&gt; ::type</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Contains</span>&lt;T&gt; :</span> <span class="built_in">std</span>::false_type</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>IndexOf代码：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... List&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IndexOf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Rest&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IndexOf</span>&lt;T, Head, Rest...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; value = IndexOf&lt;T, Rest...&gt;::value + <span class="number">1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Rest&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IndexOf</span>&lt;T, T, Rest...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; value = <span class="number">0</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IndexOf</span>&lt;T&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">enum</span>&#123;value = <span class="number">-1</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>At代码：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> index, <span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">At</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> index, <span class="keyword">typename</span> First, <span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">At</span>&lt;index, First, Types...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">using</span> type = <span class="keyword">typename</span> At&lt;index - <span class="number">1</span>, Types...&gt;::type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">At</span>&lt;0, T, Types...&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">using</span> type = T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>Variant关键代码：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Variant</span>&#123;</span></span><br><span class="line">    <span class="keyword">enum</span>&#123;</span><br><span class="line">        data_size = IntegerMax&lt;<span class="keyword">sizeof</span>(Types)...&gt;::value, <span class="comment">//参数个数</span></span><br><span class="line">        align_size = MaxAlign&lt;Types...&gt;::value<span class="comment">//参数最大字节数</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">data_t</span> = <span class="keyword">typename</span> <span class="built_in">std</span>::aligned_storage&lt;data_size, align_size&gt;::type;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">int</span> index&gt;</span><br><span class="line">    <span class="keyword">using</span> IndexType = <span class="keyword">typename</span> At&lt;index, Types...&gt;::type;</span><br><span class="line"></span><br><span class="line">    Variant(<span class="keyword">void</span>) :m_typeIndex(<span class="keyword">typeid</span>(<span class="keyword">void</span>))&#123;&#125;</span><br><span class="line">    ~Variant()&#123; Destroy(m_typeIndex, &amp;m_data); &#125;</span><br><span class="line"></span><br><span class="line">    Variant(Variant&lt;Types...&gt;&amp;&amp; old) : m_typeIndex(old.m_typeIndex)&#123;</span><br><span class="line">        Move(old.m_typeIndex, &amp;old.m_data, &amp;m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Variant(<span class="keyword">const</span> Variant&lt;Types...&gt;&amp; old) : m_typeIndex(old.m_typeIndex)&#123;</span><br><span class="line">        Copy(old.m_typeIndex, &amp;old.m_data, &amp;m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,</span></span><br><span class="line"><span class="class">    <span class="title">class</span> = <span class="title">typename</span> <span class="title">std</span>:</span>:enable_if&lt;Contains&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type, Types...&gt;::value&gt;::type&gt; Variant(T&amp;&amp; value) : m_typeIndex(<span class="keyword">typeid</span>(<span class="keyword">void</span>))&#123;</span><br><span class="line">            Destroy(m_typeIndex, &amp;m_data);</span><br><span class="line">            <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type U;</span><br><span class="line">            <span class="keyword">new</span>(&amp;m_data) U(<span class="built_in">std</span>::forward&lt;T&gt;(value));</span><br><span class="line">            m_typeIndex = type_index(<span class="keyword">typeid</span>(U));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Is</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (m_typeIndex == type_index(<span class="keyword">typeid</span>(T)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;T&gt;::<span class="function">type&amp; <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">using</span> U = <span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;T&gt;::type;</span><br><span class="line">        <span class="keyword">if</span> (!Is&lt;U&gt;())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(U).name() &lt;&lt; <span class="string">" is not defined. "</span> &lt;&lt; <span class="string">"current type is "</span> &lt;&lt;</span><br><span class="line">                m_typeIndex.name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::bad_cast();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *(U*)(&amp;m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(F&amp;&amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">using</span> T = <span class="keyword">typename</span> Function_Traits&lt;F&gt;::<span class="keyword">template</span> arg&lt;<span class="number">0</span>&gt;::type;</span><br><span class="line">        <span class="keyword">if</span> (Is&lt;T&gt;())</span><br><span class="line">            f(Get&lt;T&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... Rest&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(F&amp;&amp; f, Rest&amp;&amp;... rest)</span></span>&#123;</span><br><span class="line">        <span class="keyword">using</span> T = <span class="keyword">typename</span> Function_Traits&lt;F&gt;::<span class="keyword">template</span> arg&lt;<span class="number">0</span>&gt;::type;</span><br><span class="line">        <span class="keyword">if</span> (Is&lt;T&gt;())</span><br><span class="line">            Visit(<span class="built_in">std</span>::forward&lt;F&gt;(f));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Visit(<span class="built_in">std</span>::forward&lt;Rest&gt;(rest)...);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(<span class="keyword">const</span> type_index&amp; index, <span class="keyword">void</span> * buf)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;&#123;(Destroy0&lt;Types&gt;(index, buf), <span class="number">0</span>)...&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Destroy0</span><span class="params">(<span class="keyword">const</span> type_index&amp; id, <span class="keyword">void</span>* data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == type_index(<span class="keyword">typeid</span>(T)))</span><br><span class="line">            <span class="keyword">reinterpret_cast</span>&lt;T*&gt;(data)-&gt;~T();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">const</span> type_index&amp; <span class="keyword">old_t</span>, <span class="keyword">void</span>* old_v, <span class="keyword">void</span>* new_v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;&#123;(Move0&lt;Types&gt;(<span class="keyword">old_t</span>, old_v, new_v), <span class="number">0</span>)...&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Move0</span><span class="params">(<span class="keyword">const</span> type_index&amp; <span class="keyword">old_t</span>, <span class="keyword">void</span>* old_v, <span class="keyword">void</span>* new_v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">old_t</span> == type_index(<span class="keyword">typeid</span>(T)))</span><br><span class="line">            <span class="keyword">new</span> (new_v)T(<span class="built_in">std</span>::move(*<span class="keyword">reinterpret_cast</span>&lt;T*&gt;(old_v)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Copy</span><span class="params">(<span class="keyword">const</span> type_index&amp; <span class="keyword">old_t</span>, <span class="keyword">void</span>* old_v, <span class="keyword">void</span>* new_v)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;&#123;(Copy0&lt;Types&gt;(<span class="keyword">old_t</span>, old_v, new_v), <span class="number">0</span>)...&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Copy0</span><span class="params">(<span class="keyword">const</span> type_index&amp; <span class="keyword">old_t</span>, <span class="keyword">void</span>* old_v, <span class="keyword">void</span>* new_v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">old_t</span> == type_index(<span class="keyword">typeid</span>(T)))</span><br><span class="line">            <span class="keyword">new</span> (new_v)T(*<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> T*&gt;(old_v));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">data_t</span> m_data;</span><br><span class="line">    <span class="built_in">std</span>::type_index m_typeIndex;<span class="comment">//类型ID</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>　实现Variant首先需要定义一个足够大的缓冲区用来存放不同的类型的值，这个缓类型冲区实际上就是用来擦除类型，不同的类型都通过placement new在这个缓冲区上创建对象，因为类型长度不同，所以需要考虑内存对齐，C++11刚好提供了内存对齐的缓冲区aligned_storage：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="built_in">std</span>::<span class="keyword">size_t</span> Len, <span class="built_in">std</span>::<span class="keyword">size_t</span> Align = <span class="comment">/*default-alignment*/</span> &gt;</span><br><span class="line">struct aligned_storage;</span><br></pre></td></tr></table></div></figure><p>它的第一个参数是缓冲区的长度，第二个参数是缓冲区内存对齐的大小，由于Varaint可以接受多种类型，所以我们需要获取最大的类型长度，保证缓冲区足够大，然后还要获取最大的内存对齐大小，这里我们通过前面实现的MaxInteger和MaxAlign就可以了，Varaint中内存对齐的缓冲区定义如下：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">        data_size = IntegerMax&lt;<span class="keyword">sizeof</span>(Types)...&gt;::value,</span><br><span class="line">        align_size = MaxAlign&lt;Types...&gt;::value</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">data_t</span> = <span class="keyword">typename</span> <span class="built_in">std</span>::aligned_storage&lt;data_size, align_size&gt;::type; <span class="comment">//内存对齐的缓冲区类型</span></span><br></pre></td></tr></table></div></figure><p>其次，我们还要实现对缓冲区的构造、拷贝、析构和移动，因为Variant重新赋值的时候需要将缓冲区中原来的类型析构掉，拷贝构造和移动构造时则需要拷贝和移动。这里以析构为例，我们需要根据当前的type_index来遍历Variant的所有类型，找到对应的类型然后调用该类型的析构函数。</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">　　 <span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(<span class="keyword">const</span> type_index&amp; index, <span class="keyword">void</span> * buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;&#123;(Destroy0&lt;Types&gt;(index, buf), <span class="number">0</span>)...&#125;;</span><br><span class="line"> <span class="comment">//这里通过一个初始化列表来初始化一个变长数组，int数组的目的就是为了在数组构造的过程展开参数包</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy0</span><span class="params">(<span class="keyword">const</span> type_index&amp; id, <span class="keyword">void</span>* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == type_index(<span class="keyword">typeid</span>(T)))</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;T*&gt;(data)-&gt;~T();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这里，我们通过初始化列表和逗号表达式来展开可变模板参数，在展开的过程中查找对应的类型，如果找到了则析构。在Variant构造时还需要注意一个细节是，Variant不能接受没有预先定义的类型，所以在构造Variant时，需要限定类型必须在预定义的类型范围当中，这里通过type_traits的enable_if来限定模板参数的类型。</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,</span></span><br><span class="line"><span class="class">    <span class="title">class</span> = <span class="title">typename</span> <span class="title">std</span>:</span>:enable_if&lt;Contains&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type, Types...&gt;::value&gt;::type&gt; Variant(T&amp;&amp; value) : m_typeIndex(<span class="keyword">typeid</span>(<span class="keyword">void</span>))&#123;</span><br><span class="line">            Destroy(m_typeIndex, &amp;m_data);</span><br><span class="line">            <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;T&gt;::type U;</span><br><span class="line">            <span class="keyword">new</span>(&amp;m_data) U(<span class="built_in">std</span>::forward&lt;T&gt;(value));</span><br><span class="line">            m_typeIndex = type_index(<span class="keyword">typeid</span>(U));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>这里enbale_if的条件就是前面实现的元函数Contains的值，当没有在预定义的类型中找到对应的类型时，即Contains返回false时，编译期会报一个编译错误。</p><p>最后还需要实现内置的Vistit功能，Visit的实现需要先通过定义一系列的访问函数，然后再遍历这些函数，遍历过程中，判断函数的第一个参数类型的type_index是否与当前的type_index相同，如果相同则获取当前类型的值。</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(F&amp;&amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">using</span> T = <span class="keyword">typename</span> Function_Traits&lt;F&gt;::<span class="keyword">template</span> arg&lt;<span class="number">0</span>&gt;::type;</span><br><span class="line">        <span class="keyword">if</span> (Is&lt;T&gt;())</span><br><span class="line">            f(Get&lt;T&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... Rest&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(F&amp;&amp; f, Rest&amp;&amp;... rest)</span></span>&#123;</span><br><span class="line">        <span class="keyword">using</span> T = <span class="keyword">typename</span> Function_Traits&lt;F&gt;::<span class="keyword">template</span> arg&lt;<span class="number">0</span>&gt;::type;</span><br><span class="line">        <span class="keyword">if</span> (Is&lt;T&gt;())</span><br><span class="line">            Visit(<span class="built_in">std</span>::forward&lt;F&gt;(f));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Visit(<span class="built_in">std</span>::forward&lt;Rest&gt;(rest)...);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>　Visit功能的实现利用了可变模板参数和function_traits，通过可变模板参数来遍历一系列的访问函数，遍历过程中，通过function_traits来获取第一个参数的类型，和Variant当前的type_index相同时则取值。为什么要获取访问函数第一个参数的类型呢？因为Variant的值是唯一的，只有一个值，所以获取的访问函数的第一个参数的类型就是Variant中存储的对象的实际类型。</p><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-概述&quot;&gt;1.概述&lt;a href=&quot;post/模版元编程应用#1-概述&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;　　关于C++11模板元的基本用法和常用技巧，在常规编程中可能很少遇到，那么C++11模版元编程用来解决什么实际问题呢，在实际工程中又该如何应用呢？本文将侧重介绍C++11模板的一些具体应用，向读者展示模版元编程的具体应用。&lt;/p&gt;
&lt;p&gt;　　我们将展示如何通过C++11模版元来实现function_traits、Vairant类型和泛型bind绑定器。function_traits侧重于如何萃取可调用对象的一些元信息，Variant则是一种能接受多种类型数据的“万能”类型，bind则是一个泛化的绑定器，下面来看看这些具体的例子。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://shuntan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuntan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中优雅的异步操作</title>
    <link href="https://shuntan.github.io/posts/C++%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
    <id>https://shuntan.github.io/posts/C++中优雅的异步操作/</id>
    <published>2019-06-14T06:21:26.000Z</published>
    <updated>2019-07-03T11:59:47.143Z</updated>
    
    <content type="html"><![CDATA[<p>　　c++11中增加了线程，使得我们可以非常方便的创建线程，它的基本用法是这样的：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t</span><span class="params">(f, n + <span class="number">1</span>)</span></span>;</span><br><span class="line">t.join();</span><br></pre></td></tr></table></div></figure><p>　　但是线程毕竟是属于比较低层次的东西，有时候使用有些不便，比如我希望获取线程函数的返回结果的时候，我就不能直接通过thread.join()得到结果，这时就必须定义一个变量，在线程函数中去给这个变量赋值，然后join,最后得到结果，这个过程是比较繁琐的。c++11还提供了异步接口std::async，通过这个异步接口可以很方便的获取线程函数的执行结果。std::async会自动创建一个线程去调用线程函数，它返回一个std::future，这个future中存储了线程函数返回的结果，当我们需要线程函数的结果时，直接从future中获取，非常方便。但是我想说的是，<strong>其实std::async给我们提供的便利可不仅仅是这一点，它首先解耦了线程的创建和执行，使得我们可以在需要的时候获取异步操作的结果；其次它还提供了线程的创建策略（比如可以通过延迟加载的方式去创建线程）</strong>，使得我们可以以多种方式去创建线程。在介绍async具体用法以及为什么要用std::async代替线程的创建之前，我想先说一说std::future、std::promise和std::packaged_task。</p><a id="more"></a><h2 id="std-futur">std::futur<a href="post/C++中优雅的异步操作#std-futur"></a></h2><p>　　std::future是一个非常有用也很有意思的东西，简单说std::future提供了一种访问异步操作结果的机制。从字面意思来理解，它表示未来，我觉得这个名字非常贴切，因为一个异步操作我们是不可能马上就获取操作结果的，只能在未来某个时候获取，但是我们可以以同步等待的方式来获取结果，可以通过查询future的状态（future_status）来获取异步操作的结果。future_status有三种状态：</p><ul><li>deferred：异步操作还没开始</li><li>ready：异步操作已经完成</li><li>timeout：异步操作超时</li></ul><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询future的状态</span></span><br><span class="line"><span class="built_in">std</span>::future_status status;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        status = future.wait_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (status == <span class="built_in">std</span>::future_status::deferred) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"deferred\n"</span>; <span class="comment">//代表延迟执行</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="built_in">std</span>::future_status::timeout) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"timeout\n"</span>;  <span class="comment">//代表执行中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="built_in">std</span>::future_status::ready) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ready!\n"</span>;   <span class="comment">//代表已经执行完成</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (status != <span class="built_in">std</span>::future_status::ready);</span><br></pre></td></tr></table></div></figure><p>　　获取future结果有三种方式：get、wait、wait_for，其中get等待异步操作结束并返回结果，wait只是等待异步操作完成，没有返回值，wait_for是超时等待返回结果。</p><h2 id="std-promise">std::promise<a href="post/C++中优雅的异步操作#std-promise"></a></h2><p>　　std::promise为获取线程函数中的某个值提供便利，在线程函数中给外面传进来的promise赋值，当线程函数执行完成之后就可以通过promis获取该值了，值得注意的是取值是间接的通过promise内部提供的future来获取的。它的基本用法：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::promise&lt;<span class="keyword">int</span>&gt; pr;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t</span><span class="params">([](<span class="built_in">std</span>::promise&lt;<span class="keyword">int</span>&gt;&amp; p)&#123; p.set_value_at_thread_exit(<span class="number">9</span>); &#125;,<span class="built_in">std</span>::ref(pr))</span></span>;</span><br><span class="line"><span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; f = pr.get_future();</span><br><span class="line"><span class="keyword">auto</span> r = f.get();</span><br></pre></td></tr></table></div></figure><h2 id="std-packaged-task">std::packaged_task<a href="post/C++中优雅的异步操作#std-packaged-task"></a></h2><p>　　std::packaged_task它包装了一个可调用的目标（如function, lambda expression, bind expression, or another function object）,以便异步调用，它和promise在某种程度上有点像，promise保存了一个共享状态的值，而packaged_task保存的是一个函数。它的基本用法：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::packaged_task&lt;<span class="keyword">int</span>()&gt; task([]()&#123; <span class="keyword">return</span> <span class="number">7</span>; &#125;);</span><br><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(<span class="built_in">std</span>::ref(task))</span></span>; </span><br><span class="line"><span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; f1 = task.get_future(); </span><br><span class="line"><span class="keyword">auto</span> r1 = f1.get();</span><br></pre></td></tr></table></div></figure><h2 id="std-promise、std-packaged-task和std-future的关系">std::promise、std::packaged_task和std::future的关系<a href="post/C++中优雅的异步操作#std-promise、std-packaged-task和std-future的关系"></a></h2><p>　　至此, 我们介绍了std::async相关的几个对象std::future、std::promise和std::packaged_task，其中std::promise和std::packaged_task的结果最终都是通过其内部的future返回出来的，不知道读者有没有搞糊涂，为什么有这么多东西出来，他们之间的关系到底是怎样的？且听我慢慢道来，std::future提供了一个访问异步操作结果的机制，它和线程是一个级别的属于低层次的对象，在它之上高一层的是std::packaged_task和std::promise，他们内部都有future以便访问异步操作结果，<strong>std::packaged_task包装的是一个异步操作，而std::promise包装的是一个值，都是为了方便异步操作的，因为有时我需要获取线程中的某个值，这时就用std::promise，而有时我需要获一个异步操作的返回值，这时就用std::packaged_task。</strong>那std::promise和std::packaged_task之间又是什么关系呢？说他们没关系也关系，说他们有关系也有关系，都取决于你了，因为我可以将一个异步操作的结果保存到std::promise中。如果读者还没搞清楚他们的关系的话，我就用更通俗的话来解释一下。比如，一个小伙子给一个姑娘表白真心的时候也许会说：”我许诺会给你一个美好的未来“或者”我会努力奋斗为你创造一个美好的未来“。姑娘往往会说：”我等着“。现在我来将这三句话用c++11来翻译一下：</p><p>小伙子说：我许诺会给你一个美好的未来等于c++11中”std::promise a std::future”;<br>小伙子说：我会努力奋斗为你创造一个美好的未来等于c++11中”std::packaged_task a future”;<br>姑娘说：我等着等于c++11中”future.get()/wait()”;</p><p>　　小伙子两句话的个中差异，自己琢磨一下，这点差异也是std::promise和std::packaged_task的差异。现实中的山盟海誓靠不靠得住我不知道，但是c++11中的许诺和未来是一定可靠的，发起来了许诺就一定有未来。细想起来c++11标准的制定者选定的关键字真是贴切而有意思！好了，插科打诨到此了，现在言归正传，回过头来说说std::async。</p><h2 id="为什么要用std-async代替线程的创建">为什么要用std::async代替线程的创建<a href="post/C++中优雅的异步操作#为什么要用std-async代替线程的创建"></a></h2><p>　　std::async又是干啥的，已经有了td::future、std::promise和std::packaged_task，够多的了，真的还要一个std::async来凑热闹吗，std::async表示很委屈：我不是来凑热闹的，我是来帮忙的。是的，std::async是为了让用户的少费点脑子的，它让这三个对象默契的工作。大概的工作过程是这样的：std::async先将异步操作用std::packaged_task包装起来，然后将异步操作的结果放到std::promise中，这个过程就是创造未来的过程。外面再通过future.get/wait来获取这个未来的结果，怎么样，std::async真的是来帮忙的吧，你不用再想到底该怎么用std::future、std::promise和std::packaged_task了，std::async已经帮你搞定一切了！</p><p>　　现在来看看std::async的原型async(std::launch::async | std::launch::deferred, f, args…)，第一个参数是线程的创建策略，有两种策略，默认的策略是立即创建线程：</p><ul><li>std::launch::async：在调用async就开始创建线程。</li><li>std::launch::deferred：延迟加载方式创建线程。调用async时不创建线程，直到调用了future的get或者wait时才创建线程。可能在这里会阻塞住主线程。</li></ul><p>第二个参数是线程函数，第三个参数是线程函数的参数。</p><p><strong>std::async基本用法：</strong></p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; f1 = <span class="built_in">std</span>::async(<span class="built_in">std</span>::launch::async, []()&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;  </span><br><span class="line">    &#125;); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f1.get()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//output: 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; f2 = <span class="built_in">std</span>::async(<span class="built_in">std</span>::launch::async, []()&#123; </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">8</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;); </span><br><span class="line"></span><br><span class="line">f2.wait(); <span class="comment">//output: 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; future = <span class="built_in">std</span>::async(<span class="built_in">std</span>::launch::async, []()&#123; </span><br><span class="line">        <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;  </span><br><span class="line">    &#125;); </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"waiting...\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::future_status status;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        status = future.wait_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (status == <span class="built_in">std</span>::future_status::deferred) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"deferred\n"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="built_in">std</span>::future_status::timeout) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"timeout\n"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="built_in">std</span>::future_status::ready) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ready!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (status != <span class="built_in">std</span>::future_status::ready); </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"result is "</span> &lt;&lt; future.get() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">可能的结果：</span><br><span class="line">waiting...</span><br><span class="line">timeout</span><br><span class="line">timeout</span><br><span class="line">ready!</span><br><span class="line">result is <span class="number">8</span></span><br></pre></td></tr></table></div></figure><h2 id="总结：">总结：<a href="post/C++中优雅的异步操作#总结："></a></h2><p>　　std::async是更高层次上的异步操作，使我们不用关注线程创建内部细节，就能方便的获取异步执行状态和结果，还可以指定线程创建策略，应该用std::async替代线程的创建，让它成为我们做异步操作的首选。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　c++11中增加了线程，使得我们可以非常方便的创建线程，它的基本用法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f, n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.join();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;　　但是线程毕竟是属于比较低层次的东西，有时候使用有些不便，比如我希望获取线程函数的返回结果的时候，我就不能直接通过thread.join()得到结果，这时就必须定义一个变量，在线程函数中去给这个变量赋值，然后join,最后得到结果，这个过程是比较繁琐的。c++11还提供了异步接口std::async，通过这个异步接口可以很方便的获取线程函数的执行结果。std::async会自动创建一个线程去调用线程函数，它返回一个std::future，这个future中存储了线程函数返回的结果，当我们需要线程函数的结果时，直接从future中获取，非常方便。但是我想说的是，&lt;strong&gt;其实std::async给我们提供的便利可不仅仅是这一点，它首先解耦了线程的创建和执行，使得我们可以在需要的时候获取异步操作的结果；其次它还提供了线程的创建策略（比如可以通过延迟加载的方式去创建线程）&lt;/strong&gt;，使得我们可以以多种方式去创建线程。在介绍async具体用法以及为什么要用std::async代替线程的创建之前，我想先说一说std::future、std::promise和std::packaged_task。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://shuntan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuntan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>mutex头文件介绍</title>
    <link href="https://shuntan.github.io/posts/Mutex%E4%BB%8B%E7%BB%8D/"/>
    <id>https://shuntan.github.io/posts/Mutex介绍/</id>
    <published>2019-06-14T03:00:47.000Z</published>
    <updated>2019-07-03T11:59:58.214Z</updated>
    
    <content type="html"><![CDATA[<p>Mutex 又称互斥量，C++ 11中与 Mutex 相关的类（包括锁类型）和函数都声明在 <mutex> 头文件中，所以如果你需要使用 std::mutex，就必须包含 <mutex> 头文件。</mutex></mutex></p><h3 id="头文件介绍"><mutex> 头文件介绍</mutex><a href="post/Mutex介绍#头文件介绍"></a></h3><h4 id="Mutex-系列类-四种">Mutex 系列类(四种)<a href="post/Mutex介绍#Mutex-系列类-四种"></a></h4><ul><li><p>std::mutex，最基本的 Mutex 类。</p></li><li><p>std::recursive_mutex，递归 Mutex 类。</p></li><li><p>std::time_mutex，定时 Mutex 类。</p></li><li><p>std::recursive_timed_mutex，定时递归 Mutex 类。</p></li></ul><a id="more"></a><h4 id="Lock-类（两种）">Lock 类（两种）<a href="post/Mutex介绍#Lock-类（两种）"></a></h4><ul><li>std::lock_guard，与 Mutex RAII 相关，方便线程对互斥量上锁。</li><li>std::unique_lock，与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。</li></ul><h4 id="其他类型">其他类型<a href="post/Mutex介绍#其他类型"></a></h4><ul><li>std::once_flag</li><li>std::adopt_lock_t</li><li>std::defer_lock_t</li><li>std::try_to_lock_t</li></ul><h4 id="函数">函数<a href="post/Mutex介绍#函数"></a></h4><ul><li>std::try_lock，尝试同时对多个互斥量上锁。</li><li>std::lock，可以同时对多个互斥量上锁。</li><li>std::call_once，如果多个线程需要同时调用某个函数，call_once 可以保证多个线程对该函数只调用一次。</li></ul><h3 id="std-mutex-介绍">std::mutex 介绍<a href="post/Mutex介绍#std-mutex-介绍"></a></h3><p>下面以 std::mutex 为例介绍 C++11 中的互斥量用法。</p><p>std::mutex 是C++11 中最基本的互斥量，std::mutex 对象提供了独占所有权的特性——即不支持递归地对 std::mutex 对象上锁，而 std::recursive_lock 则可以递归地对互斥量对象上锁。</p><h4 id="std-mutex-的成员函数">std::mutex 的成员函数<a href="post/Mutex介绍#std-mutex-的成员函数"></a></h4><ul><li>构造函数，std::mutex不允许拷贝构造，也不允许 move 拷贝，最初产生的 mutex 对象是处于 unlocked 状态的。</li><li>lock()，调用线程将锁住该互斥量。线程调用该函数会发生下面 3 种情况：(1). 如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁。(2). 如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</li><li>unlock()， 解锁，释放对互斥量的所有权。</li><li>try_lock()，尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞。线程调用该函数也会出现下面 3 种情况，(1). 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量。(2). 如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉。(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。</li></ul><p>下面给出一个与 std::mutex 的小例子（<a href="http://www.cplusplus.com/reference/mutex/mutex/try_lock/" target="_blank" rel="noopener">参考</a>）</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;       // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;         // std::thread</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;          // std::mutex</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">volatile</span> <span class="keyword">int</span> <span class="title">counter</span><span class="params">(<span class="number">0</span>)</span></span>; <span class="comment">// non-atomic counter</span></span><br><span class="line"><span class="built_in">std</span>::mutex mtx;           <span class="comment">// locks access to counter</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attempt_10k_increases</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mtx.try_lock()) &#123;   <span class="comment">// only increase if currently not locked:</span></span><br><span class="line">            ++counter;</span><br><span class="line">            mtx.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::thread threads[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        threads[i] = <span class="built_in">std</span>::thread(attempt_10k_increases);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; th : threads) th.join();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; counter &lt;&lt; <span class="string">" successful increases of the counter.\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$g++ -lpthread -<span class="built_in">std</span>=c++<span class="number">11</span> -o main *.cpp</span><br><span class="line">$main</span><br><span class="line"><span class="number">9012</span> successful increases of the counter.</span><br></pre></td></tr></table></div></figure><blockquote><p>可以看出有很多次mtx.try_lock()返回了false，并没有执行++counter操作。</p><p>如果把mtx.try_lock()改成mtx.lock()，则必定会阻塞其他线程。</p></blockquote><p>输出结果2:</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$g++ -lpthread -<span class="built_in">std</span>=c++<span class="number">11</span> -o main *.cpp</span><br><span class="line">$main</span><br><span class="line"><span class="number">100000</span> successful increases of the counter.</span><br></pre></td></tr></table></div></figure><h3 id="std-recursive-mutex-介绍">std::recursive_mutex 介绍<a href="post/Mutex介绍#std-recursive-mutex-介绍"></a></h3><p>std::recursive_mutex 与 std::mutex 一样，也是一种可以被上锁的对象，但是和 std::mutex 不同的是，std::recursive_mutex 允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，std::recursive_mutex 释放互斥量时需要调用与该锁层次深度相同次数的 unlock()，可理解为 lock() 次数和 unlock() 次数相同，除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同。</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;       // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;         // std::thread</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;          // std::mutex</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">volatile</span> <span class="keyword">int</span> <span class="title">counter</span><span class="params">(<span class="number">0</span>)</span></span>; <span class="comment">// non-atomic counter</span></span><br><span class="line"><span class="built_in">std</span>::recursive_mutex  rmtx;           <span class="comment">// locks access to counter</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attempt_1k_increases</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">        rmtx.lock();   </span><br><span class="line">        ++counter; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123; </span><br><span class="line">        counter-=<span class="number">2</span>; </span><br><span class="line">        rmtx.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> th = <span class="built_in">std</span>::thread(attempt_1k_increases);</span><br><span class="line">    th.join();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; counter &lt;&lt; <span class="string">" successful increases of the counter.\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$g++ -lpthread -o main *.cpp</span><br><span class="line">$main</span><br><span class="line"><span class="number">-10000</span> successful increases of the counter.</span><br></pre></td></tr></table></div></figure><h3 id="std-time-mutex-介绍">std::time_mutex 介绍<a href="post/Mutex介绍#std-time-mutex-介绍"></a></h3><p>std::time_mutex 比 std::mutex 多了两个成员函数，try_lock_for()，try_lock_until()。</p><p>try_lock_for 函数接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与 std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回 false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。</p><p>try_lock_until 函数则接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。</p><p>下面的小例子说明了 std::time_mutex 的用法（<a href="http://www.cplusplus.com/reference/mutex/timed_mutex/try_lock_for/" target="_blank" rel="noopener">参考</a>）。</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;       // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;         // std::chrono::milliseconds</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;         // std::thread</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;          // std::timed_mutex</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::timed_mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fireworks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// waiting to get a lock: each thread prints "-" every 200ms:</span></span><br><span class="line">  <span class="keyword">while</span> (!mtx.try_lock_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">200</span>))) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// got a lock! - wait for 1s, then this thread prints "*"</span></span><br><span class="line">  <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">1000</span>));</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"*\n"</span>;</span><br><span class="line">  mtx.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::thread threads[<span class="number">10</span>];</span><br><span class="line">  <span class="comment">// spawn 10 threads:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">    threads[i] = <span class="built_in">std</span>::thread(fireworks);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; th : threads) th.join();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果：</p><blockquote><p>线程输出*表示该线程已经正常退出，并且释放该锁。否则将每200ms尝试获取mutex🔒，直到成功为止。</p></blockquote><h3 id="std-recursive-timed-mutex-介绍">std::recursive_timed_mutex 介绍<a href="post/Mutex介绍#std-recursive-timed-mutex-介绍"></a></h3><p>和 std:recursive_mutex 与 std::mutex 的关系一样，std::recursive_timed_mutex 的特性也可以从 std::timed_mutex 推导出来，感兴趣的同鞋可以自行查阅。 ;-)</p><h3 id="std-lock-guard-介绍">std::lock_guard 介绍<a href="post/Mutex介绍#std-lock-guard-介绍"></a></h3><p>与 Mutex RAII 相关，方便线程对互斥量上锁。例子（<a href="http://www.cplusplus.com/reference/mutex/lock_guard/" target="_blank" rel="noopener">参考</a>）:</p><ul><li>1.std::lock_guard 在构造函数中进行加锁，析构函数中进行解锁。</li><li>2.锁在多线程编程中，使用较多，因此c++11提供了lock_guard模板类；在实际编程中，我们也可以根据自己的场景编写<code>resource_guard</code> RAII类，避免忘掉释放资源。</li></ul><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;       // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;         // std::thread</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;          // std::mutex, std::lock_guard</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;      // std::logic_error</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_even</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x%<span class="number">2</span>==<span class="number">0</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" is even\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">throw</span> (<span class="built_in">std</span>::logic_error(<span class="string">"not even"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_thread_id</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// using a local lock_guard to lock mtx guarantees unlocking on destruction / exception:</span></span><br><span class="line">        <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lck (mtx);</span><br><span class="line">        print_even(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="built_in">std</span>::logic_error&amp;) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"[exception caught]\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::thread threads[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// spawn 10 threads:</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        threads[i] = <span class="built_in">std</span>::thread(print_thread_id,i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; th : threads) th.join();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$g++ -lpthread -o main *.cpp</span><br><span class="line">$main</span><br><span class="line">[exception caught]</span><br><span class="line"><span class="number">4</span> is even</span><br><span class="line">[exception caught]</span><br><span class="line"><span class="number">2</span> is even</span><br><span class="line">[exception caught]</span><br><span class="line"><span class="number">6</span> is even</span><br><span class="line"><span class="number">8</span> is even</span><br><span class="line">[exception caught]</span><br><span class="line">[exception caught]</span><br><span class="line"><span class="number">10</span> is even</span><br></pre></td></tr></table></div></figure><h3 id="std-unique-lock-介绍">std::unique_lock 介绍<a href="post/Mutex介绍#std-unique-lock-介绍"></a></h3><p>与 Mutex RAII 相关，方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。例子（<a href="http://www.cplusplus.com/reference/mutex/unique_lock/" target="_blank" rel="noopener">参考</a>）：</p><ul><li>1.类 unique_lock 是通用互斥包装器，允许<code>延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用</code>。</li><li>2.unique_lock比lock_guard使用更加灵活，功能更加强大。<br>使用unique_lock需要付出更多的时间、性能成本。</li></ul><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;       // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;         // std::thread</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;          // std::mutex, std::unique_lock</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex mtx;           <span class="comment">// mutex for critical section</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_block</span> <span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// critical section (exclusive access to std::cout signaled by lifetime of lck):</span></span><br><span class="line">    <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lck (mtx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">th1</span> <span class="params">(print_block,<span class="number">50</span>,<span class="string">'*'</span>)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">th2</span> <span class="params">(print_block,<span class="number">50</span>,<span class="string">'$'</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    th1.join();</span><br><span class="line">    th2.join();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果：</p><figure class="highlight c++"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$g++ -lpthread -o main *.cpp</span><br><span class="line">$main</span><br><span class="line">**************************************************</span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br></pre></td></tr></table></div></figure><p>好了，本文暂时讲到这里，还剩下 std::try_lock，std::lock，std::call_once 三个函数没有讲到，留在下一篇博客中讲吧 ;-)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mutex 又称互斥量，C++ 11中与 Mutex 相关的类（包括锁类型）和函数都声明在 &lt;mutex&gt; 头文件中，所以如果你需要使用 std::mutex，就必须包含 &lt;mutex&gt; 头文件。&lt;/mutex&gt;&lt;/mutex&gt;&lt;/p&gt;
&lt;h3 id=&quot;头文件介绍&quot;&gt;&lt;mutex&gt; 头文件介绍&lt;/mutex&gt;&lt;a href=&quot;post/Mutex介绍#头文件介绍&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;Mutex-系列类-四种&quot;&gt;Mutex 系列类(四种)&lt;a href=&quot;post/Mutex介绍#Mutex-系列类-四种&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;std::mutex，最基本的 Mutex 类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;std::recursive_mutex，递归 Mutex 类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;std::time_mutex，定时 Mutex 类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;std::recursive_timed_mutex，定时递归 Mutex 类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C++" scheme="https://shuntan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuntan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++之Lambda研究</title>
    <link href="https://shuntan.github.io/posts/Lambda/"/>
    <id>https://shuntan.github.io/posts/Lambda/</id>
    <published>2019-06-03T12:20:52.000Z</published>
    <updated>2019-07-03T11:59:54.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言">1. 前言<a href="post/Lambda#1-前言"></a></h1><p>本文代码测试环境为“GCC-9.1.0”，有关编译器的安装请参考《<a href="https://blog.csdn.net/Aquester/article/details/89735466" target="_blank" rel="noopener">安装GCC-8.3.0及其依赖</a>》，适用于“GCC-9.1.0”。</p><p>本文试图揭露Lambda背后一面，以方便更好的理解和掌握Lambda。Lambda代码段实际为一个编译器生成的类的“operator ()”函数，编译器会为每一个Lambda函数生成一个匿名的类（在C++中，类和结构体实际一样，无本质区别，除了默认的访问控制）。</p><p>对Lambda的最简单理解，是将它看作一个匿名类（或结构体），实际上也确实如此，编译器把Lambda编译成了匿名类。</p><a id="more"></a><h1 id="2-示例1">2. 示例1<a href="post/Lambda#2-示例1"></a></h1><p>先看一段几乎最简单的Lambda代码：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> f = [] &#123; <span class="built_in">printf</span>(<span class="string">"f\n"</span>); &#125;; <span class="comment">// 注意“&#125;”后的“;”必不可少，否则编译报错</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>如果Lambda表达式（或函数）没有以“;”结尾，则编译时将报如下错误：</p><figure class="highlight scilab"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a3.cpp: In <span class="function"><span class="keyword">function</span> '<span class="title">int</span> <span class="title">main</span><span class="params">()</span>':</span></span><br><span class="line">a3.cpp:<span class="number">4</span>:<span class="number">3</span>: <span class="built_in">error</span>: expected <span class="string">','</span> <span class="built_in">or</span> <span class="string">';'</span> before <span class="string">'return'</span></span><br><span class="line">    <span class="number">4</span> |   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      |   ^~~~~~</span><br></pre></td></tr></table></div></figure><p>Lambda之所以神奇，这得益于C++编译器的工作，上述“f”实际长这样：</p><figure class="highlight crystal"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = <span class="class"><span class="keyword">struct</span> &lt;<span class="title">lambda</span>()&gt; &#123;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>一个匿名的类（或结构体），实际上还有一个成员函数“operator () const”。注意这里成员函数是”const”类型，这是默认的。如果需非”const”成员函数，需要加”mutable”修饰，如下所示：</p><figure class="highlight markdown"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto f = [<span class="string">n</span>](<span class="link"></span>) mutable &#123; printf("%d\n", n); &#125;;</span><br></pre></td></tr></table></div></figure><p>上面例子对应的匿名类没有任何类数据成员，现在来个有类数据成员的代码：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">auto</span> f = [n] &#123; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n); &#125;;</span><br><span class="line">  f(); <span class="comment">// 这里实际调用的是匿名类的成员函数“operator ()”</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这时，“f”实际长这样，它是一个含有类数据成员的匿名类，而不再是空无一特的类：</p><figure class="highlight crystal"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = <span class="class"><span class="keyword">struct</span> &lt;<span class="title">lambda</span>()&gt; &#123;</span></span><br><span class="line">    int __n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h1 id="3-示例2">3. 示例2<a href="post/Lambda#3-示例2"></a></h1><p>继续来个变种：</p><figure class="highlight markdown"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// g++ -g -o a1 a1.cpp -std=c++11</span><br><span class="line"></span><br><span class="line"><span class="section">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  int n = 3;</span><br><span class="line">  auto f = [<span class="string">&amp;n</span>](<span class="link"></span>) mutable &#123; printf("%d\n", n); &#125;;</span><br><span class="line">  f();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这时，“f”实际长这样，一个包含了引用类型的匿名类：</p><figure class="highlight crystal"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = <span class="class"><span class="keyword">struct</span> &lt;<span class="title">lambda</span>()&gt; &#123;</span></span><br><span class="line">    int &amp;__n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h1 id="4-示例3">4. 示例3<a href="post/Lambda#4-示例3"></a></h1><p>继续变种，“&amp;”的作用让Lambda函数可使用Lambda所在作用域内所有可见的局部变量（包括Lambda所在类的this），并且是以引用传递方式：</p><figure class="highlight markdown"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// g++ -g -o a1 a1.cpp -std=c++11</span><br><span class="line"><span class="section">#include &lt;stdio.h&gt;</span></span><br><span class="line">int main() &#123;</span><br><span class="line">  int n = 3;</span><br><span class="line">  auto f = [<span class="string">&amp;</span>](<span class="link"></span>) mutable &#123; printf("%d\n", n); &#125;;</span><br><span class="line">  f();</span><br><span class="line">  return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>“f”实际长这样：</p><figure class="highlight crystal"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = <span class="class"><span class="keyword">struct</span> &lt;<span class="title">lambda</span>()&gt; &#123;</span></span><br><span class="line">    int &amp;__n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>变稍复杂一点：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">int</span> m = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">auto</span> f = [&amp;]() <span class="keyword">mutable</span> &#123; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n); &#125;;</span><br><span class="line">  f();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>可以看到，“f”并没有发生变化：</p><figure class="highlight crystal"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = <span class="class"><span class="keyword">struct</span> &lt;<span class="title">lambda</span>()&gt; &#123;</span></span><br><span class="line">    int &amp;__n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h1 id="5-示例4">5. 示例4<a href="post/Lambda#5-示例4"></a></h1><p>继续增加复杂度：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">int</span> m = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">auto</span> f = [&amp;]() <span class="keyword">mutable</span> &#123; <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, n, m); &#125;;</span><br><span class="line">  f();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>可以看到“f”变了：</p><figure class="highlight crystal"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = <span class="class"><span class="keyword">struct</span> &lt;<span class="title">lambda</span>()&gt; &#123;</span></span><br><span class="line">    int &amp;__n;</span><br><span class="line">    int &amp;__m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>从上面不难看出，编译器只会把Lambda函数用到的变量打包进对应的匿名类。继续一个稍复杂点的：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"foo\n"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">xoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [&amp;] &#123; foo(); &#125;;</span><br><span class="line">    f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  X().xoo();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这时，“f”实际长这样：</p><figure class="highlight elm"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = struct <span class="type">X</span>::&lt;lambda()&gt; &#123;</span><br><span class="line">    <span class="type">X</span> * const __this; // <span class="type">X</span>类型的指针（非对象）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>如果将“auto f = [&amp;] { foo(); };”中的“&amp;”去掉，则会遇到编译错误，提示“this”没有被Lambda函数捕获：</p><figure class="highlight ada"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a2.cpp: <span class="keyword">In</span> lambda <span class="keyword">function</span>:</span><br><span class="line">a2.cpp:<span class="number">5</span>:<span class="number">23</span>: error: <span class="symbol">'this</span>' was <span class="keyword">not</span> captured <span class="keyword">for</span> this lambda <span class="keyword">function</span></span><br><span class="line">    <span class="number">5</span> |     auto f = [] &#123; foo(); &#125;;</span><br><span class="line">      |                       ^</span><br><span class="line">a2.cpp:<span class="number">5</span>:<span class="number">23</span>: error: cannot call member <span class="keyword">function</span> <span class="title">'void</span> X::foo()' <span class="keyword">with</span><span class="keyword">out</span> object</span><br></pre></td></tr></table></div></figure><p>改成下列方式捕获也是可以的：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"foo\n"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">xoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [<span class="keyword">this</span>] &#123; foo(); &#125;;</span><br><span class="line">    f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  X().xoo();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>如果是C++17，还可以这样：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"foo\n"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">xoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [*<span class="keyword">this</span>]() <span class="keyword">mutable</span> &#123; foo(); &#125;;</span><br><span class="line">    f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  X().xoo();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>注意得有“mutable”修饰，不然报如下编译错误：</p><figure class="highlight groovy"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a2.<span class="string">cpp:</span> In lambda <span class="string">function:</span></span><br><span class="line">a2.<span class="string">cpp:</span><span class="number">5</span>:<span class="number">30</span>: <span class="string">error:</span> passing <span class="string">'const X'</span> <span class="keyword">as</span> <span class="string">'this'</span> argument discards qualifiers [-fpermissive]</span><br><span class="line">    <span class="number">5</span> |     auto f = [*<span class="keyword">this</span>]() &#123; foo(); &#125;;</span><br><span class="line">      |                              ^</span><br><span class="line">a2.<span class="string">cpp:</span><span class="number">3</span>:<span class="number">8</span>: <span class="string">note:</span>   <span class="keyword">in</span> call to <span class="string">'void X::foo()'</span></span><br><span class="line">    <span class="number">3</span> |   <span class="keyword">void</span> foo() &#123; printf(<span class="string">"foo\n"</span>); &#125;</span><br><span class="line">      |        ^~~</span><br></pre></td></tr></table></div></figure><p>也可以这样：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++17</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"foo\n"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">xoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [&amp;,*<span class="keyword">this</span>]() <span class="keyword">mutable</span> &#123; foo(); &#125;;</span><br><span class="line">    f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  X().xoo();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>使用“*this”时的“f”样子如下：</p><figure class="highlight elm"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> = struct <span class="type">X</span>::&lt;lambda()&gt; &#123;</span><br><span class="line">    <span class="type">X</span> __this; // <span class="type">X</span>类型的对象（非指针）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h1 id="6-示例5">6. 示例5<a href="post/Lambda#6-示例5"></a></h1><p>继续研究，使用C++ RTTI（Run-Time Type Identification，运行时类型识别）设施“typeid”查看Lambda函数：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ -g -o a1 a1.cpp -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">xoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [] &#123; <span class="built_in">printf</span>(<span class="string">"f\n"</span>); &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="keyword">typeid</span>(f).name());</span><br><span class="line">    <span class="comment">// 注：typeid返回值类型为“std::type_info”</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  X().xoo();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行输出：</p><p><code>ZN1X3xooEvEUlvE_</code></p><h1 id="7-匿名类规则">7. 匿名类规则<a href="post/Lambda#7-匿名类规则"></a></h1><p>编译器为Lambda生成的匿名类规则（不同标准有区别）：</p><div class="article-bounded"><div class="article-table"><table align="center" border="1" cellspacing="0"><tbody><tr><td rowspan="4">            <p style="margin-left:0pt;">构造函数</p>            <p style="margin-left:0pt;">拷贝构造函数</p>            </td>            <td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">ClosureType()&nbsp;=&nbsp;<strong>delete</strong>;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;">C++14前</p>            </td>        </tr><tr><td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">ClosureType()&nbsp;=&nbsp;default;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;">C++20起，</p>            <p style="margin-left:0pt;">仅当未指定任何俘获时</p>            </td>        </tr><tr><td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">ClosureType(const&nbsp;ClosureType&amp;&nbsp;)&nbsp;=&nbsp;default;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;">C++14起</p>            </td>        </tr><tr><td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">ClosureType(ClosureType&amp;&amp;&nbsp;)&nbsp;=&nbsp;default;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;">C++14起</p>            </td>        </tr><tr><td rowspan="3" style="width:69.35pt;">            <p style="margin-left:0pt;">拷贝复制函数</p>            </td>            <td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;<strong>delete</strong>;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;"><span style="color:#0000ff;"><strong>C++20前</strong></span></p>            </td>        </tr><tr><td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;default;</p>            <p style="margin-left:0pt;">ClosureType&amp;&nbsp;operator=(ClosureType&amp;&amp;)&nbsp;=&nbsp;default;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;">C++20起，</p>            <p style="margin-left:0pt;">仅当未指定任何俘获时</p>            </td>        </tr><tr><td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">ClosureType&amp;&nbsp;operator=(const&nbsp;ClosureType&amp;)&nbsp;=&nbsp;<strong>delete</strong>;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;">C++20起，其他情况</p>            </td>        </tr><tr><td style="vertical-align:top;width:69.35pt;">            <p style="margin-left:0pt;">析构函数</p>            </td>            <td style="vertical-align:top;width:250.8pt;">            <p style="margin-left:0pt;">~ClosureType()&nbsp;=&nbsp;default;</p>            </td>            <td style="vertical-align:top;width:105.95pt;">            <p style="margin-left:0pt;">析构函数是隐式声明的</p>            </td>        </tr></tbody></table></div></div><p>对于标记为“delete”的函数是不能调用的，如下列代码中的“f2 = f1;”将触发编译错误：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> f1 = []&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> f2 = f1;</span><br><span class="line"></span><br><span class="line">  f2 = f1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>上列代码在C++11、C++14和C++17均会报错。不过如规则所示，C++20（含C++2a）上则可以正常编译：</p><figure class="highlight scilab"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a3.cpp: In <span class="function"><span class="keyword">function</span> '<span class="title">int</span> <span class="title">main</span><span class="params">()</span>':</span></span><br><span class="line">a3.cpp:<span class="number">4</span>:<span class="number">8</span>: <span class="built_in">error</span>: use of deleted <span class="function"><span class="keyword">function</span> '<span class="title">main</span><span class="params">()</span>::&lt;<span class="title">lambda</span><span class="params">()</span>&gt;&amp; <span class="title">main</span><span class="params">()</span>::&lt;<span class="title">lambda</span><span class="params">()</span>&gt;::<span class="title">operator</span>=<span class="params">(const main()</span>::&lt;<span class="title">lambda</span><span class="params">()</span>&gt;&amp;)'</span></span><br><span class="line">    <span class="number">4</span> |   f2 = f1;</span><br><span class="line">      |        ^~</span><br><span class="line">a3.cpp:<span class="number">2</span>:<span class="number">14</span>: note: a lambda closure <span class="built_in">type</span> has a deleted copy assignment operator</span><br><span class="line">    <span class="number">2</span> |   auto f1 = []&#123;&#125;;</span><br><span class="line">      |              ^</span><br></pre></td></tr></table></div></figure><p>希望通过本文，对理解Lambda有所帮助。</p><h1 id="8-参考资料">8. 参考资料<a href="post/Lambda#8-参考资料"></a></h1><ul><li><p>1) <a href="https://zh.cppreference.com/w/cpp/language/lambda" target="_blank" rel="noopener">https://zh.cppreference.com/w/cpp/language/lambda</a></p></li><li><p>2) <a href="https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-2019" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-2019</a></p></li><li><p>3) <a href="https://en.cpprefeence.com/w/cpp/language/lambda" target="_blank" rel="noopener">https://en.cpprefeence.com/w/cpp/language/lambda</a></p></li><li><p>4) <a href="https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11" target="_blank" rel="noopener">https://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11</a></p></li><li><p>5) <a href="https://www.cprogramming.com/c++11/c++11-lambda-closures.html" target="_blank" rel="noopener">https://www.cprogramming.com/c++11/c++11-lambda-closures.html</a></p></li></ul><hr><div class="note info">            <p>作者：一见<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/Aquester/article/details/90691479" target="_blank" rel="noopener">https://blog.csdn.net/Aquester/article/details/90691479</a> </p>          </div><img src="/posts/Lambda/1.jpg"><img src="/posts/Lambda/1.jpg">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;a href=&quot;post/Lambda#1-前言&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文代码测试环境为“GCC-9.1.0”，有关编译器的安装请参考《&lt;a href=&quot;https://blog.csdn.net/Aquester/article/details/89735466&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装GCC-8.3.0及其依赖&lt;/a&gt;》，适用于“GCC-9.1.0”。&lt;/p&gt;
&lt;p&gt;本文试图揭露Lambda背后一面，以方便更好的理解和掌握Lambda。Lambda代码段实际为一个编译器生成的类的“operator ()”函数，编译器会为每一个Lambda函数生成一个匿名的类（在C++中，类和结构体实际一样，无本质区别，除了默认的访问控制）。&lt;/p&gt;
&lt;p&gt;对Lambda的最简单理解，是将它看作一个匿名类（或结构体），实际上也确实如此，编译器把Lambda编译成了匿名类。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://shuntan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuntan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 模板偏特化－来自STL的思考</title>
    <link href="https://shuntan.github.io/posts/%E6%A8%A1%E6%9D%BF%E7%89%B9%E5%8C%96/"/>
    <id>https://shuntan.github.io/posts/模板特化/</id>
    <published>2019-05-31T06:29:52.000Z</published>
    <updated>2019-07-03T11:59:30.051Z</updated>
    
    <content type="html"><![CDATA[<p>之前学习STL时接触过一段时间的模板，模板是C++泛型编程编程的基础<br>STL从头到尾都是模板泛型编程，我觉得用的最巧妙的就是在traits萃取技巧时用到的模板偏特化</p><hr><ul><li>先简要回顾一下模板吧，模板主要分为函数模板与类模板</li></ul><h2 id="函数模板">函数模板<a href="post/模板特化#函数模板"></a></h2><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a + b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; add(a + b) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><a id="more"></a><p>如上就是最简单的函数模板，当实例化函数模板时，编译器会自动进行实参类型推导<br>上面类型T就被自动推导为int类型</p><h2 id="类模板">类模板<a href="post/模板特化#类模板"></a></h2><figure class="highlight java"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">templete&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">explicit <span class="title">A</span><span class="params">(T val)</span> : <span class="title">t</span><span class="params">(val)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function">T <span class="title">add</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">return</span> t + y; &#125;    </span><br><span class="line">privete:</span><br><span class="line">    T t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">A&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; a.add(<span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>如上就是最简单的类模板，实例化类模板必须要指定类型，编译器无法为类模板自动推导类型</p><h3 id="几个需要注意的点">几个需要注意的点<a href="post/模板特化#几个需要注意的点"></a></h3><ul><li><p>１．类模板的和函数模板都必须定义在.h头文件中</p></li><li><p>２．模板的实例化类型确定是在编译期间</p></li><li><p>３．只是模板写好了，编译一般不会很多出错，出错一般会在实例化编译之后</p></li><li><p>４．模板实例化只会实例化用到的部分，没有用到的部分将不会被实例化</p></li></ul><hr><p>我觉得模板的特例化是模板中比较精髓的东西<br>有函数模板特例化，类模板特例化，其中又分为全特化与偏特化<br>主要的用途都是对于特定的类型，指定特定的处理方式<br>就相当于普通编程中if-else if - else这样的方式<br>编译阶段确定如果是某个特化类型，就用特化的模板<br>如果都不是，就用最一般的模板</p><h2 id="函数模板特例化">函数模板特例化<a href="post/模板特化#函数模板特例化"></a></h2><p>函数模板只能全特化，<span class="label primary">不能偏特化</span>，如果要偏特化的话只能重载</p><h3 id="函数模板全特化">函数模板全特化<a href="post/模板特化#函数模板全特化"></a></h3><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; &gt;                                  <span class="comment">// 全特化　注意语法</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span>  </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">double</span> z = <span class="number">1.1</span>, w = <span class="number">2.2</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; add(x, y) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 调用普通版本</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; add(z, w) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 调用全特化版本</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>如果有与实参更加匹配的特例化版本，编译器将会选择特例化版本</p><h3 id="函数模板重载（不存在偏特化）">函数模板重载（不存在偏特化）<a href="post/模板特化#函数模板重载（不存在偏特化）"></a></h3><p>因为偏特化版本本质上仍然是模板，所以如果需要的话，可以重载一个函数模板</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>&gt;　　// 重载版本，接收参数为指针</span></span><br><span class="line"><span class="class"><span class="title">T1</span> <span class="title">add</span>(<span class="title">T1</span>* <span class="title">a</span>, <span class="title">T1</span>* <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> *a + *b; &#125;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> *x = &amp;a, *y = &amp;b;</span><br><span class="line">    add(a, b);    <span class="comment">// 调用普通模板</span></span><br><span class="line">    add(x, y);　  <span class="comment">// 调用重载的模板</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>如上，如果需要一个接收指针的偏特化版本，那么可以用重载模板实现<br>函数模板不存在偏特化</p><h2 id="类模板特例化">类模板特例化<a href="post/模板特化#类模板特例化"></a></h2><p>类模板既有全特化，又有偏特化<br>这里重新写一个更一般的模板类来说明类模板的特例化</p><p>类模板全特化比较好理解，跟函数模板一样，全特化是一个实例，当编译器匹配时会优先匹配参数一致的实例</p><figure class="highlight arduino"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; &gt;     　　　<span class="comment">// 注意语法</span></span><br><span class="line">class A&lt;<span class="keyword">char</span>*&gt;       <span class="comment">// 一个全特化的模板类A</span></span><br><span class="line">&#123;                    <span class="comment">// 当用char*类型来实例化类模板A时，将会优先调用这个全特化实例</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">explicit</span> A(<span class="keyword">char</span>* val) : t(val) &#123; &#125;</span><br><span class="line">    <span class="keyword">char</span>* add(<span class="keyword">char</span>* a, <span class="keyword">char</span>* b) &#123; <span class="built_in">return</span> strcat(a, b); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* t;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><h2 id="类模板的偏特化">类模板的偏特化<a href="post/模板特化#类模板的偏特化"></a></h2><p>类模板的偏特化会稍微复杂一点点，它有多种形式<br>类模板偏特化本质上都是指定部分类型，让偏特化版本称为普通版本的子集，若实例化时参数类型为指定的类型，则优先调用特例化版本<br>第一种形式</p><figure class="highlight clean"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;      <span class="comment">// 普通版本，有两个模板参数</span></span><br><span class="line"><span class="keyword">class</span> B &#123; ..... &#125;;</span><br><span class="line"></span><br><span class="line">template&lt;<span class="keyword">class</span> T2&gt;　　　         <span class="comment">// 偏特化版本，指定其中一个参数，即指定了部分类型</span></span><br><span class="line"><span class="keyword">class</span> B&lt;int , T2&gt; &#123; ..... &#125;;　　<span class="comment">// 当实例化时的第一个参数为int 则会优先调用这个版本</span></span><br></pre></td></tr></table></div></figure><p>第二种形式，也是最重要的版本</p><figure class="highlight ruby"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">template&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;     // 普通版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123; ..... &#125;;</span></span><br><span class="line"></span><br><span class="line">template&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;　　　//这个偏特化版本只接收指针类型的模板实参 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&lt;T*&gt; &#123; ..... &#125;;</span> </span><br><span class="line"></span><br><span class="line">template&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&lt;T&amp;&gt; &#123; ..... &#125;;</span>     /<span class="regexp">/ 这个偏特化版本只接受引用类型的模板实参</span></span><br></pre></td></tr></table></div></figure><p>第三种形式</p><figure class="highlight ruby"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;    //普通版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123; ..... &#125;;</span></span><br><span class="line"></span><br><span class="line">template&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;　　　// 这种只接受用<span class="title">T</span>实例化的<span class="title">vector</span>的模板实参．也是一种偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&lt;vector&lt;T&gt;&gt; &#123; ......  &#125;;</span></span><br></pre></td></tr></table></div></figure><p><strong>几个值得注意的地方</strong></p><ul><li>１．特例化本质上是我们顶替了编译器的工作，我们帮编译器做了类型推导</li><li>２．全特化本质上是一个实例，而偏特化本质上还是一个模板，只是原来模板的一个子集</li><li>３．所以全特化的函数模板，本质上是实例，从而不会与函数模板产生二义性</li><li>４．若想让用户能使用特例化版本，特例化版本必须与模板定义在同一个.h头文件中</li></ul><hr><p>STL中的迭代器实现与高效实现与模板偏特化息息相关．</p><h2 id="类模板偏特化与STL">类模板偏特化与STL<a href="post/模板特化#类模板偏特化与STL"></a></h2><p><strong>偏特化在STL中最重要的两个应用</strong></p><p>１．应用在迭代器设计中，为了使迭代器既可以萃取出值类型，又可以包容原生指针<br>如果要通过一个迭代器就能知道它的值类型，那么一般会使用iterator_traits<br>迭代器萃取技术的两个核心是：</p><ul><li>１）在每个迭代器类中定义value_type值类型的类型成员，这样直接通过迭代器的value_type类型成员就可以知道值类型</li><li>２）问题就在于，迭代器必须兼容原生指针，而原生指针很难被重新定义，即要在原生指针的类中添加value_type的值类型的类型成员．这时候，靠的就是类模板的偏特化了．新添加一层iterator_traits类，专门萃取迭代器的属性，然后再对iterator_traits类设计原生指针与原生引用的偏特化版本，就解决了这个棘手的问题</li></ul><p>２．<span class="label success"> type_traits</span>类型萃取，对待特殊类型，特殊处理，提高效率<br>对于没有构造函数，析构函数等的内置类型，如果与复杂类型一样，执行同样的操作，显然是效率不高的<br>先实现一个对所有类型都设置一个最保守值的type_traits模板类，然后再对每个内置类型设置偏特化版本，内置类型设置一个更为激进的值，表明可以采取更为高效的操作来提高效率<br>比如copy函数，如果传递的对象是一个复杂类型，那么可能只能采取最保守的处理方式，一个一个的构造；如果是内置类型，这样显然太低效，使用memcpy()可能会好一些</p><p>其实iterator_traits也不止是处理兼容原生指针的问题，它也可以提高效率．<br>迭代器分为很多种，有可以随机访问的（vector），有只能前后一个一个移动的（list）,也有只能单向移动的（slist），所以一般把迭代器分为五种：</p><ul><li>InputIterator　　　　　　　输入迭代器</li><li>OutputIterator 　　　　　 　输出迭代器</li><li>ForwardIterator　　　　　　单向迭代器</li><li>BidirectionIterator　　　　　双向迭代器</li><li>RandomAccessIterator　　　随机访问迭代器</li></ul><p>比如一个advance(n)函数，对于单向迭代器只能一个一个移动过去，但是这种实现对于随机访问迭代器显然不是理想的处理方式<br>处理的方式就是先实现这五个类，用作标记用，在每个迭代器里面都定义迭代器类型的类型成员iterator_catagory，再对不同版本的迭代器实现不同的advance(n)处理方式</p><p>比如stl中添加右值引用元模板的实现：</p><figure class="highlight routeros"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename _Tp,</span><br><span class="line">   bool = __and_&lt;__not_&lt;is_reference&lt;_Tp&gt;&gt;,</span><br><span class="line">   __not_&lt;is_void&lt;_Tp&gt;&gt;&gt;::value&gt;</span><br><span class="line">struct __add_rvalue_reference_helper</span><br><span class="line">&#123;typedef __Tp  <span class="built_in"> type; </span>&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename _Tp&gt;</span><br><span class="line">struct __add_rvalue_reference_helper&lt;__Tp, <span class="literal">true</span>&gt;</span><br><span class="line">&#123;typedef __Tp&amp;&amp; <span class="built_in"> type; </span>&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename _Tp&gt;</span><br><span class="line">struct add_rvalue_reference</span><br><span class="line">: public __add_rvalue_reference_helper&lt;_Tp&gt;</span><br><span class="line">&#123; &#125;;</span><br></pre></td></tr></table></div></figure><p>可以发现调用时一般为<code>static_cast&lt;typenameadd_rvalue_reference&lt;T&gt;::type&gt;(__t)</code>,首先会匹配泛化版本的元模板类，第二个模版参数bool会匹配_Tp的类型，如果原来不是引用类型的话就直接匹配true的偏特化版本（优先级高），否则false为原泛化版本。</p><p>短短几行代码已经展示出了模板偏/全特化的强大匹配功能！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前学习STL时接触过一段时间的模板，模板是C++泛型编程编程的基础&lt;br&gt;STL从头到尾都是模板泛型编程，我觉得用的最巧妙的就是在traits萃取技巧时用到的模板偏特化&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;先简要回顾一下模板吧，模板主要分为函数模板与类模板&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;函数模板&quot;&gt;函数模板&lt;a href=&quot;post/模板特化#函数模板&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;) &amp;#123;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; add(a + b) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C++" scheme="https://shuntan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuntan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中的万能引用和完美转发</title>
    <link href="https://shuntan.github.io/posts/%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/"/>
    <id>https://shuntan.github.io/posts/完美转发/</id>
    <published>2019-05-29T02:05:19.000Z</published>
    <updated>2019-07-03T11:59:36.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-中的万能引用和完美转发">C++中的万能引用和完美转发<a href="post/完美转发#C-中的万能引用和完美转发"></a></h2><ul><li><p>阅读这篇博文需要了解C++中的左值（lvalue）和右值（rvalue）的概念，详情参见我的另外一篇博文：C++移动语义及拷贝优化</p></li><li><p>万能引用和完美转发多涉及到模板的使用，如若不是自己写模板，则可不用关心</p></li></ul><h3 id="万能引用（Universal-Reference）">万能引用（Universal Reference）<a href="post/完美转发#万能引用（Universal-Reference）"></a></h3><p>首先，我们来看一个例子：</p><a id="more"></a><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp; param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; param &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">2019</span>;</span><br><span class="line">    func(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这样例子的编译输出都没有什么问题，但是如果我们修改成下面的调用方式呢？</p><figure class="highlight autoit"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(<span class="number">2019</span>)</span>;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>则会得到一个大大的编译错误。因为上面的模板函数只能接受左值或者左值引用（左值一般是有名字的变量，可以取到地址的），我们当然可以重载一个接受右值的模板函数，如下也可以达到效果。</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp; param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"传入的是左值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp;&amp; param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"传入的是右值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">2019</span>;</span><br><span class="line">    func(num);</span><br><span class="line">    func(<span class="number">2019</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果：</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">传入的是左值</span><br><span class="line">传入的是右值</span><br></pre></td></tr></table></div></figure><p>第一次函数调用的是左值得版本，第二次函数调用的是右值版本。但是，有没有办法只写一个模板函数即可以接收左值又可以接收右值呢？</p><p>C++ 11中有万能引用（Universal Reference）的概念：使用T&amp;&amp;类型的形参既能绑定右值，又能绑定左值。</p><p>但是注意了：<strong>只有发生类型推导的时候，T&amp;&amp;才表示万能引用；</strong> 否则，表示右值引用。</p><p>所以，上面的案例我们可以修改为：</p><figure class="highlight autoit"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">void <span class="function"><span class="keyword">func</span><span class="params">(T&amp;&amp; param)</span> &#123;</span></span><br><span class="line">    cout &lt;&lt; param &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">2019</span><span class="comment">;</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(num)</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(<span class="number">2019</span>)</span>;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h2 id="引用折叠（Universal-Collapse）">引用折叠（Universal Collapse）<a href="post/完美转发#引用折叠（Universal-Collapse）"></a></h2><p>万能引用说完了，接着来聊引用折叠（Univers Collapse），因为完美转发（Perfect Forwarding）的概念涉及引用折叠。一个模板函数，根据定义的形参和传入的实参的类型，我们可以有下面四中组合：</p><ul><li>左值-左值 T&amp; &amp;        # 函数定义的形参类型是左值引用，传入的实参是左值引用</li><li>左值-右值 T&amp; &amp;&amp;      # 函数定义的形参类型是左值引用，传入的实参是右值引用</li><li>右值-左值 T&amp;&amp; &amp;      # 函数定义的形参类型是右值引用，传入的实参是左值引用</li><li>右值-右值 T&amp;&amp; &amp;&amp;    # 函数定义的形参类型是右值引用，传入的实参是右值引用</li></ul><p>但是C++中不允许对引用再进行引用，对于上述情况的处理有如下的规则：</p><p>所有的折叠引用最终都代表一个引用，要么是左值引用，要么是右值引用。规则是：如果任一引用为左值引用，则结果为左值引用。否则（即两个都是右值引用），结果为右值引用。</p><p>即就是前面三种情况代表的都是左值引用，而第四种代表的右值引用。</p><h2 id="完美转发（Perfect-Forwarding）">完美转发（Perfect Forwarding）<a href="post/完美转发#完美转发（Perfect-Forwarding）"></a></h2><p>下面接着说完美转发（Perfect Forwarding），首先，看2个例子：</p><p>🌰栗子[1]<br>要了解完美转发，先得清楚模板T的<strong>推导过程</strong>，<span class="label success">在没有偏特化的模版前提下，模板总是根据最匹配的规则来推导参数</span>，可以根据下面的例子来看出推导过程。</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp;&amp; arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> is_lval = <span class="built_in">std</span>::is_lvalue_reference&lt;T&gt;::value;</span><br><span class="line">    <span class="keyword">auto</span> is_rval  = <span class="built_in">std</span>::is_rvalue_reference&lt;T&gt;::value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">std</span>::is_same&lt;T, <span class="keyword">int</span>&gt;::value) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"'T' is type[int]"</span> &lt;&lt; <span class="string">" ?is lvalue reference:"</span> &lt;&lt; is_lval &lt;&lt;</span><br><span class="line">                     <span class="string">" ?is rvalue reference:"</span> &lt;&lt; is_rval &lt;&lt; <span class="string">" arg:"</span> &lt;&lt; arg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">std</span>::is_same&lt;T, <span class="keyword">int</span>&amp;&gt;::value) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"'T' is type[int&amp;]"</span> &lt;&lt; <span class="string">" ?is lvalue reference:"</span> &lt;&lt; is_lval &lt;&lt;</span><br><span class="line">                     <span class="string">" ?is rvalue reference:"</span> &lt;&lt; is_rval &lt;&lt; <span class="string">" arg:"</span> &lt;&lt; arg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">std</span>::is_same&lt;T, <span class="keyword">int</span>&amp;&amp;&gt;::value) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"'T' is type[int&amp;&amp;]"</span> &lt;&lt; <span class="string">" ?is lvalue reference:"</span> &lt;&lt; is_lval &lt;&lt;</span><br><span class="line">                     <span class="string">" ?is rvalue reference:"</span> &lt;&lt; is_rval &lt;&lt; <span class="string">" arg:"</span> &lt;&lt; arg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"-----------------"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">  func(a);</span><br><span class="line">  func(<span class="number">2</span>);</span><br><span class="line">  func(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(a));</span><br><span class="line">  func(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&amp;&amp;&gt;(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果为：</p><figure class="highlight vim"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'T'</span> <span class="keyword">is</span> <span class="built_in">type</span>[<span class="keyword">int</span>&amp;] ?<span class="keyword">is</span> lvalue reference:<span class="number">1</span> ?<span class="keyword">is</span> rvalue reference:<span class="number">0</span> <span class="keyword">ar</span><span class="variable">g:1</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="string">'T'</span> <span class="keyword">is</span> <span class="built_in">type</span>[<span class="keyword">int</span>] ?<span class="keyword">is</span> lvalue reference:<span class="number">0</span> ?<span class="keyword">is</span> rvalue reference:<span class="number">0</span> <span class="keyword">ar</span><span class="variable">g:2</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="string">'T'</span> <span class="keyword">is</span> <span class="built_in">type</span>[<span class="keyword">int</span>&amp;] ?<span class="keyword">is</span> lvalue reference:<span class="number">1</span> ?<span class="keyword">is</span> rvalue reference:<span class="number">0</span> <span class="keyword">ar</span><span class="variable">g:1</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="string">'T'</span> <span class="keyword">is</span> <span class="built_in">type</span>[<span class="keyword">int</span>] ?<span class="keyword">is</span> lvalue reference:<span class="number">0</span> ?<span class="keyword">is</span> rvalue reference:<span class="number">0</span> <span class="keyword">ar</span><span class="variable">g:1</span></span><br><span class="line">-----------------</span><br></pre></td></tr></table></div></figure><p>可以发现，当实参数是以值传递的方式推导时，左值传递T为int&amp;，右值传递T为int。为什么会这样呢？</p><p>如果将模版参数显示绑定：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">  func&lt;<span class="keyword">int</span>&gt;(a); <span class="comment">//错误❌</span></span><br><span class="line">  func&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>);</span><br><span class="line">  func&lt;<span class="keyword">int</span>&amp;&gt;(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(a));</span><br><span class="line">  func&lt;<span class="keyword">int</span>&amp;&amp;&gt;(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&amp;&amp;&gt;(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>会发现无法编译通过：</p><figure class="highlight subunit"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In function 'int main()'</span><br><span class="line"><span class="keyword">error: </span>no matching for call to 'func(int&amp;)'</span><br><span class="line">func&lt;int&gt;(a);</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure><span class="label success">根据C++ Primer中文版(第五版) 18章第2节模板实参推断</span><p><strong>Note:如果一个函数参数是指向模版板参数类型的右值引用(如，T&amp;&amp;)，则可以传递给它任意类型的实参。如果将一个左值传递给这样的参数，则函数参数被实例化为一个普通的左值引用(T&amp;)。</strong>，估计是编译器做了特殊的处理。</p><p>由于int无法匹配T&amp;&amp;，所以只能根据<span class="label success">引用折叠（Universal Collapse）</span>规则，int&amp; &amp;&amp;=int&amp;，int &amp;&amp;= int&amp;&amp;。保留了参数的左值右值特性。<br>这也符合引用折叠规则。</p><p>当实参数以左值引用和右值引用的方式推导时，int&amp;还是无法匹配T&amp;&amp;，所以T=int&amp;，而int&amp;&amp;刚好匹配T&amp;&amp;，所以T就是int。</p><p>🌰栗子[2]</p><p>为了方便观察调用过程，我们在std::forward函数copy出来，增加输出一条内容，改为test::forward，其他保持不变。</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/move.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// add print content</span></span><br><span class="line"><span class="keyword">namespace</span> test&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">constexpr</span> _Tp&amp;&amp;</span><br><span class="line">  forward(<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp; <span class="keyword">__t</span>) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Forward an l-value."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;_Tp&amp;&amp;&gt;(<span class="keyword">__t</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">constexpr</span> _Tp&amp;&amp;</span><br><span class="line">  forward(<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp;&amp; <span class="keyword">__t</span>) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Forward an r-value."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">static_assert</span>(!<span class="built_in">std</span>::is_lvalue_reference&lt;_Tp&gt;::value, <span class="string">"template argument"</span></span><br><span class="line">          <span class="string">" substituting _Tp is an lvalue reference type"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;_Tp&amp;&amp;&gt;(<span class="keyword">__t</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// my template functions</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp; param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"传入的是左值"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp;&amp; param)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"传入的是右值"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warp</span><span class="params">(T&amp;&amp; param)</span> </span>&#123;</span><br><span class="line">    func(param);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">2019</span>;</span><br><span class="line">    warp(num);</span><br><span class="line">    warp(<span class="number">2019</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果为：</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">传入的是左值</span><br><span class="line">传入的是左值</span><br></pre></td></tr></table></div></figure><p>是不是和我们预期的不一样，下面我们来分析一下原因：</p><p><strong>warp()</strong>函数本身的形参是一个万能引用，即可以接受左值又可以接受右值；第一个warp()函数调用实参是左值，所以，<strong>warp()</strong>函数中调用<strong>func()</strong>中传入的参数也应该是左值；第二个warp()函数调用实参是右值，根据上面所说的引用折叠规则，<strong>warp()函数接收的参数类型是右值引用，那么为什么却调用了调用func()的左值版本了呢？</strong>这是因为在warp()函数内部，右值引用类型变为了左值，因为参数有了名称，我们也通过变量名取得变量地址。</p><p>结论：无论传入wrap()的参数是左值还是右值，到了函数内部都变成了左值。</p><p>那么问题来了，怎么保持函数调用过程中，变量类型的不变呢？这就是我们所谓的“完美转发”技术，在C++11中通过std::forward()函数来实现。我们修改我们的warp()函数如下：</p><figure class="highlight swift"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename <span class="type">T</span>&gt;</span><br><span class="line">void warp(<span class="type">T</span>&amp;&amp; param) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(test::forward&lt;T&gt;<span class="params">(param)</span></span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出结果为：</p><figure class="highlight livecodeserver"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Forward <span class="keyword">an</span> l-<span class="built_in">value</span>.</span><br><span class="line">传入的是左值</span><br><span class="line">Forward <span class="keyword">an</span> l-<span class="built_in">value</span>.</span><br><span class="line">传入的是右值</span><br></pre></td></tr></table></div></figure><p>现在跟我们的预期一致了，但是原理是什么呢？观察forward()函数内部不难发现，传入的参数做了<strong>移除引用</strong>的操作，使其都为&amp;&amp; 或 &amp;，所以有2个函数版本，重点在于模版返回的时候<strong>return static_cast&lt;_Tp&amp;&amp;&gt;(__t);</strong>强制将实参转换成T原有的引用类型，根据<strong>引用折叠</strong>原则，T&amp;&amp; &amp;还是&amp;，T&amp;&amp; &amp;&amp;还是&amp;&amp;。所以实现了“完美转发”。</p><p>如果将wrap()函数改为这样呢？</p><figure class="highlight swift"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename <span class="type">T</span>&gt;</span><br><span class="line">void warp(<span class="type">T</span>&amp;&amp; param) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(test::forward&lt;T&gt;<span class="params">(std::move<span class="params">(param)</span></span></span></span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>编译结果：</p><figure class="highlight vim"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error：</span><br><span class="line">static_assert(template <span class="keyword">argument</span> substituting _Tp <span class="keyword">is</span> <span class="keyword">an</span> lvalue reference <span class="built_in">type</span><span class="comment">");</span></span><br></pre></td></tr></table></div></figure><p>可以发现成功走到了第二个forward()函数版本。将<strong>static_assert&lt;&gt;</strong>注释掉，编译通过。输出结果为：</p><figure class="highlight livecodeserver"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Forward <span class="keyword">an</span> r-<span class="built_in">value</span>.</span><br><span class="line">传入的是左值</span><br><span class="line">Forward <span class="keyword">an</span> r-<span class="built_in">value</span>.</span><br><span class="line">传入的是右值</span><br></pre></td></tr></table></div></figure><p>对比std::move()的返回值就可以发现，它的返回值是<strong>return static_cast&lt;typename  std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t);</strong>不难看出，必是右值引用。而std::forward()函数则将其按T的引用类型保持不变原样返回。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-中的万能引用和完美转发&quot;&gt;C++中的万能引用和完美转发&lt;a href=&quot;post/完美转发#C-中的万能引用和完美转发&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;阅读这篇博文需要了解C++中的左值（lvalue）和右值（rvalue）的概念，详情参见我的另外一篇博文：C++移动语义及拷贝优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;万能引用和完美转发多涉及到模板的使用，如若不是自己写模板，则可不用关心&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;万能引用（Universal-Reference）&quot;&gt;万能引用（Universal Reference）&lt;a href=&quot;post/完美转发#万能引用（Universal-Reference）&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先，我们来看一个例子：&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://shuntan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuntan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>从4行代码看右值引用</title>
    <link href="https://shuntan.github.io/posts/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/"/>
    <id>https://shuntan.github.io/posts/右值引用/</id>
    <published>2019-05-23T06:50:40.000Z</published>
    <updated>2019-07-03T11:59:43.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述<a href="post/右值引用#概述"></a></h2><p>　　右值引用的概念有些读者可能会感到陌生，其实他和C++98/03中的左值引用有些类似，例如，c++98/03中的左值引用是这样的：</p><figure class="highlight matlab"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">i</span> = <span class="number">0</span>;</span><br><span class="line">int&amp; <span class="built_in">j</span> = <span class="built_in">i</span>;</span><br></pre></td></tr></table></div></figure><p>　　这里的int&amp;是对左值进行绑定（但是int&amp;却不能绑定右值），相应的，对右值进行绑定的引用就是右值引用，他的语法是这样的A&amp;&amp;，通过双引号来表示绑定类型为A的右值。通过&amp;&amp;我们就可以很方便的绑定右值了，比如我们可以这样绑定一个右值：　　</p><a id="more"></a>　　<figure class="highlight 1c"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int<span class="meta">&amp;&amp; i = 0;</span></span><br></pre></td></tr></table></div></figure><p>　　这里我们绑定了一个右值0，关于右值的概念会在后面介绍。右值引用是C++11中新增加的一个很重要的特性，他主是要用来解决C++98/03中遇到的两个问题，第一个问题就是临时对象非必要的昂贵的拷贝操作，第二个问题是在模板函数中如何按照参数的实际类型进行转发。通过引入右值引用，很好的解决了这两个问题，改进了程序性能，后面将会详细介绍右值引用是如何解决这两个问题的。</p><p>　　和右值引用相关的概念比较多，比如：右值、纯右值、将亡值、universal references、引用折叠、移动语义、move语义和完美转发等等。很多都是新概念，对于刚学习C++11右值引用的初学者来说，可能会觉得右值引用过于复杂，概念之间的关系难以理清。</p><p>右值引用实际上并没有那么复杂，其实是关于4行代码的故事，通过简单的4行代码我们就能清晰的理解右值引用相关的概念了。本文希望带领读者通过4行代码来理解右值引用相关的概念，理清他们之间的关系，并最终能透彻地掌握C++11的新特性–右值引用。</p><h2 id="四行代码的故事">四行代码的故事<a href="post/右值引用#四行代码的故事"></a></h2><h3 id="第1行代码的故事">第1行代码的故事<a href="post/右值引用#第1行代码的故事"></a></h3><figure class="highlight ebnf"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int i</span> = getVar();</span><br></pre></td></tr></table></div></figure><p>　　上面的这行代码很简单，从getVar()函数获取一个整形值，然而，这行代码会产生几种类型的值呢？答案是会产生两种类型的值，一种是左值i，一种是函数getVar()返回的临时值，这个临时值在表达式结束后就销毁了，而左值i在表达式结束后仍然存在，这个临时值就是右值，具体来说是一个纯右值，右值是不具名的。区分左值和右值的一个简单办法是：看能不能对表达式取地址，如果能，则为左值，否则为右值。</p><p>　　所有的具名变量或对象都是左值，而匿名变量则是右值，比如，简单的赋值语句：</p><figure class="highlight ebnf"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int i</span> = 0;</span><br></pre></td></tr></table></div></figure><p>　　在这条语句中，i 是左值，0 是字面量，就是右值。在上面的代码中，i 可以被引用，0 就不可以了。具体来说上面的表达式中等号右边的0是纯右值（prvalue），在C++11中所有的值必属于左值、将亡值、纯右值三者之一。比如，非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和lambda表达式等都是纯右值。而将亡值是C++11新增的、与右值引用相关的表达式，比如，将要被移动的对象、T&amp;&amp;函数返回值、std::move返回值和转换为T&amp;&amp;的类型的转换函数的返回值等。关于将亡值我们会在后面介绍，先看下面的代码：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = []&#123;<span class="keyword">return</span> <span class="number">5</span>;&#125;;</span><br></pre></td></tr></table></div></figure><p>　　上面的代码中5是一个原始字面量， []{return 5;}是一个lambda表达式，都是属于纯右值，他们的特点是在表达式结束之后就销毁了。</p><p>　　通过地行代码我们对右值有了一个初步的认识，知道了什么是右值，接下来再来看看第二行代码。</p><h3 id="第2行代码的故事">第2行代码的故事<a href="post/右值引用#第2行代码的故事"></a></h3><figure class="highlight 1c"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T<span class="meta">&amp;&amp; k = getVar();</span></span><br></pre></td></tr></table></div></figure><p>　　第二行代码和第一行代码很像，只是相比第一行代码多了“&amp;&amp;”，他就是右值引用，我们知道左值引用是对左值的引用，那么，对应的，对右值的引用就是右值引用，而且右值是匿名变量，我们也只能通过引用的方式来获取右值。虽然第二行代码和第一行代码看起来差别不大，但是实际上语义的差别很大，这里，getVar()产生的临时值不会像第一行代码那样，在表达式结束之后就销毁了，而是会被“续命”，他的生命周期将会通过右值引用得以延续，和变量k的声明周期一样长。</p><p>右值引用的第一个特点<br>　　通过右值引用的声明，右值又“重获新生”，其生命周期与右值引用类型变量的生命周期一样长，只要该变量还活着，该右值临时量将会一直存活下去。让我们通过一个简单的例子来看看右值的生命周期。如代码清单1-1所示。</p><p>代码清单1-1 </p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_constructCount=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> g_copyConstructCount=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> g_destructCount=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"construct: "</span>&lt;&lt;++g_constructCount&lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"copy construct: "</span>&lt;&lt;++g_copyConstructCount &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"destruct: "</span>&lt;&lt;++g_destructCount&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">GetA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a = GetA();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>　　为了清楚的观察临时值，在编译时设置编译选项-fno-elide-constructors用来关闭返回值优化效果。</p><p>　　输出结果：</p><figure class="highlight vim"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">construc<span class="variable">t:</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">copy</span> construc<span class="variable">t:</span> <span class="number">1</span></span><br><span class="line">destruc<span class="variable">t:</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">copy</span> construc<span class="variable">t:</span> <span class="number">2</span></span><br><span class="line">destruc<span class="variable">t:</span> <span class="number">2</span></span><br><span class="line">destruc<span class="variable">t:</span> <span class="number">3</span></span><br></pre></td></tr></table></div></figure><p>　　从上面的例子中可以看到，在没有返回值优化的情况下，拷贝构造函数调用了两次，一次是GetA()函数内部创建的对象返回出来构造一个临时对象产生的，另一次是在main函数中构造a对象产生的。第二次的destruct是因为临时对象在构造a对象之后就销毁了。如果开启返回值优化的话，输出结果将是：</p><p>construct: 1</p><p>destruct: 1</p><p>　　可以看到返回值优化将会把临时对象优化掉，但这不是c++标准，是各编译器的优化规则。我们在回到之前提到的可以通过右值引用来延长临时右值的生命周期，如果上面的代码中我们通过右值引用来绑定函数返回值的话，结果又会是什么样的呢？在编译时设置编译选项-fno-elide-constructors。</p><figure class="highlight groovy"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    A&amp;&amp; a = GetA();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="string">construct:</span> <span class="number">1</span></span><br><span class="line">copy <span class="string">construct:</span> <span class="number">1</span></span><br><span class="line"><span class="string">destruct:</span> <span class="number">1</span></span><br><span class="line"><span class="string">destruct:</span> <span class="number">2</span></span><br></pre></td></tr></table></div></figure><p>　　通过右值引用，比之前少了一次拷贝构造和一次析构，原因在于右值引用绑定了右值，让临时右值的生命周期延长了。我们可以利用这个特点做一些性能优化，即避免临时对象的拷贝构造和析构，事实上，在c++98/03中，通过常量左值引用也经常用来做性能优化。上面的代码改成：</p><p>　　const A&amp; a = GetA();</p><p>　　输出的结果和右值引用一样，因为常量左值引用是一个“万能”的引用类型，可以接受左值、右值、常量左值和常量右值。需要注意的是普通的左值引用不能接受右值，比如这样的写法是不对的：</p><p>　　A&amp; a = GetA();</p><p>　　上面的代码会报一个编译错误，因为非常量左值引用只能接受左值。</p><p>右值引用的第二个特点<br>　　右值引用独立于左值和右值。意思是右值引用类型的变量可能是左值也可能是右值。比如下面的例子：</p><figure class="highlight 1c"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int<span class="meta">&amp;&amp; var1 = 1;</span></span><br></pre></td></tr></table></div></figure><p>　　var1类型为右值引用，但var1本身是左值，因为具名变量都是左值。</p><p>　　关于右值引用一个有意思的问题是：T&amp;&amp;是什么，一定是右值吗？让我们来看看下面的例子：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; t)</span></span>&#123;&#125;</span><br><span class="line">f(<span class="number">10</span>); <span class="comment">//t是右值</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">f(x); <span class="comment">//t是左值</span></span><br></pre></td></tr></table></div></figure><p>　　从上面的代码中可以看到，T&amp;&amp;表示的值类型不确定，可能是左值又可能是右值，这一点看起来有点奇怪，这就是右值引用的一个特点。</p><p>右值引用的第三个特点<br>　　T&amp;&amp; t在发生自动类型推断的时候，它是未定的引用类型（universal references），如果被一个左值初始化，它就是一个左值；如果它被一个右值初始化，它就是一个右值，它是左值还是右值取决于它的初始化。</p><p>我们再回过头看上面的代码，对于函数template<typename t="">void f(T&amp;&amp; t)，当参数为右值10的时候，根据universal references的特点，t被一个右值初始化，那么t就是右值；当参数为左值x时，t被一个左值引用初始化，那么t就是一个左值。需要注意的是，仅仅是当发生自动类型推导（如函数模板的类型自动推导，或auto关键字）的时候，T&amp;&amp;才是universal references。再看看下面的例子：</typename></p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; param)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    Test(Test&amp;&amp; rhs); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>　　上面的例子中，param是universal reference，rhs是Test&amp;&amp;右值引用，因为模版函数f发生了类型推断，而Test&amp;&amp;并没有发生类型推导，因为Test&amp;&amp;是确定的类型了。</p><p>　　正是因为右值引用可能是左值也可能是右值，依赖于初始化，并不是一下子就确定的特点，我们可以利用这一点做很多文章，比如后面要介绍的移动语义和完美转发。</p><p>　　这里再提一下引用折叠，正是因为引入了右值引用，所以可能存在左值引用与右值引用和右值引用与右值引用的折叠，C++11确定了引用折叠的规则，规则是这样的：</p><ul><li>所有的右值引用叠加到右值引用上仍然还是一个右值引用；</li><li>所有的其他引用类型之间的叠加都将变成左值引用。</li></ul><h3 id="第3行代码的故事">第3行代码的故事<a href="post/右值引用#第3行代码的故事"></a></h3><figure class="highlight excel"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">T</span>(<span class="built_in">T</span>&amp;&amp; a) <span class="symbol">:</span> m_val(val)&#123; a.m_val=nullptr; &#125;</span><br></pre></td></tr></table></div></figure><p>　　这行代码实际上来自于一个类的构造函数，构造函数的一个参数是一个右值引用，为什么将右值引用作为构造函数的参数呢？在解答这个问题之前我们先看一个例子。如代码清单1-2所示。</p><p>代码清单1-2</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A():m_ptr(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">0</span>))&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"construct"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a):m_ptr(<span class="keyword">new</span> <span class="keyword">int</span>(*a.m_ptr)) <span class="comment">//深拷贝的拷贝构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy construct"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A()&#123; <span class="keyword">delete</span> m_ptr;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* m_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a = GetA();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    输出：</span><br><span class="line">construct</span><br><span class="line">copy construct</span><br><span class="line">copy construct</span><br></pre></td></tr></table></div></figure><p>　　这个例子很简单，一个带有堆内存的类，必须提供一个深拷贝拷贝构造函数，因为默认的拷贝构造函数是浅拷贝，会发生“指针悬挂”的问题。如果不提供深拷贝的拷贝构造函数，上面的测试代码将会发生错误（编译选项-fno-elide-constructors），内部的m_ptr将会被删除两次，一次是临时右值析构的时候删除一次，第二次外面构造的a对象释放时删除一次，而这两个对象的m_ptr是同一个指针，这就是所谓的指针悬挂问题。提供深拷贝的拷贝构造函数虽然可以保证正确，但是在有些时候会造成额外的性能损耗，因为有时候这种深拷贝是不必要的。比如下面的代码：</p><p>　　上面代码中的GetA函数会返回临时变量，然后通过这个临时变量拷贝构造了一个新的对象a，临时变量在拷贝构造完成之后就销毁了，如果堆内存很大的话，那么，这个拷贝构造的代价会很大，带来了额外的性能损失。每次都会产生临时变量并造成额外的性能损失，有没有办法避免临时变量造成的性能损失呢？答案是肯定的，C++11已经有了解决方法，看看下面的代码。如代码清单1-3所示。</p><p>代码清单1-3</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() :m_ptr(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">0</span>))&#123;&#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a):m_ptr(<span class="keyword">new</span> <span class="keyword">int</span>(*a.m_ptr)) <span class="comment">//深拷贝的拷贝构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy construct"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A(A&amp;&amp; a) :m_ptr(a.m_ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        a.m_ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"move construct"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A()&#123; <span class="keyword">delete</span> m_ptr;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* m_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a = Get(<span class="literal">false</span>); </span><br><span class="line">&#125; </span><br><span class="line">输出：</span><br><span class="line">construct</span><br><span class="line">move construct</span><br><span class="line">move construct</span><br></pre></td></tr></table></div></figure><p>　　代码清单1-3和1-2相比只多了一个构造函数，输出结果表明，并没有调用拷贝构造函数，只调用了move construct函数，让我们来看看这个move construct函数：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A(A&amp;&amp; a) :m_ptr(a.m_ptr)</span><br><span class="line">&#123;</span><br><span class="line">    a.m_ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"move construct"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>　　这个构造函数并没有做深拷贝，仅仅是将指针的所有者转移到了另外一个对象，同时，将参数对象a的指针置为空，这里仅仅是做了浅拷贝，因此，这个构造函数避免了临时变量的深拷贝问题。</p><p>　　上面这个函数其实就是移动构造函数，他的参数是一个右值引用类型，这里的A&amp;&amp;表示右值，为什么？前面已经提到，这里没有发生类型推断，是确定的右值引用类型。为什么会匹配到这个构造函数？因为这个构造函数只能接受右值参数，而函数返回值是右值，所以就会匹配到这个构造函数。这里的A&amp;&amp;可以看作是临时值的标识，对于临时值我们仅仅需要做浅拷贝即可，无需再做深拷贝，从而解决了前面提到的临时变量拷贝构造产生的性能损失的问题。这就是所谓的移动语义，右值引用的一个重要作用是用来支持移动语义的。</p><p>　　需要注意的一个细节是，我们提供移动构造函数的同时也会提供一个拷贝构造函数，以防止移动不成功的时候还能拷贝构造，使我们的代码更安全。</p><p>　　我们知道移动语义是通过右值引用来匹配临时值的，那么，普通的左值是否也能借助移动语义来优化性能呢，那该怎么做呢？事实上C++11为了解决这个问题，提供了std::move方法来将左值转换为右值，从而方便应用移动语义。move是将对象资源的所有权从一个对象转移到另一个对象，只是转移，没有内存的拷贝，这就是所谓的move语义。如图1-1所示是深拷贝和move的区别。</p><p>图1-1 深拷贝和move的区别</p><p>　　再看看下面的例子：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="built_in">std</span>::<span class="built_in">string</span>&gt; tokens;</span><br><span class="line">    <span class="comment">//省略初始化...</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="built_in">std</span>::<span class="built_in">string</span>&gt; t = tokens; <span class="comment">//这里存在拷贝 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="built_in">std</span>::<span class="built_in">string</span>&gt; tokens;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt; <span class="built_in">std</span>::<span class="built_in">string</span>&gt; t = <span class="built_in">std</span>::move(tokens);  <span class="comment">//这里没有拷贝</span></span><br></pre></td></tr></table></div></figure><p>　　如果不用std::move，拷贝的代价很大，性能较低。使用move几乎没有任何代价，只是转换了资源的所有权。他实际上将左值变成右值引用，然后应用移动语义，调用移动构造函数，就避免了拷贝，提高了程序性能。如果一个对象内部有较大的对内存或者动态数组时，很有必要写move语义的拷贝构造函数和赋值函数，避免无谓的深拷贝，以提高性能。事实上，C++11中所有的容器都实现了移动语义，方便我们做性能优化。</p><p>　　这里也要注意对move语义的误解，move实际上它并不能移动任何东西，它唯一的功能是将一个左值强制转换为一个右值引用。如果是一些基本类型比如int和char[10]定长数组等类型，使用move的话仍然会发生拷贝（因为没有对应的移动构造函数）。所以，move对于含资源（堆内存或句柄）的对象来说更有意义。</p><h3 id="第4行代码故事">第4行代码故事<a href="post/右值引用#第4行代码故事"></a></h3><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; val)</span></span>&#123; foo(<span class="built_in">std</span>::forward&lt;T&gt;(val)); &#125;</span><br></pre></td></tr></table></div></figure><p>　　C++11之前调用模板函数时，存在一个比较头疼的问题，如何正确的传递参数。比如： </p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forwardValue</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    processValue(val); <span class="comment">//右值参数会变成左值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forwardValue</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    processValue(val); <span class="comment">//参数都变成常量左值引用了 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>都不能按照参数的本来的类型进行转发。</p><p>　　C++11引入了完美转发：在函数模板中，完全依照模板的参数的类型（即保持参数的左值、右值特征），将参数传递给函数模板中调用的另外一个函数。C++11中的std::forward正是做这个事情的，他会按照参数的实际类型进行转发。看下面的例子：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processValue</span><span class="params">(<span class="keyword">int</span>&amp; a)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"lvalue"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processValue</span><span class="params">(<span class="keyword">int</span>&amp;&amp; a)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"rvalue"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forwardValue</span><span class="params">(T&amp;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    processValue(<span class="built_in">std</span>::forward&lt;T&gt;(val)); <span class="comment">//照参数本来的类型进行转发。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Testdelcl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    forwardValue(i); <span class="comment">//传入左值 </span></span><br><span class="line">    forwardValue(<span class="number">0</span>);<span class="comment">//传入右值 </span></span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">lvaue </span><br><span class="line">rvalue</span><br></pre></td></tr></table></div></figure><p>　　右值引用T&amp;&amp;是一个universal references，可以接受左值或者右值，正是这个特性让他适合作为一个参数的路由，然后再通过std::forward按照参数的实际类型去匹配对应的重载函数，最终实现完美转发。</p><p>　　我们可以结合完美转发和移动语义来实现一个泛型的工厂函数，这个工厂函数可以创建所有类型的对象。具体实现如下：</p><figure class="highlight cpp"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>…  Args&gt;</span><br><span class="line"><span class="function">T* <span class="title">Instance</span><span class="params">(Args&amp;&amp;… args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> T(<span class="built_in">std</span>::forward&lt;Args &gt;(args)…);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>　　这个工厂函数的参数是右值引用类型，内部使用std::forward按照参数的实际类型进行转发，如果参数的实际类型是右值，那么创建的时候会自动匹配移动构造，如果是左值则会匹配拷贝构造。</p><h2 id="总结">总结<a href="post/右值引用#总结"></a></h2><p>　　通过4行代码我们知道了什么是右值和右值引用，以及右值引用的一些特点，利用这些特点我们才方便实现移动语义和完美转发。C++11正是通过引入右值引用来优化性能，具体来说是通过移动语义来避免无谓拷贝的问题，通过move语义来将临时生成的左值中的资源无代价的转移到另外一个对象中去，通过完美转发来解决不能按照参数实际类型来转发的问题（同时，完美转发获得的一个好处是可以实现移动语义）。</p><p><em>本文曾发表于《程序员》2015年1月刊。转载请注明出处。</em></p><p><em>后记：</em>本文的内容主要来自于我在公司内部培训的一次课程，因为很多人对C++11右值引用搞不清或者理解得不深入，所以我觉得有必要拿出来分享一下，让更多的人看到，就整理了一下发到程序员杂志了，我相信读者看完之后对右值引用会有全面深入的了解。</p><p>一点梦想：尽自己一份力，让c++的世界变得更美好！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;概述&lt;a href=&quot;post/右值引用#概述&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;　　右值引用的概念有些读者可能会感到陌生，其实他和C++98/03中的左值引用有些类似，例如，c++98/03中的左值引用是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int&amp;amp; &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;　　这里的int&amp;amp;是对左值进行绑定（但是int&amp;amp;却不能绑定右值），相应的，对右值进行绑定的引用就是右值引用，他的语法是这样的A&amp;amp;&amp;amp;，通过双引号来表示绑定类型为A的右值。通过&amp;amp;&amp;amp;我们就可以很方便的绑定右值了，比如我们可以这样绑定一个右值：
　　&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://shuntan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuntan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>squid介绍及其简单配置</title>
    <link href="https://shuntan.github.io/posts/squid/"/>
    <id>https://shuntan.github.io/posts/squid/</id>
    <published>2019-05-15T07:15:30.000Z</published>
    <updated>2019-07-03T12:00:04.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="squid的概念">squid的概念<a href="post/squid#squid的概念"></a></h1><p>squid是一种用来缓存Internet数据的软件。接受来自人们需要下载的目标（object）的请求并适当的处理这些请求。也就是说，如果一个人想下载一web界面，他请求squid为他取得这个页面。squid随之连接到远程服务器并向这个页面发出请求。然后，squid显式地聚集数据到客户端机器，而且同时复制一份。当下一次有人需要同一页面时， squid可以简单的从磁盘中读到它，那样数据会立即传输到客户机上。</p><a id="more"></a><h1 id="下载地址">下载地址<a href="post/squid#下载地址"></a></h1><p>squid-cache 官网 <a href="http://www.squid-cache.org" target="_blank" rel="noopener">http://www.squid-cache.org</a></p><p>squid介绍及其简单配置 <a href="https://www.cnblogs.com/cherishry/p/5706736.html" target="_blank" rel="noopener">https://www.cnblogs.com/cherishry/p/5706736.html</a></p><p>CentOS 7安装squid代理服务器 <a href="https://blog.csdn.net/ithomer/article/details/78136993" target="_blank" rel="noopener">https://blog.csdn.net/ithomer/article/details/78136993</a></p><h2 id="squid代理的作用">squid代理的作用<a href="post/squid#squid代理的作用"></a></h2><ul><li>通过缓存的方式为用户提供Web访问加速</li><li>对用户的Web访问进行过滤控制</li></ul><h2 id="工作流程">工作流程<a href="post/squid#工作流程"></a></h2><p>当代理服务器中有客户端需要的数据时：</p><p>a.客户端向代理服务器发送数据请求；</p><p>b.代理服务器检查自己的数据缓存；</p><p>c.代理服务器在缓存中找到了用户想要的数据，取出数据；</p><p>d.代理服务器将从缓存中取得的数据返回给客户端。</p><p>当代理服务器中没有客户端需要的数据时了：</p><p>1.客户端向代理服务器发送数据请求；</p><p>2.代理服务器检查自己的数据缓存；</p><p>3.代理服务器在缓存中没有找到用户想要的数据；</p><p>4.代理服务器向Internet 上的远端服务器发送数据请求；</p><p>5.远端服务器响应，返回相应的数据；</p><p>6.代理服务器取得远端服务器的数据，返回给客户端，并保留一份到自己的数据缓存中。</p><div class="article-img"><p><img src="https://images2015.cnblogs.com/blog/872781/201607/872781-20160726112850919-758636566.jpg" alt="" data-zoomable=""></p></div><p>Squid代理服务器工作在TCP/IP应用层</p><div class="article-img"><p><img src="https://images2015.cnblogs.com/blog/872781/201607/872781-20160726112935653-887103660.jpg" alt="" data-zoomable=""></p></div><h2 id="Squid各种代理的定义">Squid各种代理的定义<a href="post/squid#Squid各种代理的定义"></a></h2><h3 id="正向代理">正向代理<a href="post/squid#正向代理"></a></h3><h4 id="标准的代理缓冲服务器">标准的代理缓冲服务器<a href="post/squid#标准的代理缓冲服务器"></a></h4><p>一个标准的代理缓冲服务被用于缓存静态的网页到本地网络上的一台主机上（即代理服务器）。当被缓存的页面被第二次访问的时候，浏览器将直接从本地代理服务器那里获取请求数据而不再向原web站点请求数据。这样就节省了宝贵的网络带宽，而且提高了访问速度。但是，要想实现这种方式，必须在每一个内部主机的浏览器上明确指名代理服务器的IP地址和端口号。客户端上网时，每次都把请求发送给代理服务器处理,代理服务器根据请求确定是否连接到远程web服务器获取数据。如果在本地缓冲区有目标文件，则直接将文件传给用户即可。如果没有的话则先取回文件，先在本地保存一份缓冲，然后将文件发送给客户端浏览器。</p><h4 id="透明代理缓冲服务器">透明代理缓冲服务器<a href="post/squid#透明代理缓冲服务器"></a></h4><p>透明代理缓冲服务器和标准代理服务器的功能完全相同。但是，代理操作对客户端的浏览器是透明的（即不需指明代理服务器的IP和端口）。透明代理服务器阻断网络通信，并且过滤出访问外部的HTTP（80端口）流量。如果客户端的请求在本地有缓冲则将缓冲的数据直接发给用户，如果在本地没有缓冲则向远程web服务器发出请求，其余操作和标准的代理服务器完全相同。对于linux操作系统来说，透明代理使用Iptables或者Ipchains实现。因此不需要对浏览器作任何设置，所以，透明代理对于ISP（Internet服务器提供商）特别有用。</p><h3 id="反向代理">反向代理<a href="post/squid#反向代理"></a></h3><h4 id="反向代理缓冲器">反向代理缓冲器<a href="post/squid#反向代理缓冲器"></a></h4><p>反向代理是和前两种代理完全不同的一种代理服务。使用它可以降低原始WEB服务器的负载。反向代理服务器承担了对原始WEB服务器的静态页面的请求，防止原始服务器过载。它位于WEB服务器和Internet之间，处理所有对WEB服务器的请求，组织了WEB服务器和Internet的直接通信。如果互联网用户请求的页面在代理服务器上有缓冲的话，代理服务器直接将缓冲内容发送给用户。如果没有缓冲则先向WEB服务器发出请求，取回数据，本地缓存后再发给用户。这种方式通过降低了WEB服务器的请求数从而降低了WEB服务器的负载。</p><h3 id="正向代理与反向代理的区别">正向代理与反向代理的区别<a href="post/squid#正向代理与反向代理的区别"></a></h3><h3 id="概念">概念<a href="post/squid#概念"></a></h3><p>正向代理：对于原始服务器而言，就是客户端的代言人<br>反向代理：对于客户端而言，就像是原始服务器</p><h3 id="用途">用途<a href="post/squid#用途"></a></h3><p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。<br>反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</p><h3 id="安全性">安全性<a href="post/squid#安全性"></a></h3><p>正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。<br>反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p><h2 id="Squid主要组成部分">Squid主要组成部分<a href="post/squid#Squid主要组成部分"></a></h2><p>服务名：<code>squid</code><br>主程序：<code>/usr/sbin/squid</code><br>配置目录：<code>/etc/squid</code><br>主配置文件：<code>/etc/squid/squid.conf</code><br>监听tcp端口号：<code>3128</code><br>默认访问日志文件：<code>/var/log/squid/access.log</code></p><h2 id="squid常用配置选项">squid常用配置选项<a href="post/squid#squid常用配置选项"></a></h2><p><code>/etc/squid/squid.conf</code></p><figure class="highlight glsl"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http_port <span class="number">3128</span>  (还可以只监听一个IP http_port <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3128</span>)</span><br><span class="line">cache_mem <span class="number">64</span>MB  <span class="meta">#缓存占内存大小</span></span><br><span class="line">maximum_object_size <span class="number">4096</span>KB  <span class="meta">#最大缓存块</span></span><br><span class="line">reply_body_max_size  <span class="number">1024000</span> allow <span class="built_in">all</span>      <span class="meta">#限定下载文件大小</span></span><br><span class="line">access_log /var/<span class="built_in">log</span>/squid/access.<span class="built_in">log</span>    <span class="meta">#访问日志存放的地方</span></span><br><span class="line">visible_hostname    proxy.test.xom  <span class="meta">#可见的主机名</span></span><br><span class="line">cache_dir ufs /var/spool/squid  <span class="number">100</span> <span class="number">16</span> <span class="number">256</span> </span><br><span class="line"><span class="meta">#ufs:缓存数据的存储格式</span></span><br><span class="line"><span class="meta">#/var/spool/squid    缓存目录</span></span><br><span class="line"><span class="meta">#100：缓存目录占磁盘空间大小（M）</span></span><br><span class="line"><span class="meta">#16：缓存空间一级子目录个数</span></span><br><span class="line"><span class="meta">#256：缓存空间二级子目录个数</span></span><br><span class="line">cache_mgr webmaster@test.com    <span class="meta">#定义管理员邮箱</span></span><br><span class="line">http_access deny <span class="built_in">all</span>    <span class="meta">#访问控制</span></span><br></pre></td></tr></table></div></figure><h2 id="squid中的访问控制">squid中的访问控制<a href="post/squid#squid中的访问控制"></a></h2><p>  使用访问控制特性，可以控制在访问时根据特定的时间间隔进行缓存、访问特定站点或一组站点等等。squid访问控制有两个要素：ACL元素和访问列表。访问列表可以允许或拒绝某些用户对此服务的访问。</p><h3 id="ACL元素类型">ACL元素类型<a href="post/squid#ACL元素类型"></a></h3><ul><li>src：源地址（即客户机IP地址）</li><li>dst：目标地址（即服务器IP地址）</li><li>srcdomain：源名称（即客户机名称）</li><li>dstdomain：目标名称（即服务器名称）</li><li>time：一天中的时刻和一周内的一天</li><li>url_regex：URL规则表达式匹配</li><li>urlpath_regex：URL-path规则表达式匹配，略去协议和主机名</li><li>proxy_auth：通过外部程序进行用户验证</li><li>maxconn：单一IP的最大连接数</li></ul><h3 id="ACL格式">ACL格式<a href="post/squid#ACL格式"></a></h3><pre><code>为了使用控制功能，必须先设置ACL规则并应用。ACL声明的格式如下：</code></pre><p>注：</p><ul><li>acl_element_name 可以是任一个在ACL中定义的名称</li><li>任何两个ACL元素不能用相同的名字</li><li>每个ACL由列表值组成。当进行匹配检测的时候，多个值由逻辑或运算连接；换言之，即任一ACL元素的值被匹配，则这个ACL元素即被匹配。</li><li>并不是所有ACL元素都能使用访问列表中的全部类型</li><li>不同的ACL元素写在不同行中，squid将把他们组合在一个列表中</li></ul><h3 id="访问条目">访问条目<a href="post/squid#访问条目"></a></h3><p>我们可以使用许多不同的访问条目。下面是我们常用的几个：</p><ul><li>http_access:允许HTTP访问</li><li>no_cache:定义对缓存请求的响应。<br>访问列表的规则由一些类似’allow’或‘deny’的关键字构成，用以允许或拒绝向特定或一组ACL元素提供服务。</li></ul><ol><li>一个访问列表可以由多条规则组成</li><li>如果没有任何规则与访问请求匹配，默认动作将与列表中最后一条规则对应。</li><li>一个访问条目中所有元素将用逻辑与运算连接<br>http_access Action 声明1 AND 声明2 AND 声明 OR.<br>http_access Action 声明3<br>多个http_accesss声明间用或运算连接，但每个访问条目的元素间用与运算连接。</li><li>列表中的规则总是遵循由上而下的顺序</li><li>这些规则按照他们的排列顺序进行匹配检测，一旦检测到匹配的规则，匹配就立即结束。</li></ol><h2 id="Squid-conf配置文件详解">Squid.conf配置文件详解<a href="post/squid#Squid-conf配置文件详解"></a></h2><figure class="highlight sql"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#acl all src 0.0.0.0/0.0.0.0 and http_access allow all选项定义了一个访问控制列表。详细情况参见和Squid软件</span></span><br><span class="line"><span class="comment">#携带的文档。这里的访问控制列表允许所有对代理服务的访问，因为这里该代理是加速web服务器。</span></span><br><span class="line">acl all src 0.0.0.0/0.0.0.0                 <span class="comment">#允许所有IP访问</span></span><br><span class="line">acl manager proto http                 <span class="comment">#manager url协议为http</span></span><br><span class="line">acl localhost src 127.0.0.1/255.255.255.255  <span class="comment">#允午本机IP</span></span><br><span class="line">acl to_localhost dst 127.0.0.1                 <span class="comment">#允午目的地址为本机IP</span></span><br><span class="line">acl Safe_ports port 80                <span class="comment"># 允许安全更新的端口为80</span></span><br><span class="line">acl CONNECT method CONNECT        <span class="comment">#请求方法以CONNECT</span></span><br><span class="line">http_access allow all                <span class="comment">#允许所有人使用该代理.因为这里是代理加速web服务器</span></span><br><span class="line">http_reply_access allow all                <span class="comment">#允许所有客户端使用该代理</span></span><br><span class="line"></span><br><span class="line">acl OverConnLimit maxconn 16        <span class="comment">#限制每个IP最大允许16个连接，防止攻击</span></span><br><span class="line">http_access deny OverConnLimit</span><br><span class="line"></span><br><span class="line">icp_access deny all                        <span class="comment">#禁止从邻居服务器缓冲内发送和接收ICP请求.</span></span><br><span class="line">miss_access allow all                <span class="comment">#允许直接更新请求</span></span><br><span class="line">ident_lookup_access deny all                                <span class="comment">#禁止lookup检查DNS</span></span><br><span class="line">http_port 8080 transparent                                <span class="comment">#指定Squid监听浏览器客户请求的端口号。</span></span><br><span class="line"></span><br><span class="line">hierarchy_stoplist cgi-bin ?                <span class="comment">#用来强制某些特定的对象不被缓存，主要是处于安全的目的。</span></span><br><span class="line">acl QUERY urlpath_regex cgi-bin \?</span><br><span class="line"><span class="keyword">cache</span> deny <span class="keyword">QUERY</span></span><br><span class="line"></span><br><span class="line">cache_mem <span class="number">1</span> GB        <span class="comment">#这是一个优化选项，增加该内存值有利于缓存。应该注意的是：</span></span><br><span class="line">                     <span class="comment">#一般来说如果系统有内存，设置该值为(n/)3M。现在是3G 所以这里1G</span></span><br><span class="line">fqdncache_size <span class="number">1024</span>        <span class="comment">#FQDN 高速缓存大小</span></span><br><span class="line">maximum_object_size_in_memory <span class="number">2</span> MB        <span class="comment">#允许最大的文件载入内存</span></span><br><span class="line"></span><br><span class="line">memory_replacement_policy <span class="keyword">heap</span> LFUDA  <span class="comment">#动态使用最小的，移出内存cache</span></span><br><span class="line">cache_replacement_policy <span class="keyword">heap</span> LFUDA         <span class="comment">#动态使用最小的，移出硬盘cache</span></span><br><span class="line"></span><br><span class="line">cache_dir ufs /home/<span class="keyword">cache</span> <span class="number">5000</span> <span class="number">32</span> <span class="number">512</span>  <span class="comment">#高速缓存目录 ufs 类型 使用的缓冲值最大允午1000MB空间，</span></span><br><span class="line"><span class="comment">#32个一级目录，512个二级目录</span></span><br><span class="line"></span><br><span class="line">max_open_disk_fds <span class="number">0</span>                                 <span class="comment">#允许最大打开文件数量,0 无限制</span></span><br><span class="line">minimum_object_size <span class="number">1</span> KB                         <span class="comment">#允午最小文件请求体大小</span></span><br><span class="line">maximum_object_size <span class="number">20</span> MB                 <span class="comment">#允午最大文件请求体大小</span></span><br><span class="line"></span><br><span class="line">cache_swap_low <span class="number">90</span>                            <span class="comment">#最小允许使用swap 90%</span></span><br><span class="line">cache_swap_high <span class="number">95</span>                            <span class="comment">#最多允许使用swap 95%</span></span><br><span class="line"></span><br><span class="line">ipcache_size <span class="number">2048</span>                                <span class="comment"># IP 地址高速缓存大小 2M</span></span><br><span class="line">ipcache_low <span class="number">90</span>                                <span class="comment">#最小允许ipcache使用swap 90%</span></span><br><span class="line">ipcache_high <span class="number">95</span>                                  <span class="comment">#最大允许ipcache使用swap 90%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">access_log /<span class="keyword">var</span>/<span class="keyword">log</span>/squid/access.log squid        <span class="comment">#定义日志存放记录</span></span><br><span class="line">cache_log /<span class="keyword">var</span>/<span class="keyword">log</span>/squid/cache.log squid</span><br><span class="line">cache_store_log <span class="keyword">none</span>                        <span class="comment">#禁止store日志</span></span><br><span class="line"></span><br><span class="line">emulate_httpd_log <span class="keyword">on</span>        <span class="comment">#将使Squid仿照Web服务器的格式创建访问记录。如果希望使用</span></span><br><span class="line">                                <span class="comment">#Web访问记录分析程序，就需要设置这个参数。</span></span><br><span class="line"></span><br><span class="line">refresh_pattern . <span class="number">0</span> <span class="number">20</span>% <span class="number">4320</span> override-<span class="keyword">expire</span> override-lastmod reload-<span class="keyword">into</span>-ims <span class="keyword">ignore</span>-reload   <span class="comment">#更新cache规则</span></span><br><span class="line"></span><br><span class="line">acl buggy_server url_regex ^<span class="keyword">http</span>://.... <span class="keyword">http</span>://          <span class="comment">#只允许http的请求</span></span><br><span class="line">broken_posts <span class="keyword">allow</span> buggy_server</span><br><span class="line"></span><br><span class="line">acl apache rep_header <span class="keyword">Server</span> ^Apache                 <span class="comment">#允许apache的编码</span></span><br><span class="line">broken_vary_encoding <span class="keyword">allow</span> apache</span><br><span class="line"></span><br><span class="line">request_entities <span class="keyword">off</span>                                        <span class="comment">#禁止非http的标分准请求，防止攻击</span></span><br><span class="line">header_access header <span class="keyword">allow</span> all                        <span class="comment">#允许所有的http报头</span></span><br><span class="line">relaxed_header_parser <span class="keyword">on</span>                                <span class="comment">#不严格分析http报头.</span></span><br><span class="line">client_lifetime <span class="number">120</span> <span class="keyword">minute</span>                                <span class="comment">#最大客户连接时间 120分钟</span></span><br><span class="line"></span><br><span class="line">cache_mgr sky@test.com                        <span class="comment">#指定当缓冲出现问题时向缓冲管理者发送告警信息的地址信息。</span></span><br><span class="line"></span><br><span class="line">cache_effective_user squid                        <span class="comment">#这里以用户squid的身份Squid服务器</span></span><br><span class="line">cache_effective_group squid</span><br><span class="line"></span><br><span class="line">icp_port <span class="number">0</span>                       <span class="comment">#指定Squid从邻居服务器缓冲内发送和接收ICP请求的端口号。</span></span><br><span class="line">                     <span class="comment">#这里设置为0是因为这里配置Squid为内部Web服务器的加速器，</span></span><br><span class="line">                     <span class="comment">#所以不需要使用邻居服务器的缓冲。0是禁用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cache_peer 设置允许更新缓存的主机，因是本机所以127.0.0.1</span></span><br><span class="line">cache_peer <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">parent</span> <span class="number">80</span> <span class="number">0</span> <span class="keyword">no</span>-<span class="keyword">query</span> <span class="keyword">default</span> multicast-responder <span class="keyword">no</span>-netdb-<span class="keyword">exchange</span></span><br><span class="line">cache_peer_domain <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>                                 </span><br><span class="line">hostname_aliases <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">error_directory /usr/<span class="keyword">share</span>/squid/<span class="keyword">errors</span>/Simplify_Chinese        <span class="comment">#定义错误路径</span></span><br><span class="line"></span><br><span class="line">always_direct <span class="keyword">allow</span> all                <span class="comment"># cache丢失或不存在是允许所有请求直接转发到原始服务器</span></span><br><span class="line">ignore_unknown_nameservers <span class="keyword">on</span>        <span class="comment">#开反DNS查询，当域名地址不相同时候，禁止访问</span></span><br><span class="line">coredump_dir  /<span class="keyword">var</span>/<span class="keyword">log</span>/squid                 <span class="comment">#定义dump的目录</span></span><br><span class="line"></span><br><span class="line">max_filedesc <span class="number">2048</span>                <span class="comment">#最大打开的文件描述</span></span><br><span class="line"></span><br><span class="line">half_closed_clients <span class="keyword">off</span>        <span class="comment">#使Squid在当read不再返回数据时立即关闭客户端的连接。</span></span><br><span class="line">                                <span class="comment">#有时read不再返回数据是由于某些客户关闭TCP的发送数据</span></span><br><span class="line">                                <span class="comment">#而仍然保持接收数据。而Squid分辨不出TCP半关闭和完全关闭。</span></span><br><span class="line"></span><br><span class="line">buffered_logs <span class="keyword">on</span> <span class="comment">#若打开选项“buffered_logs”可以稍稍提高加速某些对日志文件的写入，该选项主要是实现优化特性。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#防止天涯盗链，转嫁给百度</span></span><br><span class="line">acl tianya referer_regex -i tianya</span><br><span class="line">http_access deny tianya</span><br><span class="line">deny_info  tianya</span><br><span class="line"><span class="comment">#阻止baidu蜘蛛</span></span><br><span class="line">acl baidu req_header <span class="keyword">User</span>-<span class="keyword">Agent</span> Baiduspider</span><br><span class="line">http_access deny baidu</span><br><span class="line"><span class="comment">#限制同一IP客户端的最大连接数</span></span><br><span class="line">acl OverConnLimit maxconn <span class="number">128</span></span><br><span class="line">http_access deny OverConnLimit</span><br><span class="line"></span><br><span class="line"><span class="comment">#防止被人利用为HTTP代理，设置允许访问的IP地址</span></span><br><span class="line">acl myip dst <span class="number">222.18</span><span class="number">.63</span><span class="number">.37</span></span><br><span class="line">http_access deny !myip</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许本地管理</span></span><br><span class="line">acl Manager proto cache_object</span><br><span class="line">acl Localhost src <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">222.18</span><span class="number">.63</span><span class="number">.37</span></span><br><span class="line">http_access <span class="keyword">allow</span> Manager Localhost</span><br><span class="line">cachemgr_passwd <span class="number">53034338</span> all</span><br><span class="line">http_access deny Manager</span><br><span class="line"></span><br><span class="line"><span class="comment">#仅仅允许80端口的代理</span></span><br><span class="line">acl all src <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">acl Safe_ports port <span class="number">80</span> <span class="comment"># http</span></span><br><span class="line">http_access deny !Safe_ports</span><br><span class="line">http_access <span class="keyword">allow</span> all</span><br><span class="line"></span><br><span class="line"><span class="comment">#Squid信息设置</span></span><br><span class="line">visible_hostname happy.swjtu.edu.cn</span><br><span class="line">cache_mgr  ooopic2008@qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#基本设置</span></span><br><span class="line">cache_effective_user squid</span><br><span class="line">cache_effective_group squid</span><br><span class="line">tcp_recv_bufsize <span class="number">65535</span> <span class="keyword">bytes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.6的反向代理加速配置</span></span><br><span class="line">cache_peer <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">parent</span> <span class="number">80</span> <span class="number">0</span> <span class="keyword">no</span>-<span class="keyword">query</span> originserver</span><br><span class="line"></span><br><span class="line"><span class="comment">#错误文档</span></span><br><span class="line">error_directory /usr/<span class="keyword">local</span>/squid/<span class="keyword">share</span>/<span class="keyword">errors</span>/Simplify_Chinese</span><br><span class="line"></span><br><span class="line"><span class="comment">#单台使用，不使用该功能</span></span><br><span class="line">icp_port <span class="number">0</span></span><br><span class="line"></span><br><span class="line">hierarchy_stoplist cgi-<span class="keyword">bin</span> ?</span><br><span class="line"></span><br><span class="line">acl <span class="keyword">QUERY</span> urlpath_regex cgi-<span class="keyword">bin</span> \? .php .cgi .avi .wmv .rm .ram .mpg .mpeg .zip .exe</span><br><span class="line"><span class="keyword">cache</span> deny <span class="keyword">QUERY</span></span><br><span class="line"></span><br><span class="line">acl apache rep_header <span class="keyword">Server</span> ^Apache</span><br><span class="line">broken_vary_encoding <span class="keyword">allow</span> apache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">refresh_pattern ^<span class="keyword">ftp</span>:           <span class="number">1440</span> <span class="number">20</span>%     <span class="number">10080</span></span><br><span class="line">refresh_pattern ^gopher:        <span class="number">1440</span> <span class="number">0</span>%    <span class="number">1440</span></span><br><span class="line">refresh_pattern .             <span class="number">0</span>    <span class="number">20</span>%     <span class="number">4320</span></span><br><span class="line"></span><br><span class="line">cache_store_log <span class="keyword">none</span></span><br><span class="line">pid_filename /usr/<span class="keyword">local</span>/squid/<span class="keyword">var</span>/<span class="keyword">logs</span>/squid.pid</span><br><span class="line">emulate_httpd_log <span class="keyword">on</span></span><br></pre></td></tr></table></div></figure><h2 id="Squid常用命令">Squid常用命令<a href="post/squid#Squid常用命令"></a></h2><ol><li>初始化在squid.conf里配置的cache目录<br>squid -z<br>如果有错误提示，请检查cache目录的权限，可以更改目录权限<br>chown -R squid:squid /cache目录</li><li>对squid.conf排错，即验证squid.conf的语法和配置<br>squid -k parse<br>如果在squid.conf中有语法或配置错误，这里会返回提示，若无返回，尝试启动squid</li><li>前台启动squid，并输出启动过程<br>/usr/local/squid/sbin/squid -N -d1<br>如果有ready to server reques相关信息，说明squid启动成功<br>然后ctrl+c ,停止squid,并以后台运行的方式启动它</li><li>启动squid在后台运行<br>squid -s<br>可以使用ps -ax | grep squid 来查看squid进程是否存在</li><li>停止squid<br>squid -k shutdown</li><li>重新引导修改过的squid.conf<br>squid -k reconfigure -f /XXX/squid.conf<br>当squid进行配置更改后，可以使用该命令进行squid配置重载</li><li>把squid添加到系统启动项<br>vim /etc/rc.local<br>/usr/local/squid/sbin/squid -s</li><li>修改cache缓存目录的权限<br>chown -R squid.squid /cache目录<br>cache缓存目录根据自己的配置更改，squid用户和组是squid，squid</li><li>修改squid日志目录的权限<br>chown -R squid.squid 定义的日志文件所在目录<br>这一步并不是适合每一个使用squid的用户，意为让squid有权限在该目录里进行写操作</li><li>查看你的日志文档<br>more /usr/local/squid/var/logs/access.log | grep TCP_MEM_HIT<br>该指令可以看到在squid运行过程中，有那些文件被squid缓存到内存中，并返回给访问用户。<br>more /usr/local/squid/var/logs/access.log | grep TCP_HIT<br>该指令可以看到在squid运行过程中，有那些文件被squid缓存到cache目录中，并返回给访问用户。<br>more /usr/local/squid/var/logs/access.log | grep TCP_MISS<br>该指令可以看到在squid运行过程中，有那些文件没有被squid缓存，而是从原始服务器获取并返回给访问用户。</li></ol><h2 id="Squid命中率分析">Squid命中率分析<a href="post/squid#Squid命中率分析"></a></h2><figure class="highlight groovy"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/squid/</span>bin/squidclient -p <span class="number">80</span> <span class="string">mgr:</span>info</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/squid/</span>bin/squidclient -p <span class="number">80</span> <span class="string">mgr:</span><span class="number">5</span>min</span><br></pre></td></tr></table></div></figure><p>可以看到详细的性能情况,其中PORT是你的proxy的端口，5min可以是60min<br>取得squid运行状态信息：</p><figure class="highlight nginx"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">squidclient</span> -p <span class="number">80</span> mgr:<span class="literal">info</span></span><br></pre></td></tr></table></div></figure><p>取得squid内存使用情况：</p><figure class="highlight stylus"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squidclient -<span class="selector-tag">p</span> <span class="number">80</span> mgr:mem</span><br></pre></td></tr></table></div></figure><p>取得squid已经缓存的列表：</p><figure class="highlight armasm"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">squidclient</span> -p <span class="number">80</span> mgr:<span class="keyword">bjects. </span>use <span class="keyword">it </span>carefully,<span class="keyword">it </span>may crash</span><br></pre></td></tr></table></div></figure><p>取得squid的磁盘使用情况：</p><figure class="highlight stylus"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squidclient -<span class="selector-tag">p</span> <span class="number">80</span> mgr:diskd</span><br></pre></td></tr></table></div></figure><p>强制更新某个url：</p><figure class="highlight stylus"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squidclient -<span class="selector-tag">p</span> <span class="number">80</span> -m PURGE http:<span class="comment">//www.xxx.com/xxx.php</span></span><br></pre></td></tr></table></div></figure><p>更多的请查看：squidclient-h 或者 squidclient -p 80 mgr:<br>查命中率：</p><figure class="highlight armasm"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">squidclient</span> -h <span class="built_in">IP</span>(具体侦听<span class="built_in">IP</span>) -p <span class="number">80</span>(具体侦听端口) mgr:<span class="meta">info</span></span><br></pre></td></tr></table></div></figure><h2 id="定期清理swap-state内无效数据">定期清理swap.state内无效数据<a href="post/squid#定期清理swap-state内无效数据"></a></h2><figure class="highlight dts"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/path/</span>to<span class="meta-keyword">/squid/</span>sbin/squid -k rotate -f <span class="meta-keyword">/path/</span>to<span class="meta-keyword">/squid/</span>conf_file</span><br><span class="line">vi <span class="meta-keyword">/etc/</span>crontab</span><br><span class="line"><span class="number">0</span>        <span class="number">0</span>       *       *       *       root    <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/sbin/</span>squid -k rotate -f <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/etc/</span>squid/squid1.conf</span><br></pre></td></tr></table></div></figure><p>当squid应用运行了一段时间之后，cache_dir对应的swap.state文件就会变得越来越大，里面的无效接口数据越来越多，这可能影响squid的响应时间，因此需要使用squid清理swap.state里面的无效数据，减少swap.state的大小。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;squid的概念&quot;&gt;squid的概念&lt;a href=&quot;post/squid#squid的概念&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;squid是一种用来缓存Internet数据的软件。接受来自人们需要下载的目标（object）的请求并适当的处理这些请求。也就是说，如果一个人想下载一web界面，他请求squid为他取得这个页面。squid随之连接到远程服务器并向这个页面发出请求。然后，squid显式地聚集数据到客户端机器，而且同时复制一份。当下一次有人需要同一页面时， squid可以简单的从磁盘中读到它，那样数据会立即传输到客户机上。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://shuntan.github.io/categories/Linux/"/>
    
    
      <category term="squid" scheme="https://shuntan.github.io/tags/squid/"/>
    
      <category term="proxy" scheme="https://shuntan.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>科学上网：用 VPS 搭建 shadowsocks 服务器</title>
    <link href="https://shuntan.github.io/posts/shadowsocks/"/>
    <id>https://shuntan.github.io/posts/shadowsocks/</id>
    <published>2019-05-15T06:38:46.000Z</published>
    <updated>2019-07-03T12:00:01.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shadowsocks-简介">shadowsocks 简介<a href="post/shadowsocks#shadowsocks-简介"></a></h2><p>shadowsocks 是一款自定义协议的代理软件，由于其流量特征不明显，（直到不久前）一直可以稳定提供上网代理。</p><p>shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。</p><p>因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。</p><a id="more"></a><h2 id="购买-VPS-服务器">购买 VPS 服务器<a href="post/shadowsocks#购买-VPS-服务器"></a></h2><p>  主流的 VPS（虚拟主机）服务器提供商有三家：</p><ul><li>linode</li><li>digital ocean</li><li>bandwagon</li></ul><p>下面的比上面的便宜。如果只是自用，bandwagon 足够。</p><p>一般使用 paypal 绑定一个 visa 或 mastercard 信用卡来付款。注意要用国际 paypal 帐号，国内的是不能用外币付款的。</p><p>在 bandwagon 购买 VPS 以后会获得一个主机地址和用于 ssh 登录的 root 密码。</p><h2 id="远程登陆-VPS">远程登陆 VPS<a href="post/shadowsocks#远程登陆-VPS"></a></h2><p>  Mac或 Linux 下直接在终端中ssh root@your_vps_ip your_ssh_port即可。<br>在 windows 系统下需要专门的客户端来 SSH 登录 VPS。在&nbsp;<a href="http://www.netsarang.com/download/down_form.html?code=522&amp;utm_source=textarea.com&amp;utm_medium=textarea.com&amp;utm_campaign=article" target="_blank" rel="noopener">xShell 官网</a>&nbsp;&nbsp;下载 xShell。</p><p>  家庭和学校用户可以免费试用，下载时选择 home&nbsp;and&nbsp;school&nbsp;use 即可。需要用邮箱注册一下，下载链接会发送到邮箱中。</p><p>  xShell 中新建一个连接，会要求输入目标 IP 地址和端口，以及 root 密码，按提示操作即可。</p><h2 id="安装-shadowsocks">安装 shadowsocks<a href="post/shadowsocks#安装-shadowsocks"></a></h2><p>最好是centos7</p><p>1.安装pip</p><p>由于安装的是python 版本的 shadowsocks，所以首先安装pip</p><pre><code>$ curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;$ python get-pip.py</code></pre><p>2.安装shadowsocks    </p><pre><code>$ pip install --upgrade pip$ pip install shadowsocks</code></pre><p>3.创建配置文件</p><pre><code>创建文件所在目录:/etc</code></pre><p>创建文件命令</p><pre><code>$ vi /etc/shadowsocks.json</code></pre><p>若进入了etc目录</p><pre><code>$ vi shadowsocks.json</code></pre><p>配置文件内容：</p><p>单端口：</p><figure class="highlight ada"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>, <span class="comment">--服务器IP，直接用0.0.0.0也可</span></span><br><span class="line"></span><br><span class="line"> <span class="string">"server_port"</span>:<span class="number">8888</span>, <span class="comment">--端口端口</span></span><br><span class="line"></span><br><span class="line"> <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>, <span class="comment">--本地地址，可省略</span></span><br><span class="line"></span><br><span class="line"> <span class="string">"local_port"</span>:<span class="number">1080</span>,<span class="comment">--本地端口，可省略</span></span><br><span class="line"></span><br><span class="line"> <span class="string">"password"</span>:<span class="string">"password"</span>,<span class="comment">--密码</span></span><br><span class="line"></span><br><span class="line"> <span class="string">"timeout"</span>:<span class="number">300</span>, <span class="comment">--超时时间，可省略</span></span><br><span class="line"></span><br><span class="line"> <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>, <span class="comment">--加密策略，有多重策略，具体自查</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>多端口：</p><figure class="highlight clojure"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">"port_password"</span>:&#123;--每个端口对应一个密码</span><br><span class="line"></span><br><span class="line"> <span class="string">"1111"</span>:<span class="string">"password1"</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">"1112"</span>:<span class="string">"password2"</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">"1113"</span>:<span class="string">"password3"</span></span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="string">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">"fast_open"</span><span class="symbol">:false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>4.启动shadowsocks</p><p>启动</p><pre><code>ssserver -c /etc/shadowsocks.json -d start</code></pre><p>停止</p><pre><code>ssserver -c /etc/shadowsocks.json -d stop</code></pre><p>重启</p><pre><code>ssserver -c /etc/shadowsocks.json -d restart</code></pre><p>启动成功即可通过ss客户端使用。</p><p>在window端可以在控制台通过以下命令查看端口是否打开</p><pre><code>telnet {ip} {port}</code></pre><p>5.配置自启动</p><pre><code>新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下：</code></pre><p>[Unit]</p><pre><code>Description=Shadowsocks</code></pre><p>[Service]</p><pre><code>TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</code></pre><p>[Install]</p><pre><code>WantedBy=multi-user.target</code></pre><p>通过以下命令注册，启动服务</p><pre><code>$ systemctl enable shadowsocks$ systemctl start shadowsocks</code></pre><p>启动后可以查看服务状态</p><pre><code>$ systemctl status shadowsocks -l</code></pre><p>若启动成功：</p><p>● shadowsocks.service - Shadowsocks</p><p>Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)</p><p>Active: active (running) since Sun 2017-08-13 18:03:41 CST; 1h 29min ago</p><p>Main PID: 9567 (ssserver)</p><p>CGroup: /system.slice/shadowsocks.service</p><p>└─9567 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json<br>如果，服务失败，重启服务器试一下</p><h2 id="安装并启动-shadowsocks-客户端">安装并启动 shadowsocks 客户端<a href="post/shadowsocks#安装并启动-shadowsocks-客户端"></a></h2><p>  shadowsocks 支持 windows、Mac&nbsp;OS&nbsp;X、Linux、Android、iOS 等多个平台。不过 iOS 由于系统对应用后台运行的限制，推荐使用客户端内嵌的浏览器科学上网，给其他应用代理时需要每过几分钟重新启动一下 app。</p><p>  shadowsocks 项目 Github 主页在<a href="https://github.com/shadowsocks/shadowsocks?utm_source=textarea.com&amp;utm_medium=textarea.com&amp;utm_campaign=article" target="_blank" rel="noopener">这里</a>。</p><p>  里面可以找到客户端下载地址。</p><p>  下载安装客户端以后，只需按服务器的配置填写 IP 地址、服务器端口、本地端口（如果没有本地端口选项，就是默认的 1080）、密码、加密方式等参数，启动就可以了。</p><p>  客户端支持全局代理和 PAC 代理两种方式，后者会使用一个脚本来自动检查一个网站是否在需要代理的网站列表中，自动选择直接连接或代理连接。</p><p>  PAC 列表可以在线更新，但是难免有收录不全的情况。这时可以选择关闭 shadowsocks 代理（实际上是取消对系统代理的配置，shadowsocks 客户端仍然保持工作），然后使用支持自定义规则的代理管理插件来实现自动切换代理，比如 switchyOmega。</p><h2 id="使用-switchyOmega-实现自动切换代理">使用 switchyOmega 实现自动切换代理<a href="post/shadowsocks#使用-switchyOmega-实现自动切换代理"></a></h2><pre><code>switchyOmega 是 chrome 浏览器上一个很好用的代理管理插件。它的前身 switchySharp 更有名。chrome 应用商店本身需要翻墙才能访问，因此需要先在 shadowsocks 启动代理模式下下载安装，再关闭 shadowsocks 代理。安装完毕后，右击 switchyOmega 图标，选择选项，进入 switchOmega 配置界面。</code></pre><h3 id="创建-shadowsocks-情景模式">创建 shadowsocks 情景模式<a href="post/shadowsocks#创建-shadowsocks-情景模式"></a></h3><pre><code>新建一个情景模式，比如叫 SS，代理协议选择 socks5，代理地址为 127.0.0.1，端口 1080。现在切换到 SS 情景模式就可以通过 shadowsocks 科学上网了。后面获取自动切换规则列表</code></pre><h3 id="设置自动切换模式">设置自动切换模式<a href="post/shadowsocks#设置自动切换模式"></a></h3><p>  在设置界面选择自动切换模式，在 “切换规则” 中勾选“规则列表规则”，对应的情景模式选择刚刚新建的 SS。</p><p>  然后在下面的规则列表地址中填写</p><p>  <a href="https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt" target="_blank" rel="noopener">https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt</a></p><p>  规则列表格式选择 AutoProxy。</p><p>  然后点击立即更新情景模式， 更新完成后会有提示。</p><p>  点击左侧的 “应用选项”。然后单击 switchyOmega 图标，选择自动切换，就可以在访问“不存在的网站” 时自动切换到 shadowsocks 代理了。</p><h3 id="添加自定义规则">添加自定义规则<a href="post/shadowsocks#添加自定义规则"></a></h3><p>  如果遇到某个国外网站无法直接连接或速度太慢时，可以单击 switchyOmega 图标，选择 “添加条件”，情景模式选择 SS，就可以了。</p><p>  这时打开 switchyOmega 选项，在自动切换模式的切换规则中就可以看到刚刚添加的规则。可以在这里管理自定义的规则。</p><h3 id="导入和导出-switchyOmega-设置">导入和导出 switchyOmega 设置<a href="post/shadowsocks#导入和导出-switchyOmega-设置"></a></h3><p>  如果换了一台电脑，重新设置一遍 switchyOmega 就太麻烦了。可以在设置好的 switchyOmega 中导出设置文件，在另一个 chrome 浏览器中导入，就可以直接复制原来的设置了。</p><p>  在 switchyOmega 选项的左侧点击 “导入 / 导出”，点击“生成备份文件” 即可生成 switchyOmega 设置备份。点击 “从备份文件恢复” 可以导入备份文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;shadowsocks-简介&quot;&gt;shadowsocks 简介&lt;a href=&quot;post/shadowsocks#shadowsocks-简介&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;shadowsocks 是一款自定义协议的代理软件，由于其流量特征不明显，（直到不久前）一直可以稳定提供上网代理。&lt;/p&gt;
&lt;p&gt;shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。&lt;/p&gt;
&lt;p&gt;因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://shuntan.github.io/categories/Linux/"/>
    
    
      <category term="VPS" scheme="https://shuntan.github.io/tags/VPS/"/>
    
      <category term="shadowsocks" scheme="https://shuntan.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Tag Plugins</title>
    <link href="https://shuntan.github.io/posts/Tag%20Plugins/"/>
    <id>https://shuntan.github.io/posts/Tag Plugins/</id>
    <published>2019-05-10T04:35:58.000Z</published>
    <updated>2019-07-03T12:00:13.546Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><p><strong>Welcome</strong> to <a href="https://theme-next.org/docs/tag-plugins/" target="_blank" rel="noopener">tag-plugins</a></p>          </div><p>Tag Plugin is a way to make special style contents supported by Hexo. For example, we cannot show a image with custom size in standard Markdown. And then we can use tag plugins to solve it. <a href="https://hexo.io/docs/tag-plugins" target="_blank" rel="noopener">Hexo has a lot of tags</a> which can help user. And Hexo also have interfaces to themes which make themes able to create their own tags. Following tags is provided by NexT:</p><a id="more"></a><ul><li><a href="#Centered-Quote">Centered Quote</a></li><li><a href="#Include-Raw">Include Raw</a></li><li><a href="/docs/tag-plugins/button">Button</a></li><li><a href="/docs/tag-plugins/full-image">Full Image</a></li><li><a href="/docs/tag-plugins/group-pictures">Group Pictures</a></li><li><a href="/docs/tag-plugins/label">Label</a></li><li><a href="/docs/tag-plugins/mermaid">Mermaid</a></li><li><a href="/docs/tag-plugins/note">Note</a></li><li><a href="/docs/tag-plugins/pdf">PDF</a></li><li><a href="/docs/tag-plugins/tabs">Tabs</a></li><li><a href="/docs/tag-plugins/video">Video</a></li></ul><h3 id="Centered-Quote">Centered Quote<a href="post/Tag Plugins#Centered-Quote"></a></h3><p>This tag will make a quote with two lines before and after it, and text quoted will be centered. When using centered quote, if we have multi-line text, and each line has a different length, the quote won’t be symmetrical, so it’s recommended to use when only have single line text. For example before article all after article to make a summary.</p><h4 id="Usage">Usage<a href="post/Tag Plugins#Usage"></a></h4><figure class="highlight html"><figcaption><span>center-quote.js</span></figcaption><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% centerquote %&#125;Something&#123;% endcenterquote %&#125;</span><br><span class="line"><span class="comment">&lt;!-- Tag Alias --&gt;</span></span><br><span class="line">&#123;% cq %&#125;Something&#123;% endcq %&#125;</span><br></pre></td></tr></table></div></figure><h4 id="Example">Example<a href="post/Tag Plugins#Example"></a></h4><figure class="highlight md"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% cq %&#125;Elegant in code, simple in core&#123;% endcq %&#125;</span><br></pre></td></tr></table></div></figure><blockquote class="blockquote-center"><p>Elegant in code, simple in core</p></blockquote><h3 id="Include-Raw">Include Raw<a href="post/Tag Plugins#Include-Raw"></a></h3><p>This tag include any raw content into your posts. Path is relative to your site source directory.</p><h4 id="Usage-1">Usage<a href="post/Tag Plugins#Usage-1"></a></h4><figure class="highlight html"><figcaption><span>include-raw.js</span></figcaption><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_raw '_data/path/to/file.html' %&#125;</span><br></pre></td></tr></table></div></figure><h4 id="Example-1">Example<a href="post/Tag Plugins#Example-1"></a></h4><p>Let’s create <code>include-raw.html</code> file in <code>_data</code> directory under <span class="label info">site root directory</span> with following content:</p><figure class="highlight html"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Any <span class="tag">&lt;<span class="name">strong</span>&gt;</span>raw content<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> may be included with this tag.</span><br></pre></td></tr></table></div></figure><p>Then in any post we can use this content with <code>include_raw</code> tag:</p><figure class="highlight md"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include<span class="emphasis">_raw '_</span>data/path/to/include-raw.html' %&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;h3 id=&quot;FAQ&quot;&gt;&lt;a href=&quot;#FAQ&quot; class=&quot;headerlink&quot; title=&quot;FAQ&quot;&gt;&lt;/a&gt;FAQ&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Welcome&lt;/strong&gt; to &lt;a href=&quot;https://theme-next.org/docs/tag-plugins/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tag-plugins&lt;/a&gt;&lt;/p&gt;
          &lt;/div&gt;

&lt;p&gt;Tag Plugin is a way to make special style contents supported by Hexo. For example, we cannot show a image with custom size in standard Markdown. And then we can use tag plugins to solve it. &lt;a href=&quot;https://hexo.io/docs/tag-plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo has a lot of tags&lt;/a&gt; which can help user. And Hexo also have interfaces to themes which make themes able to create their own tags. Following tags is provided by NexT:&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://shuntan.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://shuntan.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://shuntan.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>《辐射4》二次元萌妹MOD</title>
    <link href="https://shuntan.github.io/posts/%E3%80%8A%E8%BE%90%E5%B0%844%E3%80%8B%E4%BA%8C%E6%AC%A1%E5%85%83%E8%90%8C%E5%A6%B9MOD/"/>
    <id>https://shuntan.github.io/posts/《辐射4》二次元萌妹MOD/</id>
    <published>2019-05-06T15:03:34.000Z</published>
    <updated>2019-07-03T11:57:11.499Z</updated>
    
    <content type="html"><![CDATA[<div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/thumbkwdfirst/20180828/1535458637_329538.jpg" alt="" data-zoomable=""><br><img src="https://img.3dmgame.com/uploads/images/thumbkwdfirst/20180522/1526978780_509292.png" alt="" data-zoomable=""></p></div><h1>《辐射4》二次元萌妹MOD<a href="post/《辐射4》二次元萌妹MOD#undefined"></a></h1><ul><li>补丁类型：游戏MOD</li><li>整理时间：2019-05-05</li><li>大小：18.73MB</li><li>补丁制作：hiyokomod</li><li>补丁语言：多国</li><li>版本：v1.0</li></ul><p><a href="http://id.ttz9.cn/thn/%E3%80%8A%E8%BE%90%E5%B0%844%E3%80%8B%E4%BA%8C%E6%AC%A1%E5%85%83%E8%90%8C%E5%A6%B9MOD_id371@371_2138610" target="_blank" rel="noopener">download</a></p><blockquote><p>由N网作者“hiyokomod”制作的一款人物外观替换美化mod“<strong>二次元萌妹MOD</strong>”，<br>将游戏中将游戏中多位女性NPC外观修改为二次元美少女，非常精致的面部建模和可修改项，<br>带给每一个老冰棍！喜欢这些萌妹子就来3DM下载体验吧！</p></blockquote><a id="more"></a><h3 id="截图">截图<a href="post/《辐射4》二次元萌妹MOD#截图"></a></h3><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_376264.png" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_327571.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_903130.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_319499.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_929840.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_553987.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_557348.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_140245.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_907658.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><div class="article-img"><p><img src="https://img.3dmgame.com/uploads/images/news/20190505/1557045450_261890.jpeg" alt="《辐射4》二次元萌妹MOD" data-zoomable=""></p></div><h3 id="注意事项">注意事项<a href="post/《辐射4》二次元萌妹MOD#注意事项"></a></h3><p>需要下载“<strong><span style="color:#E53333;">LooksMenu捏脸菜单</span></strong>==&gt;<a href="https://dl.3dmgame.com/patch/138611.html" target="_blank" rel="noopener">点我下载</a>”。</p><h3 id="使用说明">使用说明<a href="post/《辐射4》二次元萌妹MOD#使用说明"></a></h3><p><strong>NMM自动安装方法：</strong><br><a href="https://dl.3dmgame.com/patch/128998.html" target="_blank" rel="noopener">点我下载NMM</a></p><pre><code>1、添加压缩包到NMM(列表中出现)；2、双击列表安装；3、进入游戏即可。**手动安装方法(不推荐)：** 1、解压缩；2、将data文件夹复制到游戏根目录；3、用MOD管理器加载ESP；4、进入游戏中即可。</code></pre><h3 id="演示视频">演示视频<a href="post/《辐射4》二次元萌妹MOD#演示视频"></a></h3><iframe src="https://player.youku.com/embed/XNDE2Njc1OTM0MA==?client_id=5a73c0df8eb0d91d" allowfullscreen width="640" height="480" frameborder="0"></iframe><iframe src="https://player.youku.com/embed/XNDE2Njc2MjM2NA==?client_id=5a73c0df8eb0d91d" allowfullscreen width="640" height="480" frameborder="0"></iframe><p>分流</p><blockquote><p><a href="https://pan.baidu.com/s/1hYTBEc2DQbmP2k98JLSwkA" target="_blank" rel="noopener">百度网盘(提取码：br93)</a></p></blockquote><p>本地</p><blockquote><p><a href="http://dl1.cudown.com/buding/mod/3DMGAME-FO4AnimeRaceNanakochanmod.rar" target="_blank" rel="noopener">电信</a><br><a href="http://dl1.cudown.com/buding/mod/3DMGAME-FO4AnimeRaceNanakochanmod.rar" target="_blank" rel="noopener">网通</a></p></blockquote><blockquote><p><a href="http://id.ttz9.cn/thn/%E3%80%8A%E8%BE%90%E5%B0%844%E3%80%8B%E4%BA%8C%E6%AC%A1%E5%85%83%E8%90%8C%E5%A6%B9MOD_id372@372_2138610" target="_blank" rel="noopener">高速下载</a><br><a href="http://id.ttz9.cn/thn/%E3%80%8A%E8%BE%90%E5%B0%844%E3%80%8B%E4%BA%8C%E6%AC%A1%E5%85%83%E8%90%8C%E5%A6%B9MOD_id372@372_2138610" target="_blank" rel="noopener">电信下载</a><br><a href="http://id.ttz9.cn/thn/%E3%80%8A%E8%BE%90%E5%B0%844%E3%80%8B%E4%BA%8C%E6%AC%A1%E5%85%83%E8%90%8C%E5%A6%B9MOD_id372@372_2138610" target="_blank" rel="noopener">联通下载</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      由N网作者“hiyokomod”制作的一款人物外观替换美化mod“**二次元萌妹MOD**”，将游戏中将游戏中多位女性NPC外观修改为二次元美少女，非常精致的面部建模和可修改项，带给每一个老冰棍！喜欢这些萌妹子就来3DM下载体验吧！
    
    </summary>
    
      <category term="Mod" scheme="https://shuntan.github.io/categories/Mod/"/>
    
    
      <category term="Games" scheme="https://shuntan.github.io/tags/Games/"/>
    
      <category term="Pc" scheme="https://shuntan.github.io/tags/Pc/"/>
    
  </entry>
  
  <entry>
    <title>给hexo博客next主题添加背景音乐</title>
    <link href="https://shuntan.github.io/posts/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/"/>
    <id>https://shuntan.github.io/posts/给hexo博客next主题添加背景音乐/</id>
    <published>2019-05-06T13:11:05.000Z</published>
    <updated>2019-07-03T11:59:22.896Z</updated>
    
    <content type="html"><![CDATA[<ul><li>请访问我的个人博客 <a href="//blog.sourcod.com">sourcod</a></li></ul><blockquote><p>我的hexo博客使用的是next主题所有次教程在next主题上修改。</p></blockquote><h3 id="修改-themes-next-layout-macro-sidebar-swig-文件">修改 <code>themes/next/layout/_macro/sidebar.swig</code> 文件<a href="post/给hexo博客next主题添加背景音乐#修改-themes-next-layout-macro-sidebar-swig-文件"></a></h3><p>添加音乐播放器内容 </p><div class="article-img"><p><img src="http://sourcod.oss-cn-beijing.aliyuncs.com/hexo/91fc7624571cb9276c6338b1c9913fa3.png" alt="sidebar" data-zoomable=""></p></div><a id="more"></a><h3 id="在-themes-next-config-yml-配置文件中添加歌单地址配置">在 <code>themes/next/_config.yml</code> 配置文件中添加歌单地址配置<a href="post/给hexo博客next主题添加背景音乐#在-themes-next-config-yml-配置文件中添加歌单地址配置"></a></h3><p><code>background_music: //music.163.com/outchain/player?type=0&amp;amp;id=2120628564&amp;amp;auto=1&amp;amp;height=66</code> </p><div class="article-img"><p><img src="http://sourcod.oss-cn-beijing.aliyuncs.com/hexo/676e3e18fa9bdc5af7621bc471cc2895.png" alt="歌单地址配置" data-zoomable=""></p></div><h3 id="注册网易云音乐"><a name="t2"></a>注册网易云音乐<a href="post/给hexo博客next主题添加背景音乐#注册网易云音乐"></a></h3><p>自己研究</p><h3 id="创建歌单"><a name="t3"></a>创建歌单<a href="post/给hexo博客next主题添加背景音乐#创建歌单"></a></h3><p>自己研究</p><h3 id="给歌单添加自己喜欢的音乐"><a name="t4"></a>给歌单添加自己喜欢的音乐<a href="post/给hexo博客next主题添加背景音乐#给歌单添加自己喜欢的音乐"></a></h3><p>看你自己了</p><h3 id="分享歌单"><a name="t5"></a>分享歌单<a href="post/给hexo博客next主题添加背景音乐#分享歌单"></a></h3><p>不会获取外链的请上度娘: <a href="https://jingyan.baidu.com/article/d7130635dcdf6813fdf475c7.html" target="_blank" rel="noopener">怎么把自己的歌单做成外链</a></p><h3 id="获取外链播放器"><a name="t6"></a>获取外链播放器<a href="post/给hexo博客next主题添加背景音乐#获取外链播放器"></a></h3><div class="article-img"><p><img src="http://sourcod.oss-cn-beijing.aliyuncs.com/hexo/3684d31ccbbb950e018b16113068a967.png" alt="外链播放器" data-zoomable=""></p></div><h3 id="把地址copy出来height-90改成-66"><a name="t7"></a>把地址copy出来<code>height=90</code>改成 <code>66</code><a href="post/给hexo博客next主题添加背景音乐#把地址copy出来height-90改成-66"></a></h3><div class="article-img"><p><img src="http://sourcod.oss-cn-beijing.aliyuncs.com/hexo/47f61ed64adaa3db93c0eceec989978e.png" alt="外链" data-zoomable=""></p></div><blockquote><p>这样以后只需要修改网易云音乐的歌单，博客的背景音乐就会自动修改了。</p><p>如果出现音乐不自动播放，那是资源的问题，自己上网易云音乐生成外链的页面看看会不会自动播放。把坏资源删除就OK了。</p></blockquote><hr><p><em>修改完我的博客的效果</em></p><div class="article-img"><p><img src="http://sourcod.oss-cn-beijing.aliyuncs.com/hexo/e10246452ccbc9a5eb5e2f2b8c5c70e7.png" alt="博客效果" data-zoomable=""></p></div>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;请访问我的个人博客 &lt;a href=&quot;//blog.sourcod.com&quot;&gt;sourcod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我的hexo博客使用的是next主题所有次教程在next主题上修改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;修改-themes-next-layout-macro-sidebar-swig-文件&quot;&gt;修改 &lt;code&gt;themes/next/layout/_macro/sidebar.swig&lt;/code&gt; 文件&lt;a href=&quot;post/给hexo博客next主题添加背景音乐#修改-themes-next-layout-macro-sidebar-swig-文件&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;添加音乐播放器内容 &lt;/p&gt;
&lt;div class=&quot;article-img&quot;&gt;&lt;p&gt;&lt;img src=&quot;http://sourcod.oss-cn-beijing.aliyuncs.com/hexo/91fc7624571cb9276c6338b1c9913fa3.png&quot; alt=&quot;sidebar&quot; data-zoomable=&quot;&quot;&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hexo教程" scheme="https://shuntan.github.io/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="https://shuntan.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>问道</title>
    <link href="https://shuntan.github.io/posts/%E9%97%AE%E9%81%93/"/>
    <id>https://shuntan.github.io/posts/问道/</id>
    <published>2019-04-11T11:12:20.000Z</published>
    <updated>2019-07-03T12:00:13.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游戏背景介绍">游戏背景介绍<a href="post/问道#游戏背景介绍"></a></h3><p>鸿蒙开化之初，中州大陆昆仑之颠的鸿钧上人创立道教，并收徒三人，各授以道门绝技，三徒皆修成混元大罗金仙万劫不坏之体，分别发展出道教的人道、阐教和截教三个分支。此三徒正是人道教主太上老君、阐教教主元始天尊和截教的通天教主。</p><a id="more"></a><p>三教主秉承师父鸿钧上人教诲，广收门徒将道教流传于世。只因入道门中即可修仙，使人跳出三界之外，不在五行之中，免除生死轮回之苦，使得入道修行之人多不胜数。但修仙之道并非苦心修炼便可达成，修行路上，均要经历三百年一小劫，一千五百年一大劫的劫数。修行之人均无法避开劫数，只能根据自身道行的深浅去经历劫数。值商周两朝交替之时，恰逢修仙一千五百年仙劫，于是三教主共议封神榜，以观众仙根行浅深。然劫数难逃，封神一役，致使道门内部阐教和截教不和，修仙众人俱遭屠戮，更引来西方教派参与纷争，后因鸿钧上人亲自出面调停，终得以平息。通天教主被鸿钧上人禁制在紫霄宫昆仑之颠修行思过。<br>时光如梭，转眼已过千年，师尊鸿钧上人外出云游，不知所踪。而通天仿佛已经习惯了这种被禁固的生活，除了每日的必做的修真炼气和静诵《黄庭》，他更多的时间总是在断崖边静静坐着。也许只有这个时刻，他才能真真实实地感觉到自己的存在，千年的苦行使他的修为倍增，同时也让他饱受了孤单和寂寞，他已经很久没有说过一句话了，很久是多久，他自己也不知道，他只知道他在等，他们都在等。.<br>空旷的断崖边，一个人影伫立，良久，一动不动。山风劲袭，人犹如与山浑然一体，仍是一动不动，坚毅的面容毫无表情，只有明亮的双眸在黑夜印衬下寒光闪现，眺望着远方。远处，骷髅山顶，一块顽石好象动了一动，又动了一动，仿佛有了呼吸。慢慢地，顽石周围竟然忽隐忽现出着玄黄色的光芒，最终幻化为一个人形的光团，缓缓飘向山后的幽冥涧。此时，人影的苍白面容上浮现出奇怪的笑意，令人不寒而栗，他是通天。<br>五百年后的中洲大陆。<br>在东海渔村，世世代代以捕鱼为生的渔民有一天突然发现离他们村子不远的海面上，竟然出现一个异常美丽的仙岛。<br>在天墉城，熙熙攘攘地街道上突然多了一些身着奇装奇服，行为举止十分可疑之人。<br>在揽仙镇，一个平凡冷清的小镇上突然间热闹了起来，从四面八方赶来的俊男美女络绎不绝。<br>本来平静的《问道》世界中出现各种异象和征兆，而此时，准备一探究竟的玩家，正赶往揽仙镇的途中。 [1] </p><h3 id="截图">截图<a href="post/问道#截图"></a></h3><div class="article-img"><p><img src="/%E9%97%AE%E9%81%93/261557566768_.pic_hd.jpg" alt="" data-zoomable=""></p></div><h3 id="下载">下载<a href="post/问道#下载"></a></h3><div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-unique-name-1">客户端下载</a></li><li class="tab"><a href="#fourth-unique-name-2">登录器下载</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-unique-name-1"><div class="note success">            <p>目前只提供1.60.0905版本客户端百度云下载链接🔗<br><a class="btn" href="https://pan.baidu.com/s/1rsdS6oiuAxoYr5wXeZr22A" title="kq7m" target="_blank" rel="noopener"><i class="fa fa-edge"></i>百度云</a></p><p><a class="btn" href="#">密码(kq7m)</a></p>          </div></div><div class="tab-pane" id="fourth-unique-name-2"><div class="note warning">            <p>与版本对应的登录器，服务器为公益服，不做任何盈利和不具备商业性质！<br>链接：<a href="https://pan.baidu.com/s/1RN4VX3bOwH61xC70t82dMw" target="_blank" rel="noopener">https://pan.baidu.com/s/1RN4VX3bOwH61xC70t82dMw</a><br>提取码：**** 复制这段内容后打开百度网盘手机App，操作更方便哦</p><img src="/posts/问道/281557578598_.pic_hd.jpg" width="100px" height="100px"><p><img src="/posts/%E9%97%AE%E9%81%93/281557578598_.pic_hd.jpg" alt=""></p><img src="/posts/问道/281557578598_.pic_hd.jpg">          </div></div></div></div><p>更多资讯: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;游戏背景介绍&quot;&gt;游戏背景介绍&lt;a href=&quot;post/问道#游戏背景介绍&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;鸿蒙开化之初，中州大陆昆仑之颠的鸿钧上人创立道教，并收徒三人，各授以道门绝技，三徒皆修成混元大罗金仙万劫不坏之体，分别发展出道教的人道、阐教和截教三个分支。此三徒正是人道教主太上老君、阐教教主元始天尊和截教的通天教主。&lt;/p&gt;
    
    </summary>
    
      <category term="PC" scheme="https://shuntan.github.io/categories/PC/"/>
    
    
      <category term="online" scheme="https://shuntan.github.io/tags/online/"/>
    
      <category term="game" scheme="https://shuntan.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://shuntan.github.io/posts/hello-world/"/>
    <id>https://shuntan.github.io/posts/hello-world/</id>
    <published>2018-10-24T14:19:55.904Z</published>
    <updated>2019-07-03T11:59:52.035Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start">Quick Start<a href="post/hello-world#Quick-Start"></a></h2><h3 id="Create-a-new-post">Create a new post<a href="post/hello-world#Create-a-new-post"></a></h3><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server">Run server<a href="post/hello-world#Run-server"></a></h3><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files">Generate static files<a href="post/hello-world#Generate-static-files"></a></h3><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites<a href="post/hello-world#Deploy-to-remote-sites"></a></h3><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>更多资讯: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="https://shuntan.github.io/categories/Diary/"/>
    
    
      <category term="Diary" scheme="https://shuntan.github.io/tags/Diary/"/>
    
  </entry>
  
</feed>
